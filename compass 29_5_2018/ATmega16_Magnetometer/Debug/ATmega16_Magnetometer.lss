
ATmega16_Magnetometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ad2  00000b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000b68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d4  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd5  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000943  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fd  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000608  00000000  00000000  00003ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000040f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 4a       	sbci	r16, 0xA8	; 168
  8e:	d7 3b       	cpi	r29, 0xB7	; 183
  90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
  92:	01 6e       	ori	r16, 0xE1	; 225
  94:	84 bc       	out	0x24, r8	; 36
  96:	bf fd       	.word	0xfdbf	; ????
  98:	c1 2f       	mov	r28, r17
  9a:	3d 6c       	ori	r19, 0xCD	; 205
  9c:	74 31       	cpi	r23, 0x14	; 20
  9e:	9a bd       	out	0x2a, r25	; 42
  a0:	56 83       	std	Z+6, r21	; 0x06
  a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
  a4:	3d 00       	.word	0x003d	; ????
  a6:	c7 7f       	andi	r28, 0xF7	; 247
  a8:	11 be       	out	0x31, r1	; 49
  aa:	d9 e4       	ldi	r29, 0x49	; 73
  ac:	bb 4c       	sbci	r27, 0xCB	; 203
  ae:	3e 91       	ld	r19, -X
  b0:	6b aa       	std	Y+51, r6	; 0x33
  b2:	aa be       	out	0x3a, r10	; 58
  b4:	00 00       	nop
  b6:	00 80       	ld	r0, Z
  b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d0 e1       	ldi	r29, 0x10	; 16
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e2 ed       	ldi	r30, 0xD2	; 210
  ce:	fa e0       	ldi	r31, 0x0A	; 10
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	0b bf       	out	0x3b, r16	; 59
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
  d6:	07 90       	elpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a2 30       	cpi	r26, 0x02	; 2
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>

000000e0 <__do_clear_bss>:
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	a2 e0       	ldi	r26, 0x02	; 2
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a8 30       	cpi	r26, 0x08	; 8
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
  f0:	02 d0       	rcall	.+4      	; 0xf6 <main>
  f2:	ed c4       	rjmp	.+2522   	; 0xace <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#include "compass.h"
#include "usart.h"						               /* Include I2C header file */


int main(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	2a 97       	sbiw	r28, 0x0a	; 10
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
	char buffer[10];
	I2C_Init();											/* Initialize I2C */
	Magneto_init();										/* Initialize magneto */
 108:	cd bf       	out	0x3d, r28	; 61
	uart_init(9600);
 10a:	dc d0       	rcall	.+440    	; 0x2c4 <I2C_Init>
	
	while (1)
	{
		itoa (compass_direction(Magneto_GetHeading()),buffer,10);
 10c:	1a d0       	rcall	.+52     	; 0x142 <Magneto_init>
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	95 e2       	ldi	r25, 0x25	; 37
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 112:	9b d1       	rcall	.+822    	; 0x44a <uart_init>
 114:	22 d0       	rcall	.+68     	; 0x15a <Magneto_GetHeading>
 116:	98 d0       	rcall	.+304    	; 0x248 <compass_direction>
 118:	4a e0       	ldi	r20, 0x0A	; 10
		uart_SendString(buffer);
 11a:	be 01       	movw	r22, r28
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	a3 d4       	rcall	.+2374   	; 0xa68 <__itoa_ncheck>
		uart_SendString("\n"); ///555
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	bd d1       	rcall	.+890    	; 0x4a2 <uart_SendString>
 128:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	ba d1       	rcall	.+884    	; 0x4a2 <uart_SendString>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x3e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x48>
 13e:	00 00       	nop
 140:	e9 cf       	rjmp	.-46     	; 0x114 <main+0x1e>

00000142 <Magneto_init>:
double Heading;
int COM ;
/* Magneto initialize function */
void Magneto_init()
{	
	I2C_Start(0x3C);									/* Start and write SLA+W */
 142:	8c e3       	ldi	r24, 0x3C	; 60
	I2C_Write(0x00);									/* Write memory location address */
 144:	c5 d0       	rcall	.+394    	; 0x2d0 <I2C_Start>
	I2C_Write(0x70);									/* Configure register A as 8-average, 15 Hz default, normal measurement */
 146:	80 e0       	ldi	r24, 0x00	; 0
	I2C_Write(0xA0);									/* Configure register B for gain */
 148:	53 d1       	rcall	.+678    	; 0x3f0 <I2C_Write>
	I2C_Write(0x00);									/* Configure continuous measurement mode in mode register */
 14a:	80 e7       	ldi	r24, 0x70	; 112
 14c:	51 d1       	rcall	.+674    	; 0x3f0 <I2C_Write>
 14e:	80 ea       	ldi	r24, 0xA0	; 160
	I2C_Stop();											/* Stop I2C */
 150:	4f d1       	rcall	.+670    	; 0x3f0 <I2C_Write>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	4d d1       	rcall	.+666    	; 0x3f0 <I2C_Write>
 156:	08 c1       	rjmp	.+528    	; 0x368 <I2C_Stop>
 158:	08 95       	ret

0000015a <Magneto_GetHeading>:
}

int Magneto_GetHeading()
{
 15a:	8f 92       	push	r8
 15c:	9f 92       	push	r9
 15e:	af 92       	push	r10
 160:	bf 92       	push	r11
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	int x, y, z;
	
	double Heading;
	I2C_Start_Wait(0x3C);								/* Start and wait for acknowledgment */
 170:	8c e3       	ldi	r24, 0x3C	; 60
	I2C_Write(0x03);									/* Write X register address */
	I2C_Repeated_Start(0x3D);							/* Generate repeat start condition with SLA+R */
 172:	03 d1       	rcall	.+518    	; 0x37a <I2C_Start_Wait>
	/* Read 16 bit x,y,z value (2’s complement form) */
	x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	3c d1       	rcall	.+632    	; 0x3f0 <I2C_Write>
 178:	8d e3       	ldi	r24, 0x3D	; 61
 17a:	d0 d0       	rcall	.+416    	; 0x31c <I2C_Repeated_Start>
 17c:	50 d1       	rcall	.+672    	; 0x41e <I2C_Read_Ack>
 17e:	c8 2f       	mov	r28, r24
 180:	4e d1       	rcall	.+668    	; 0x41e <I2C_Read_Ack>
	z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 182:	6c 2f       	mov	r22, r28
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	76 2f       	mov	r23, r22
 188:	66 27       	eor	r22, r22
	y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
 18a:	eb 01       	movw	r28, r22
 18c:	c8 2b       	or	r28, r24
 18e:	47 d1       	rcall	.+654    	; 0x41e <I2C_Read_Ack>
 190:	46 d1       	rcall	.+652    	; 0x41e <I2C_Read_Ack>
 192:	45 d1       	rcall	.+650    	; 0x41e <I2C_Read_Ack>
 194:	18 2f       	mov	r17, r24
 196:	4e d1       	rcall	.+668    	; 0x434 <I2C_Read_Nack>
 198:	61 2f       	mov	r22, r17
 19a:	70 e0       	ldi	r23, 0x00	; 0
	I2C_Stop();											/* Stop I2C */
 19c:	76 2f       	mov	r23, r22
 19e:	66 27       	eor	r22, r22
	Heading = atan2((double)y,(double)x) + Declination;
 1a0:	7b 01       	movw	r14, r22
 1a2:	e8 2a       	or	r14, r24
 1a4:	e1 d0       	rcall	.+450    	; 0x368 <I2C_Stop>
 1a6:	be 01       	movw	r22, r28
 1a8:	dd 0f       	add	r29, r29
 1aa:	88 0b       	sbc	r24, r24
 1ac:	99 0b       	sbc	r25, r25
 1ae:	f4 d2       	rcall	.+1512   	; 0x798 <__floatsisf>
 1b0:	4b 01       	movw	r8, r22
 1b2:	5c 01       	movw	r10, r24
 1b4:	b7 01       	movw	r22, r14
 1b6:	ff 0c       	add	r15, r15
 1b8:	88 0b       	sbc	r24, r24
 1ba:	99 0b       	sbc	r25, r25
 1bc:	ed d2       	rcall	.+1498   	; 0x798 <__floatsisf>
 1be:	a5 01       	movw	r20, r10
 1c0:	94 01       	movw	r18, r8
 1c2:	f8 d1       	rcall	.+1008   	; 0x5b4 <atan2>
 1c4:	2b ee       	ldi	r18, 0xEB	; 235
 1c6:	3d ea       	ldi	r19, 0xAD	; 173
 1c8:	4c e9       	ldi	r20, 0x9C	; 156
	if (Heading>2*PI)									/* Due to declination check for >360 degree */
 1ca:	5d e3       	ldi	r21, 0x3D	; 61
 1cc:	80 d1       	rcall	.+768    	; 0x4ce <__addsf3>
 1ce:	6b 01       	movw	r12, r22
 1d0:	7c 01       	movw	r14, r24
 1d2:	2b ed       	ldi	r18, 0xDB	; 219
 1d4:	3f e0       	ldi	r19, 0x0F	; 15
 1d6:	49 ec       	ldi	r20, 0xC9	; 201
	Heading = Heading - 2*PI;
 1d8:	50 e4       	ldi	r21, 0x40	; 64
 1da:	b3 d3       	rcall	.+1894   	; 0x942 <__gesf2>
 1dc:	18 16       	cp	r1, r24
 1de:	4c f4       	brge	.+18     	; 0x1f2 <Magneto_GetHeading+0x98>
 1e0:	2b ed       	ldi	r18, 0xDB	; 219
 1e2:	3f e0       	ldi	r19, 0x0F	; 15
 1e4:	49 ec       	ldi	r20, 0xC9	; 201
 1e6:	50 e4       	ldi	r21, 0x40	; 64
 1e8:	c7 01       	movw	r24, r14
	if (Heading<0)										/* Check for sign */
 1ea:	b6 01       	movw	r22, r12
 1ec:	6f d1       	rcall	.+734    	; 0x4cc <__subsf3>
 1ee:	6b 01       	movw	r12, r22
 1f0:	7c 01       	movw	r14, r24
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	a9 01       	movw	r20, r18
 1f8:	c7 01       	movw	r24, r14
	Heading = Heading + 2*PI;
 1fa:	b6 01       	movw	r22, r12
 1fc:	2e d2       	rcall	.+1116   	; 0x65a <__cmpsf2>
 1fe:	88 23       	and	r24, r24
 200:	4c f4       	brge	.+18     	; 0x214 <Magneto_GetHeading+0xba>
 202:	2b ed       	ldi	r18, 0xDB	; 219
 204:	3f e0       	ldi	r19, 0x0F	; 15
 206:	49 ec       	ldi	r20, 0xC9	; 201
 208:	50 e4       	ldi	r21, 0x40	; 64
	double Deg = (Heading* 180 / PI);
	return (Deg);							/* Convert into angle and return */
 20a:	c7 01       	movw	r24, r14
 20c:	b6 01       	movw	r22, r12
 20e:	5f d1       	rcall	.+702    	; 0x4ce <__addsf3>
 210:	6b 01       	movw	r12, r22
 212:	7c 01       	movw	r14, r24
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	44 e3       	ldi	r20, 0x34	; 52
 21a:	53 e4       	ldi	r21, 0x43	; 67
 21c:	c7 01       	movw	r24, r14
 21e:	b6 01       	movw	r22, r12
 220:	9b d3       	rcall	.+1846   	; 0x958 <__mulsf3>
 222:	2b ed       	ldi	r18, 0xDB	; 219
 224:	3f e0       	ldi	r19, 0x0F	; 15
 226:	49 e4       	ldi	r20, 0x49	; 73
 228:	50 e4       	ldi	r21, 0x40	; 64
}
 22a:	1b d2       	rcall	.+1078   	; 0x662 <__divsf3>
 22c:	82 d2       	rcall	.+1284   	; 0x732 <__fixsfsi>
 22e:	cb 01       	movw	r24, r22
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	ff 90       	pop	r15
 238:	ef 90       	pop	r14
 23a:	df 90       	pop	r13
 23c:	cf 90       	pop	r12
 23e:	bf 90       	pop	r11
 240:	af 90       	pop	r10
 242:	9f 90       	pop	r9
 244:	8f 90       	pop	r8
 246:	08 95       	ret

00000248 <compass_direction>:

int compass_direction(int Deg)
{ 
	//double Deg = (Heading* 180 / PI);
	if ((0 <= Deg && Deg <= 20 )|| (340 <= Deg && Deg <= 360)) 
 248:	85 31       	cpi	r24, 0x15	; 21
 24a:	91 05       	cpc	r25, r1
 24c:	30 f0       	brcs	.+12     	; 0x25a <compass_direction+0x12>
 24e:	9c 01       	movw	r18, r24
 250:	24 55       	subi	r18, 0x54	; 84
 252:	31 40       	sbci	r19, 0x01	; 1
 254:	25 31       	cpi	r18, 0x15	; 21
 256:	31 05       	cpc	r19, r1
 258:	28 f4       	brcc	.+10     	; 0x264 <compass_direction+0x1c>
	{
		COM = north;
 25a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 25e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 262:	2b c0       	rjmp	.+86     	; 0x2ba <compass_direction+0x72>
	}
  else if (160 <= Deg && Deg <= 200)
 264:	9c 01       	movw	r18, r24
 266:	20 5a       	subi	r18, 0xA0	; 160
 268:	31 09       	sbc	r19, r1
 26a:	29 32       	cpi	r18, 0x29	; 41
 26c:	31 05       	cpc	r19, r1
 26e:	38 f4       	brcc	.+14     	; 0x27e <compass_direction+0x36>
  {
	  COM = south;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 278:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 27c:	1e c0       	rjmp	.+60     	; 0x2ba <compass_direction+0x72>
  }
  else if ( 70 <= Deg && Deg <= 110)
 27e:	9c 01       	movw	r18, r24
 280:	26 54       	subi	r18, 0x46	; 70
 282:	31 09       	sbc	r19, r1
 284:	29 32       	cpi	r18, 0x29	; 41
 286:	31 05       	cpc	r19, r1
 288:	38 f4       	brcc	.+14     	; 0x298 <compass_direction+0x50>
  {
	  COM = east;
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 296:	11 c0       	rjmp	.+34     	; 0x2ba <compass_direction+0x72>
  }
  else if (250 <= Deg && Deg <= 290)
 298:	8a 5f       	subi	r24, 0xFA	; 250
 29a:	91 09       	sbc	r25, r1
 29c:	89 97       	sbiw	r24, 0x29	; 41
 29e:	38 f4       	brcc	.+14     	; 0x2ae <compass_direction+0x66>
  {
	  COM = west;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <compass_direction+0x72>
  }
  else {
	 COM = non;
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	  }
  return(COM);
 2ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2c2:	08 95       	ret

000002c4 <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 2c4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2c8:	80 e2       	ldi	r24, 0x20	; 32
 2ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2ce:	08 95       	ret

000002d0 <I2C_Start>:


uint8_t I2C_Start(char slave_write_address)					/* I2C start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 2d0:	94 ea       	ldi	r25, 0xA4	; 164
 2d2:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 2d6:	e4 e7       	ldi	r30, 0x74	; 116
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	90 81       	ld	r25, Z
 2dc:	99 23       	and	r25, r25
 2de:	ec f7       	brge	.-6      	; 0x2da <I2C_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 2e0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
 2e4:	98 7f       	andi	r25, 0xF8	; 248
 2e6:	98 30       	cpi	r25, 0x08	; 8
 2e8:	99 f4       	brne	.+38     	; 0x310 <I2C_Start+0x40>
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address;								/* If yes then write SLA+W in TWI data register */
 2ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 2ee:	84 e8       	ldi	r24, 0x84	; 132
 2f0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 2f4:	e4 e7       	ldi	r30, 0x74	; 116
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	88 23       	and	r24, r24
 2fc:	ec f7       	brge	.-6      	; 0x2f8 <I2C_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
 2fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 302:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
 304:	88 31       	cpi	r24, 0x18	; 24
 306:	31 f0       	breq	.+12     	; 0x314 <I2C_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
 308:	80 32       	cpi	r24, 0x20	; 32
 30a:	31 f0       	breq	.+12     	; 0x318 <I2C_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
	return 0;												/* If not then return 0 to indicate start condition fail */
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
	TWDR = slave_write_address;								/* If yes then write SLA+W in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 318:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 31a:	08 95       	ret

0000031c <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 31c:	94 ea       	ldi	r25, 0xA4	; 164
 31e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 322:	e4 e7       	ldi	r30, 0x74	; 116
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	99 23       	and	r25, r25
 32a:	ec f7       	brge	.-6      	; 0x326 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 32c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 330:	98 7f       	andi	r25, 0xF8	; 248
 332:	90 31       	cpi	r25, 0x10	; 16
 334:	99 f4       	brne	.+38     	; 0x35c <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
 336:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 33a:	84 e8       	ldi	r24, 0x84	; 132
 33c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 340:	e4 e7       	ldi	r30, 0x74	; 116
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	88 23       	and	r24, r24
 348:	ec f7       	brge	.-6      	; 0x344 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 34a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 34e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 350:	80 34       	cpi	r24, 0x40	; 64
 352:	31 f0       	breq	.+12     	; 0x360 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 354:	80 32       	cpi	r24, 0x20	; 32
 356:	31 f0       	breq	.+12     	; 0x364 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 364:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 366:	08 95       	ret

00000368 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 368:	84 e9       	ldi	r24, 0x94	; 148
 36a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
 36e:	e4 e7       	ldi	r30, 0x74	; 116
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	84 fd       	sbrc	r24, 4
 376:	fd cf       	rjmp	.-6      	; 0x372 <I2C_Stop+0xa>
}
 378:	08 95       	ret

0000037a <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
 37a:	bf 92       	push	r11
 37c:	cf 92       	push	r12
 37e:	df 92       	push	r13
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 38e:	c4 e7       	ldi	r28, 0x74	; 116
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	0f 2e       	mov	r0, r31
 394:	f4 ea       	ldi	r31, 0xA4	; 164
 396:	df 2e       	mov	r13, r31
 398:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 39a:	01 e7       	ldi	r16, 0x71	; 113
 39c:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
 39e:	0f 2e       	mov	r0, r31
 3a0:	f3 e7       	ldi	r31, 0x73	; 115
 3a2:	ef 2e       	mov	r14, r31
 3a4:	f1 2c       	mov	r15, r1
 3a6:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 3a8:	0f 2e       	mov	r0, r31
 3aa:	f4 e8       	ldi	r31, 0x84	; 132
 3ac:	cf 2e       	mov	r12, r31
 3ae:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 3b0:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 3b2:	88 81       	ld	r24, Y
 3b4:	88 23       	and	r24, r24
 3b6:	ec f7       	brge	.-6      	; 0x3b2 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 3b8:	f8 01       	movw	r30, r16
 3ba:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 3bc:	88 7f       	andi	r24, 0xF8	; 248
 3be:	88 30       	cpi	r24, 0x08	; 8
 3c0:	b9 f7       	brne	.-18     	; 0x3b0 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
 3c2:	f7 01       	movw	r30, r14
 3c4:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 3c6:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 3c8:	88 81       	ld	r24, Y
 3ca:	88 23       	and	r24, r24
 3cc:	ec f7       	brge	.-6      	; 0x3c8 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 3ce:	f8 01       	movw	r30, r16
 3d0:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 3d2:	88 7f       	andi	r24, 0xF8	; 248
 3d4:	88 31       	cpi	r24, 0x18	; 24
		{
			I2C_Stop();										/* If not then generate stop condition */
 3d6:	11 f0       	breq	.+4      	; 0x3dc <I2C_Start_Wait+0x62>
			continue;										/* continue with start loop again */
 3d8:	c7 df       	rcall	.-114    	; 0x368 <I2C_Stop>
		}
		break;												/* If yes then break loop */
	}
}
 3da:	ea cf       	rjmp	.-44     	; 0x3b0 <I2C_Start_Wait+0x36>
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	08 95       	ret

000003f0 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 3f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 3f4:	84 e8       	ldi	r24, 0x84	; 132
 3f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 3fa:	e4 e7       	ldi	r30, 0x74	; 116
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	88 23       	and	r24, r24
 402:	ec f7       	brge	.-6      	; 0x3fe <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 404:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 408:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 40a:	88 32       	cpi	r24, 0x28	; 40
 40c:	21 f0       	breq	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 40e:	80 33       	cpi	r24, 0x30	; 48
 410:	21 f0       	breq	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
 41a:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 41c:	08 95       	ret

0000041e <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 41e:	84 ec       	ldi	r24, 0xC4	; 196
 420:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 424:	e4 e7       	ldi	r30, 0x74	; 116
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 23       	and	r24, r24
 42c:	ec f7       	brge	.-6      	; 0x428 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
 42e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}	
 432:	08 95       	ret

00000434 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 434:	84 e8       	ldi	r24, 0x84	; 132
 436:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 43a:	e4 e7       	ldi	r30, 0x74	; 116
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	88 23       	and	r24, r24
 442:	ec f7       	brge	.-6      	; 0x43e <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
 444:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}	
 448:	08 95       	ret

0000044a <uart_init>:
	
}
void uart1_Send(unsigned char  data)
{
		while(!(UCSR1A & (1 << UDRE1)));
		UDR1 = data	 ;
 44a:	a0 e0       	ldi	r26, 0x00	; 0
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	9c 01       	movw	r18, r24
 460:	ad 01       	movw	r20, r26
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	44 1f       	adc	r20, r20
 468:	55 1f       	adc	r21, r21
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	44 1f       	adc	r20, r20
 470:	55 1f       	adc	r21, r21
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	72 e1       	ldi	r23, 0x12	; 18
 476:	8a e7       	ldi	r24, 0x7A	; 122
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	d4 d2       	rcall	.+1448   	; 0xa24 <__udivmodsi4>
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	31 09       	sbc	r19, r1
 480:	29 b9       	out	0x09, r18	; 9
 482:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 486:	e5 e9       	ldi	r30, 0x95	; 149
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	86 60       	ori	r24, 0x06	; 6
 48e:	80 83       	st	Z, r24
 490:	57 9a       	sbi	0x0a, 7	; 10
 492:	8a b1       	in	r24, 0x0a	; 10
 494:	88 61       	ori	r24, 0x18	; 24
 496:	8a b9       	out	0x0a, r24	; 10
 498:	08 95       	ret

0000049a <uart_Send>:
 49a:	5d 9b       	sbis	0x0b, 5	; 11
 49c:	fe cf       	rjmp	.-4      	; 0x49a <uart_Send>
 49e:	8c b9       	out	0x0c, r24	; 12
 4a0:	08 95       	ret

000004a2 <uart_SendString>:
}
/*send function ( String )*/

void uart_SendString(char* data) 
{
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	fc 01       	movw	r30, r24
	unsigned char i = 0 ;
	while(data[i] != '\0')
 4aa:	80 81       	ld	r24, Z
 4ac:	88 23       	and	r24, r24
 4ae:	51 f0       	breq	.+20     	; 0x4c4 <uart_SendString+0x22>
 4b0:	8f 01       	movw	r16, r30
	{
		uart_Send(data[i]);
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
		i++ ;
 4b4:	f2 df       	rcall	.-28     	; 0x49a <uart_Send>
/*send function ( String )*/

void uart_SendString(char* data) 
{
	unsigned char i = 0 ;
	while(data[i] != '\0')
 4b6:	cf 5f       	subi	r28, 0xFF	; 255
 4b8:	f8 01       	movw	r30, r16
 4ba:	ec 0f       	add	r30, r28
 4bc:	f1 1d       	adc	r31, r1
 4be:	80 81       	ld	r24, Z
 4c0:	81 11       	cpse	r24, r1
	{
		uart_Send(data[i]);
		i++ ;
	}
	
}
 4c2:	f8 cf       	rjmp	.-16     	; 0x4b4 <uart_SendString+0x12>
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	08 95       	ret

000004cc <__subsf3>:
 4cc:	50 58       	subi	r21, 0x80	; 128

000004ce <__addsf3>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	aa 27       	eor	r26, r26
 4d2:	0e d0       	rcall	.+28     	; 0x4f0 <__addsf3x>
 4d4:	fc c1       	rjmp	.+1016   	; 0x8ce <__fp_round>
 4d6:	ed d1       	rcall	.+986    	; 0x8b2 <__fp_pscA>
 4d8:	30 f0       	brcs	.+12     	; 0x4e6 <__addsf3+0x18>
 4da:	f2 d1       	rcall	.+996    	; 0x8c0 <__fp_pscB>
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__addsf3+0x18>
 4de:	31 f4       	brne	.+12     	; 0x4ec <__addsf3+0x1e>
 4e0:	9f 3f       	cpi	r25, 0xFF	; 255
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__addsf3+0x1a>
 4e4:	1e f4       	brtc	.+6      	; 0x4ec <__addsf3+0x1e>
 4e6:	bd c1       	rjmp	.+890    	; 0x862 <__fp_nan>
 4e8:	0e f4       	brtc	.+2      	; 0x4ec <__addsf3+0x1e>
 4ea:	e0 95       	com	r30
 4ec:	e7 fb       	bst	r30, 7
 4ee:	b3 c1       	rjmp	.+870    	; 0x856 <__fp_inf>

000004f0 <__addsf3x>:
 4f0:	e9 2f       	mov	r30, r25
 4f2:	fe d1       	rcall	.+1020   	; 0x8f0 <__fp_split3>
 4f4:	80 f3       	brcs	.-32     	; 0x4d6 <__addsf3+0x8>
 4f6:	ba 17       	cp	r27, r26
 4f8:	62 07       	cpc	r22, r18
 4fa:	73 07       	cpc	r23, r19
 4fc:	84 07       	cpc	r24, r20
 4fe:	95 07       	cpc	r25, r21
 500:	18 f0       	brcs	.+6      	; 0x508 <__addsf3x+0x18>
 502:	71 f4       	brne	.+28     	; 0x520 <__addsf3x+0x30>
 504:	9e f5       	brtc	.+102    	; 0x56c <__addsf3x+0x7c>
 506:	16 c2       	rjmp	.+1068   	; 0x934 <__fp_zero>
 508:	0e f4       	brtc	.+2      	; 0x50c <__addsf3x+0x1c>
 50a:	e0 95       	com	r30
 50c:	0b 2e       	mov	r0, r27
 50e:	ba 2f       	mov	r27, r26
 510:	a0 2d       	mov	r26, r0
 512:	0b 01       	movw	r0, r22
 514:	b9 01       	movw	r22, r18
 516:	90 01       	movw	r18, r0
 518:	0c 01       	movw	r0, r24
 51a:	ca 01       	movw	r24, r20
 51c:	a0 01       	movw	r20, r0
 51e:	11 24       	eor	r1, r1
 520:	ff 27       	eor	r31, r31
 522:	59 1b       	sub	r21, r25
 524:	99 f0       	breq	.+38     	; 0x54c <__addsf3x+0x5c>
 526:	59 3f       	cpi	r21, 0xF9	; 249
 528:	50 f4       	brcc	.+20     	; 0x53e <__addsf3x+0x4e>
 52a:	50 3e       	cpi	r21, 0xE0	; 224
 52c:	68 f1       	brcs	.+90     	; 0x588 <__addsf3x+0x98>
 52e:	1a 16       	cp	r1, r26
 530:	f0 40       	sbci	r31, 0x00	; 0
 532:	a2 2f       	mov	r26, r18
 534:	23 2f       	mov	r18, r19
 536:	34 2f       	mov	r19, r20
 538:	44 27       	eor	r20, r20
 53a:	58 5f       	subi	r21, 0xF8	; 248
 53c:	f3 cf       	rjmp	.-26     	; 0x524 <__addsf3x+0x34>
 53e:	46 95       	lsr	r20
 540:	37 95       	ror	r19
 542:	27 95       	ror	r18
 544:	a7 95       	ror	r26
 546:	f0 40       	sbci	r31, 0x00	; 0
 548:	53 95       	inc	r21
 54a:	c9 f7       	brne	.-14     	; 0x53e <__addsf3x+0x4e>
 54c:	7e f4       	brtc	.+30     	; 0x56c <__addsf3x+0x7c>
 54e:	1f 16       	cp	r1, r31
 550:	ba 0b       	sbc	r27, r26
 552:	62 0b       	sbc	r22, r18
 554:	73 0b       	sbc	r23, r19
 556:	84 0b       	sbc	r24, r20
 558:	ba f0       	brmi	.+46     	; 0x588 <__addsf3x+0x98>
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	a1 f0       	breq	.+40     	; 0x586 <__addsf3x+0x96>
 55e:	ff 0f       	add	r31, r31
 560:	bb 1f       	adc	r27, r27
 562:	66 1f       	adc	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	c2 f7       	brpl	.-16     	; 0x55a <__addsf3x+0x6a>
 56a:	0e c0       	rjmp	.+28     	; 0x588 <__addsf3x+0x98>
 56c:	ba 0f       	add	r27, r26
 56e:	62 1f       	adc	r22, r18
 570:	73 1f       	adc	r23, r19
 572:	84 1f       	adc	r24, r20
 574:	48 f4       	brcc	.+18     	; 0x588 <__addsf3x+0x98>
 576:	87 95       	ror	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f7 95       	ror	r31
 580:	9e 3f       	cpi	r25, 0xFE	; 254
 582:	08 f0       	brcs	.+2      	; 0x586 <__addsf3x+0x96>
 584:	b3 cf       	rjmp	.-154    	; 0x4ec <__addsf3+0x1e>
 586:	93 95       	inc	r25
 588:	88 0f       	add	r24, r24
 58a:	08 f0       	brcs	.+2      	; 0x58e <__addsf3x+0x9e>
 58c:	99 27       	eor	r25, r25
 58e:	ee 0f       	add	r30, r30
 590:	97 95       	ror	r25
 592:	87 95       	ror	r24
 594:	08 95       	ret
 596:	8d d1       	rcall	.+794    	; 0x8b2 <__fp_pscA>
 598:	58 f0       	brcs	.+22     	; 0x5b0 <__addsf3x+0xc0>
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__addsf3x+0xb2>
 5a0:	9e ef       	ldi	r25, 0xFE	; 254
 5a2:	8e d1       	rcall	.+796    	; 0x8c0 <__fp_pscB>
 5a4:	28 f0       	brcs	.+10     	; 0x5b0 <__addsf3x+0xc0>
 5a6:	40 e8       	ldi	r20, 0x80	; 128
 5a8:	51 e0       	ldi	r21, 0x01	; 1
 5aa:	59 f4       	brne	.+22     	; 0x5c2 <atan2+0xe>
 5ac:	5e ef       	ldi	r21, 0xFE	; 254
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <atan2+0xe>
 5b0:	58 c1       	rjmp	.+688    	; 0x862 <__fp_nan>
 5b2:	c0 c1       	rjmp	.+896    	; 0x934 <__fp_zero>

000005b4 <atan2>:
 5b4:	e9 2f       	mov	r30, r25
 5b6:	e0 78       	andi	r30, 0x80	; 128
 5b8:	9b d1       	rcall	.+822    	; 0x8f0 <__fp_split3>
 5ba:	68 f3       	brcs	.-38     	; 0x596 <__addsf3x+0xa6>
 5bc:	09 2e       	mov	r0, r25
 5be:	05 2a       	or	r0, r21
 5c0:	c1 f3       	breq	.-16     	; 0x5b2 <__addsf3x+0xc2>
 5c2:	26 17       	cp	r18, r22
 5c4:	37 07       	cpc	r19, r23
 5c6:	48 07       	cpc	r20, r24
 5c8:	59 07       	cpc	r21, r25
 5ca:	38 f0       	brcs	.+14     	; 0x5da <atan2+0x26>
 5cc:	0e 2e       	mov	r0, r30
 5ce:	07 f8       	bld	r0, 7
 5d0:	e0 25       	eor	r30, r0
 5d2:	69 f0       	breq	.+26     	; 0x5ee <atan2+0x3a>
 5d4:	e0 25       	eor	r30, r0
 5d6:	e0 64       	ori	r30, 0x40	; 64
 5d8:	0a c0       	rjmp	.+20     	; 0x5ee <atan2+0x3a>
 5da:	ef 63       	ori	r30, 0x3F	; 63
 5dc:	07 f8       	bld	r0, 7
 5de:	00 94       	com	r0
 5e0:	07 fa       	bst	r0, 7
 5e2:	db 01       	movw	r26, r22
 5e4:	b9 01       	movw	r22, r18
 5e6:	9d 01       	movw	r18, r26
 5e8:	dc 01       	movw	r26, r24
 5ea:	ca 01       	movw	r24, r20
 5ec:	ad 01       	movw	r20, r26
 5ee:	ef 93       	push	r30
 5f0:	47 d0       	rcall	.+142    	; 0x680 <__divsf3_pse>
 5f2:	6d d1       	rcall	.+730    	; 0x8ce <__fp_round>
 5f4:	0a d0       	rcall	.+20     	; 0x60a <atan>
 5f6:	5f 91       	pop	r21
 5f8:	55 23       	and	r21, r21
 5fa:	31 f0       	breq	.+12     	; 0x608 <atan2+0x54>
 5fc:	2b ed       	ldi	r18, 0xDB	; 219
 5fe:	3f e0       	ldi	r19, 0x0F	; 15
 600:	49 e4       	ldi	r20, 0x49	; 73
 602:	50 fd       	sbrc	r21, 0
 604:	49 ec       	ldi	r20, 0xC9	; 201
 606:	63 cf       	rjmp	.-314    	; 0x4ce <__addsf3>
 608:	08 95       	ret

0000060a <atan>:
 60a:	df 93       	push	r29
 60c:	dd 27       	eor	r29, r29
 60e:	b9 2f       	mov	r27, r25
 610:	bf 77       	andi	r27, 0x7F	; 127
 612:	40 e8       	ldi	r20, 0x80	; 128
 614:	5f e3       	ldi	r21, 0x3F	; 63
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	48 07       	cpc	r20, r24
 61c:	5b 07       	cpc	r21, r27
 61e:	10 f4       	brcc	.+4      	; 0x624 <atan+0x1a>
 620:	d9 2f       	mov	r29, r25
 622:	93 d1       	rcall	.+806    	; 0x94a <inverse>
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	7f 93       	push	r23
 62a:	6f 93       	push	r22
 62c:	f8 d1       	rcall	.+1008   	; 0xa1e <square>
 62e:	ec e8       	ldi	r30, 0x8C	; 140
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	1a d1       	rcall	.+564    	; 0x868 <__fp_powser>
 634:	4c d1       	rcall	.+664    	; 0x8ce <__fp_round>
 636:	2f 91       	pop	r18
 638:	3f 91       	pop	r19
 63a:	4f 91       	pop	r20
 63c:	5f 91       	pop	r21
 63e:	98 d1       	rcall	.+816    	; 0x970 <__mulsf3x>
 640:	dd 23       	and	r29, r29
 642:	49 f0       	breq	.+18     	; 0x656 <atan+0x4c>
 644:	90 58       	subi	r25, 0x80	; 128
 646:	a2 ea       	ldi	r26, 0xA2	; 162
 648:	2a ed       	ldi	r18, 0xDA	; 218
 64a:	3f e0       	ldi	r19, 0x0F	; 15
 64c:	49 ec       	ldi	r20, 0xC9	; 201
 64e:	5f e3       	ldi	r21, 0x3F	; 63
 650:	d0 78       	andi	r29, 0x80	; 128
 652:	5d 27       	eor	r21, r29
 654:	4d df       	rcall	.-358    	; 0x4f0 <__addsf3x>
 656:	df 91       	pop	r29
 658:	3a c1       	rjmp	.+628    	; 0x8ce <__fp_round>

0000065a <__cmpsf2>:
 65a:	d9 d0       	rcall	.+434    	; 0x80e <__fp_cmp>
 65c:	08 f4       	brcc	.+2      	; 0x660 <__cmpsf2+0x6>
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret

00000662 <__divsf3>:
 662:	0c d0       	rcall	.+24     	; 0x67c <__divsf3x>
 664:	34 c1       	rjmp	.+616    	; 0x8ce <__fp_round>
 666:	2c d1       	rcall	.+600    	; 0x8c0 <__fp_pscB>
 668:	40 f0       	brcs	.+16     	; 0x67a <__divsf3+0x18>
 66a:	23 d1       	rcall	.+582    	; 0x8b2 <__fp_pscA>
 66c:	30 f0       	brcs	.+12     	; 0x67a <__divsf3+0x18>
 66e:	21 f4       	brne	.+8      	; 0x678 <__divsf3+0x16>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	19 f0       	breq	.+6      	; 0x67a <__divsf3+0x18>
 674:	f0 c0       	rjmp	.+480    	; 0x856 <__fp_inf>
 676:	51 11       	cpse	r21, r1
 678:	5e c1       	rjmp	.+700    	; 0x936 <__fp_szero>
 67a:	f3 c0       	rjmp	.+486    	; 0x862 <__fp_nan>

0000067c <__divsf3x>:
 67c:	39 d1       	rcall	.+626    	; 0x8f0 <__fp_split3>
 67e:	98 f3       	brcs	.-26     	; 0x666 <__divsf3+0x4>

00000680 <__divsf3_pse>:
 680:	99 23       	and	r25, r25
 682:	c9 f3       	breq	.-14     	; 0x676 <__divsf3+0x14>
 684:	55 23       	and	r21, r21
 686:	b1 f3       	breq	.-20     	; 0x674 <__divsf3+0x12>
 688:	95 1b       	sub	r25, r21
 68a:	55 0b       	sbc	r21, r21
 68c:	bb 27       	eor	r27, r27
 68e:	aa 27       	eor	r26, r26
 690:	62 17       	cp	r22, r18
 692:	73 07       	cpc	r23, r19
 694:	84 07       	cpc	r24, r20
 696:	38 f0       	brcs	.+14     	; 0x6a6 <__divsf3_pse+0x26>
 698:	9f 5f       	subi	r25, 0xFF	; 255
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	22 0f       	add	r18, r18
 69e:	33 1f       	adc	r19, r19
 6a0:	44 1f       	adc	r20, r20
 6a2:	aa 1f       	adc	r26, r26
 6a4:	a9 f3       	breq	.-22     	; 0x690 <__divsf3_pse+0x10>
 6a6:	33 d0       	rcall	.+102    	; 0x70e <__divsf3_pse+0x8e>
 6a8:	0e 2e       	mov	r0, r30
 6aa:	3a f0       	brmi	.+14     	; 0x6ba <__divsf3_pse+0x3a>
 6ac:	e0 e8       	ldi	r30, 0x80	; 128
 6ae:	30 d0       	rcall	.+96     	; 0x710 <__divsf3_pse+0x90>
 6b0:	91 50       	subi	r25, 0x01	; 1
 6b2:	50 40       	sbci	r21, 0x00	; 0
 6b4:	e6 95       	lsr	r30
 6b6:	00 1c       	adc	r0, r0
 6b8:	ca f7       	brpl	.-14     	; 0x6ac <__divsf3_pse+0x2c>
 6ba:	29 d0       	rcall	.+82     	; 0x70e <__divsf3_pse+0x8e>
 6bc:	fe 2f       	mov	r31, r30
 6be:	27 d0       	rcall	.+78     	; 0x70e <__divsf3_pse+0x8e>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	bb 1f       	adc	r27, r27
 6c8:	26 17       	cp	r18, r22
 6ca:	37 07       	cpc	r19, r23
 6cc:	48 07       	cpc	r20, r24
 6ce:	ab 07       	cpc	r26, r27
 6d0:	b0 e8       	ldi	r27, 0x80	; 128
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3_pse+0x56>
 6d4:	bb 0b       	sbc	r27, r27
 6d6:	80 2d       	mov	r24, r0
 6d8:	bf 01       	movw	r22, r30
 6da:	ff 27       	eor	r31, r31
 6dc:	93 58       	subi	r25, 0x83	; 131
 6de:	5f 4f       	sbci	r21, 0xFF	; 255
 6e0:	2a f0       	brmi	.+10     	; 0x6ec <__divsf3_pse+0x6c>
 6e2:	9e 3f       	cpi	r25, 0xFE	; 254
 6e4:	51 05       	cpc	r21, r1
 6e6:	68 f0       	brcs	.+26     	; 0x702 <__divsf3_pse+0x82>
 6e8:	b6 c0       	rjmp	.+364    	; 0x856 <__fp_inf>
 6ea:	25 c1       	rjmp	.+586    	; 0x936 <__fp_szero>
 6ec:	5f 3f       	cpi	r21, 0xFF	; 255
 6ee:	ec f3       	brlt	.-6      	; 0x6ea <__divsf3_pse+0x6a>
 6f0:	98 3e       	cpi	r25, 0xE8	; 232
 6f2:	dc f3       	brlt	.-10     	; 0x6ea <__divsf3_pse+0x6a>
 6f4:	86 95       	lsr	r24
 6f6:	77 95       	ror	r23
 6f8:	67 95       	ror	r22
 6fa:	b7 95       	ror	r27
 6fc:	f7 95       	ror	r31
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
 700:	c9 f7       	brne	.-14     	; 0x6f4 <__divsf3_pse+0x74>
 702:	88 0f       	add	r24, r24
 704:	91 1d       	adc	r25, r1
 706:	96 95       	lsr	r25
 708:	87 95       	ror	r24
 70a:	97 f9       	bld	r25, 7
 70c:	08 95       	ret
 70e:	e1 e0       	ldi	r30, 0x01	; 1
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	bb 1f       	adc	r27, r27
 718:	62 17       	cp	r22, r18
 71a:	73 07       	cpc	r23, r19
 71c:	84 07       	cpc	r24, r20
 71e:	ba 07       	cpc	r27, r26
 720:	20 f0       	brcs	.+8      	; 0x72a <__divsf3_pse+0xaa>
 722:	62 1b       	sub	r22, r18
 724:	73 0b       	sbc	r23, r19
 726:	84 0b       	sbc	r24, r20
 728:	ba 0b       	sbc	r27, r26
 72a:	ee 1f       	adc	r30, r30
 72c:	88 f7       	brcc	.-30     	; 0x710 <__divsf3_pse+0x90>
 72e:	e0 95       	com	r30
 730:	08 95       	ret

00000732 <__fixsfsi>:
 732:	04 d0       	rcall	.+8      	; 0x73c <__fixunssfsi>
 734:	68 94       	set
 736:	b1 11       	cpse	r27, r1
 738:	fe c0       	rjmp	.+508    	; 0x936 <__fp_szero>
 73a:	08 95       	ret

0000073c <__fixunssfsi>:
 73c:	e1 d0       	rcall	.+450    	; 0x900 <__fp_splitA>
 73e:	88 f0       	brcs	.+34     	; 0x762 <__fixunssfsi+0x26>
 740:	9f 57       	subi	r25, 0x7F	; 127
 742:	90 f0       	brcs	.+36     	; 0x768 <__fixunssfsi+0x2c>
 744:	b9 2f       	mov	r27, r25
 746:	99 27       	eor	r25, r25
 748:	b7 51       	subi	r27, 0x17	; 23
 74a:	a0 f0       	brcs	.+40     	; 0x774 <__fixunssfsi+0x38>
 74c:	d1 f0       	breq	.+52     	; 0x782 <__fixunssfsi+0x46>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a f0       	brmi	.+6      	; 0x75e <__fixunssfsi+0x22>
 758:	ba 95       	dec	r27
 75a:	c9 f7       	brne	.-14     	; 0x74e <__fixunssfsi+0x12>
 75c:	12 c0       	rjmp	.+36     	; 0x782 <__fixunssfsi+0x46>
 75e:	b1 30       	cpi	r27, 0x01	; 1
 760:	81 f0       	breq	.+32     	; 0x782 <__fixunssfsi+0x46>
 762:	e8 d0       	rcall	.+464    	; 0x934 <__fp_zero>
 764:	b1 e0       	ldi	r27, 0x01	; 1
 766:	08 95       	ret
 768:	e5 c0       	rjmp	.+458    	; 0x934 <__fp_zero>
 76a:	67 2f       	mov	r22, r23
 76c:	78 2f       	mov	r23, r24
 76e:	88 27       	eor	r24, r24
 770:	b8 5f       	subi	r27, 0xF8	; 248
 772:	39 f0       	breq	.+14     	; 0x782 <__fixunssfsi+0x46>
 774:	b9 3f       	cpi	r27, 0xF9	; 249
 776:	cc f3       	brlt	.-14     	; 0x76a <__fixunssfsi+0x2e>
 778:	86 95       	lsr	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b3 95       	inc	r27
 780:	d9 f7       	brne	.-10     	; 0x778 <__fixunssfsi+0x3c>
 782:	3e f4       	brtc	.+14     	; 0x792 <__fixunssfsi+0x56>
 784:	90 95       	com	r25
 786:	80 95       	com	r24
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	08 95       	ret

00000794 <__floatunsisf>:
 794:	e8 94       	clt
 796:	09 c0       	rjmp	.+18     	; 0x7aa <__floatsisf+0x12>

00000798 <__floatsisf>:
 798:	97 fb       	bst	r25, 7
 79a:	3e f4       	brtc	.+14     	; 0x7aa <__floatsisf+0x12>
 79c:	90 95       	com	r25
 79e:	80 95       	com	r24
 7a0:	70 95       	com	r23
 7a2:	61 95       	neg	r22
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	99 23       	and	r25, r25
 7ac:	a9 f0       	breq	.+42     	; 0x7d8 <__floatsisf+0x40>
 7ae:	f9 2f       	mov	r31, r25
 7b0:	96 e9       	ldi	r25, 0x96	; 150
 7b2:	bb 27       	eor	r27, r27
 7b4:	93 95       	inc	r25
 7b6:	f6 95       	lsr	r31
 7b8:	87 95       	ror	r24
 7ba:	77 95       	ror	r23
 7bc:	67 95       	ror	r22
 7be:	b7 95       	ror	r27
 7c0:	f1 11       	cpse	r31, r1
 7c2:	f8 cf       	rjmp	.-16     	; 0x7b4 <__floatsisf+0x1c>
 7c4:	fa f4       	brpl	.+62     	; 0x804 <__floatsisf+0x6c>
 7c6:	bb 0f       	add	r27, r27
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__floatsisf+0x36>
 7ca:	60 ff       	sbrs	r22, 0
 7cc:	1b c0       	rjmp	.+54     	; 0x804 <__floatsisf+0x6c>
 7ce:	6f 5f       	subi	r22, 0xFF	; 255
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <__floatsisf+0x6c>
 7d8:	88 23       	and	r24, r24
 7da:	11 f0       	breq	.+4      	; 0x7e0 <__floatsisf+0x48>
 7dc:	96 e9       	ldi	r25, 0x96	; 150
 7de:	11 c0       	rjmp	.+34     	; 0x802 <__floatsisf+0x6a>
 7e0:	77 23       	and	r23, r23
 7e2:	21 f0       	breq	.+8      	; 0x7ec <__floatsisf+0x54>
 7e4:	9e e8       	ldi	r25, 0x8E	; 142
 7e6:	87 2f       	mov	r24, r23
 7e8:	76 2f       	mov	r23, r22
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <__floatsisf+0x5e>
 7ec:	66 23       	and	r22, r22
 7ee:	71 f0       	breq	.+28     	; 0x80c <__floatsisf+0x74>
 7f0:	96 e8       	ldi	r25, 0x86	; 134
 7f2:	86 2f       	mov	r24, r22
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	2a f0       	brmi	.+10     	; 0x804 <__floatsisf+0x6c>
 7fa:	9a 95       	dec	r25
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	da f7       	brpl	.-10     	; 0x7fa <__floatsisf+0x62>
 804:	88 0f       	add	r24, r24
 806:	96 95       	lsr	r25
 808:	87 95       	ror	r24
 80a:	97 f9       	bld	r25, 7
 80c:	08 95       	ret

0000080e <__fp_cmp>:
 80e:	99 0f       	add	r25, r25
 810:	00 08       	sbc	r0, r0
 812:	55 0f       	add	r21, r21
 814:	aa 0b       	sbc	r26, r26
 816:	e0 e8       	ldi	r30, 0x80	; 128
 818:	fe ef       	ldi	r31, 0xFE	; 254
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	e8 07       	cpc	r30, r24
 820:	f9 07       	cpc	r31, r25
 822:	c0 f0       	brcs	.+48     	; 0x854 <__fp_cmp+0x46>
 824:	12 16       	cp	r1, r18
 826:	13 06       	cpc	r1, r19
 828:	e4 07       	cpc	r30, r20
 82a:	f5 07       	cpc	r31, r21
 82c:	98 f0       	brcs	.+38     	; 0x854 <__fp_cmp+0x46>
 82e:	62 1b       	sub	r22, r18
 830:	73 0b       	sbc	r23, r19
 832:	84 0b       	sbc	r24, r20
 834:	95 0b       	sbc	r25, r21
 836:	39 f4       	brne	.+14     	; 0x846 <__fp_cmp+0x38>
 838:	0a 26       	eor	r0, r26
 83a:	61 f0       	breq	.+24     	; 0x854 <__fp_cmp+0x46>
 83c:	23 2b       	or	r18, r19
 83e:	24 2b       	or	r18, r20
 840:	25 2b       	or	r18, r21
 842:	21 f4       	brne	.+8      	; 0x84c <__fp_cmp+0x3e>
 844:	08 95       	ret
 846:	0a 26       	eor	r0, r26
 848:	09 f4       	brne	.+2      	; 0x84c <__fp_cmp+0x3e>
 84a:	a1 40       	sbci	r26, 0x01	; 1
 84c:	a6 95       	lsr	r26
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	81 1d       	adc	r24, r1
 852:	81 1d       	adc	r24, r1
 854:	08 95       	ret

00000856 <__fp_inf>:
 856:	97 f9       	bld	r25, 7
 858:	9f 67       	ori	r25, 0x7F	; 127
 85a:	80 e8       	ldi	r24, 0x80	; 128
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	08 95       	ret

00000862 <__fp_nan>:
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	80 ec       	ldi	r24, 0xC0	; 192
 866:	08 95       	ret

00000868 <__fp_powser>:
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	1f 93       	push	r17
 86e:	0f 93       	push	r16
 870:	ff 92       	push	r15
 872:	ef 92       	push	r14
 874:	df 92       	push	r13
 876:	7b 01       	movw	r14, r22
 878:	8c 01       	movw	r16, r24
 87a:	68 94       	set
 87c:	05 c0       	rjmp	.+10     	; 0x888 <__fp_powser+0x20>
 87e:	da 2e       	mov	r13, r26
 880:	ef 01       	movw	r28, r30
 882:	76 d0       	rcall	.+236    	; 0x970 <__mulsf3x>
 884:	fe 01       	movw	r30, r28
 886:	e8 94       	clt
 888:	a5 91       	lpm	r26, Z+
 88a:	25 91       	lpm	r18, Z+
 88c:	35 91       	lpm	r19, Z+
 88e:	45 91       	lpm	r20, Z+
 890:	55 91       	lpm	r21, Z+
 892:	ae f3       	brts	.-22     	; 0x87e <__fp_powser+0x16>
 894:	ef 01       	movw	r28, r30
 896:	2c de       	rcall	.-936    	; 0x4f0 <__addsf3x>
 898:	fe 01       	movw	r30, r28
 89a:	97 01       	movw	r18, r14
 89c:	a8 01       	movw	r20, r16
 89e:	da 94       	dec	r13
 8a0:	79 f7       	brne	.-34     	; 0x880 <__fp_powser+0x18>
 8a2:	df 90       	pop	r13
 8a4:	ef 90       	pop	r14
 8a6:	ff 90       	pop	r15
 8a8:	0f 91       	pop	r16
 8aa:	1f 91       	pop	r17
 8ac:	cf 91       	pop	r28
 8ae:	df 91       	pop	r29
 8b0:	08 95       	ret

000008b2 <__fp_pscA>:
 8b2:	00 24       	eor	r0, r0
 8b4:	0a 94       	dec	r0
 8b6:	16 16       	cp	r1, r22
 8b8:	17 06       	cpc	r1, r23
 8ba:	18 06       	cpc	r1, r24
 8bc:	09 06       	cpc	r0, r25
 8be:	08 95       	ret

000008c0 <__fp_pscB>:
 8c0:	00 24       	eor	r0, r0
 8c2:	0a 94       	dec	r0
 8c4:	12 16       	cp	r1, r18
 8c6:	13 06       	cpc	r1, r19
 8c8:	14 06       	cpc	r1, r20
 8ca:	05 06       	cpc	r0, r21
 8cc:	08 95       	ret

000008ce <__fp_round>:
 8ce:	09 2e       	mov	r0, r25
 8d0:	03 94       	inc	r0
 8d2:	00 0c       	add	r0, r0
 8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0xc>
 8d6:	88 23       	and	r24, r24
 8d8:	52 f0       	brmi	.+20     	; 0x8ee <__fp_round+0x20>
 8da:	bb 0f       	add	r27, r27
 8dc:	40 f4       	brcc	.+16     	; 0x8ee <__fp_round+0x20>
 8de:	bf 2b       	or	r27, r31
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <__fp_round+0x18>
 8e2:	60 ff       	sbrs	r22, 0
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <__fp_round+0x20>
 8e6:	6f 5f       	subi	r22, 0xFF	; 255
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	08 95       	ret

000008f0 <__fp_split3>:
 8f0:	57 fd       	sbrc	r21, 7
 8f2:	90 58       	subi	r25, 0x80	; 128
 8f4:	44 0f       	add	r20, r20
 8f6:	55 1f       	adc	r21, r21
 8f8:	59 f0       	breq	.+22     	; 0x910 <__fp_splitA+0x10>
 8fa:	5f 3f       	cpi	r21, 0xFF	; 255
 8fc:	71 f0       	breq	.+28     	; 0x91a <__fp_splitA+0x1a>
 8fe:	47 95       	ror	r20

00000900 <__fp_splitA>:
 900:	88 0f       	add	r24, r24
 902:	97 fb       	bst	r25, 7
 904:	99 1f       	adc	r25, r25
 906:	61 f0       	breq	.+24     	; 0x920 <__fp_splitA+0x20>
 908:	9f 3f       	cpi	r25, 0xFF	; 255
 90a:	79 f0       	breq	.+30     	; 0x92a <__fp_splitA+0x2a>
 90c:	87 95       	ror	r24
 90e:	08 95       	ret
 910:	12 16       	cp	r1, r18
 912:	13 06       	cpc	r1, r19
 914:	14 06       	cpc	r1, r20
 916:	55 1f       	adc	r21, r21
 918:	f2 cf       	rjmp	.-28     	; 0x8fe <__fp_split3+0xe>
 91a:	46 95       	lsr	r20
 91c:	f1 df       	rcall	.-30     	; 0x900 <__fp_splitA>
 91e:	08 c0       	rjmp	.+16     	; 0x930 <__fp_splitA+0x30>
 920:	16 16       	cp	r1, r22
 922:	17 06       	cpc	r1, r23
 924:	18 06       	cpc	r1, r24
 926:	99 1f       	adc	r25, r25
 928:	f1 cf       	rjmp	.-30     	; 0x90c <__fp_splitA+0xc>
 92a:	86 95       	lsr	r24
 92c:	71 05       	cpc	r23, r1
 92e:	61 05       	cpc	r22, r1
 930:	08 94       	sec
 932:	08 95       	ret

00000934 <__fp_zero>:
 934:	e8 94       	clt

00000936 <__fp_szero>:
 936:	bb 27       	eor	r27, r27
 938:	66 27       	eor	r22, r22
 93a:	77 27       	eor	r23, r23
 93c:	cb 01       	movw	r24, r22
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__gesf2>:
 942:	65 df       	rcall	.-310    	; 0x80e <__fp_cmp>
 944:	08 f4       	brcc	.+2      	; 0x948 <__gesf2+0x6>
 946:	8f ef       	ldi	r24, 0xFF	; 255
 948:	08 95       	ret

0000094a <inverse>:
 94a:	9b 01       	movw	r18, r22
 94c:	ac 01       	movw	r20, r24
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	9f e3       	ldi	r25, 0x3F	; 63
 956:	85 ce       	rjmp	.-758    	; 0x662 <__divsf3>

00000958 <__mulsf3>:
 958:	0b d0       	rcall	.+22     	; 0x970 <__mulsf3x>
 95a:	b9 cf       	rjmp	.-142    	; 0x8ce <__fp_round>
 95c:	aa df       	rcall	.-172    	; 0x8b2 <__fp_pscA>
 95e:	28 f0       	brcs	.+10     	; 0x96a <__mulsf3+0x12>
 960:	af df       	rcall	.-162    	; 0x8c0 <__fp_pscB>
 962:	18 f0       	brcs	.+6      	; 0x96a <__mulsf3+0x12>
 964:	95 23       	and	r25, r21
 966:	09 f0       	breq	.+2      	; 0x96a <__mulsf3+0x12>
 968:	76 cf       	rjmp	.-276    	; 0x856 <__fp_inf>
 96a:	7b cf       	rjmp	.-266    	; 0x862 <__fp_nan>
 96c:	11 24       	eor	r1, r1
 96e:	e3 cf       	rjmp	.-58     	; 0x936 <__fp_szero>

00000970 <__mulsf3x>:
 970:	bf df       	rcall	.-130    	; 0x8f0 <__fp_split3>
 972:	a0 f3       	brcs	.-24     	; 0x95c <__mulsf3+0x4>

00000974 <__mulsf3_pse>:
 974:	95 9f       	mul	r25, r21
 976:	d1 f3       	breq	.-12     	; 0x96c <__mulsf3+0x14>
 978:	95 0f       	add	r25, r21
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	55 1f       	adc	r21, r21
 97e:	62 9f       	mul	r22, r18
 980:	f0 01       	movw	r30, r0
 982:	72 9f       	mul	r23, r18
 984:	bb 27       	eor	r27, r27
 986:	f0 0d       	add	r31, r0
 988:	b1 1d       	adc	r27, r1
 98a:	63 9f       	mul	r22, r19
 98c:	aa 27       	eor	r26, r26
 98e:	f0 0d       	add	r31, r0
 990:	b1 1d       	adc	r27, r1
 992:	aa 1f       	adc	r26, r26
 994:	64 9f       	mul	r22, r20
 996:	66 27       	eor	r22, r22
 998:	b0 0d       	add	r27, r0
 99a:	a1 1d       	adc	r26, r1
 99c:	66 1f       	adc	r22, r22
 99e:	82 9f       	mul	r24, r18
 9a0:	22 27       	eor	r18, r18
 9a2:	b0 0d       	add	r27, r0
 9a4:	a1 1d       	adc	r26, r1
 9a6:	62 1f       	adc	r22, r18
 9a8:	73 9f       	mul	r23, r19
 9aa:	b0 0d       	add	r27, r0
 9ac:	a1 1d       	adc	r26, r1
 9ae:	62 1f       	adc	r22, r18
 9b0:	83 9f       	mul	r24, r19
 9b2:	a0 0d       	add	r26, r0
 9b4:	61 1d       	adc	r22, r1
 9b6:	22 1f       	adc	r18, r18
 9b8:	74 9f       	mul	r23, r20
 9ba:	33 27       	eor	r19, r19
 9bc:	a0 0d       	add	r26, r0
 9be:	61 1d       	adc	r22, r1
 9c0:	23 1f       	adc	r18, r19
 9c2:	84 9f       	mul	r24, r20
 9c4:	60 0d       	add	r22, r0
 9c6:	21 1d       	adc	r18, r1
 9c8:	82 2f       	mov	r24, r18
 9ca:	76 2f       	mov	r23, r22
 9cc:	6a 2f       	mov	r22, r26
 9ce:	11 24       	eor	r1, r1
 9d0:	9f 57       	subi	r25, 0x7F	; 127
 9d2:	50 40       	sbci	r21, 0x00	; 0
 9d4:	8a f0       	brmi	.+34     	; 0x9f8 <__mulsf3_pse+0x84>
 9d6:	e1 f0       	breq	.+56     	; 0xa10 <__mulsf3_pse+0x9c>
 9d8:	88 23       	and	r24, r24
 9da:	4a f0       	brmi	.+18     	; 0x9ee <__mulsf3_pse+0x7a>
 9dc:	ee 0f       	add	r30, r30
 9de:	ff 1f       	adc	r31, r31
 9e0:	bb 1f       	adc	r27, r27
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	50 40       	sbci	r21, 0x00	; 0
 9ec:	a9 f7       	brne	.-22     	; 0x9d8 <__mulsf3_pse+0x64>
 9ee:	9e 3f       	cpi	r25, 0xFE	; 254
 9f0:	51 05       	cpc	r21, r1
 9f2:	70 f0       	brcs	.+28     	; 0xa10 <__mulsf3_pse+0x9c>
 9f4:	30 cf       	rjmp	.-416    	; 0x856 <__fp_inf>
 9f6:	9f cf       	rjmp	.-194    	; 0x936 <__fp_szero>
 9f8:	5f 3f       	cpi	r21, 0xFF	; 255
 9fa:	ec f3       	brlt	.-6      	; 0x9f6 <__mulsf3_pse+0x82>
 9fc:	98 3e       	cpi	r25, 0xE8	; 232
 9fe:	dc f3       	brlt	.-10     	; 0x9f6 <__mulsf3_pse+0x82>
 a00:	86 95       	lsr	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	e7 95       	ror	r30
 a0c:	9f 5f       	subi	r25, 0xFF	; 255
 a0e:	c1 f7       	brne	.-16     	; 0xa00 <__mulsf3_pse+0x8c>
 a10:	fe 2b       	or	r31, r30
 a12:	88 0f       	add	r24, r24
 a14:	91 1d       	adc	r25, r1
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <square>:
 a1e:	9b 01       	movw	r18, r22
 a20:	ac 01       	movw	r20, r24
 a22:	9a cf       	rjmp	.-204    	; 0x958 <__mulsf3>

00000a24 <__udivmodsi4>:
 a24:	a1 e2       	ldi	r26, 0x21	; 33
 a26:	1a 2e       	mov	r1, r26
 a28:	aa 1b       	sub	r26, r26
 a2a:	bb 1b       	sub	r27, r27
 a2c:	fd 01       	movw	r30, r26
 a2e:	0d c0       	rjmp	.+26     	; 0xa4a <__udivmodsi4_ep>

00000a30 <__udivmodsi4_loop>:
 a30:	aa 1f       	adc	r26, r26
 a32:	bb 1f       	adc	r27, r27
 a34:	ee 1f       	adc	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	a2 17       	cp	r26, r18
 a3a:	b3 07       	cpc	r27, r19
 a3c:	e4 07       	cpc	r30, r20
 a3e:	f5 07       	cpc	r31, r21
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__udivmodsi4_ep>
 a42:	a2 1b       	sub	r26, r18
 a44:	b3 0b       	sbc	r27, r19
 a46:	e4 0b       	sbc	r30, r20
 a48:	f5 0b       	sbc	r31, r21

00000a4a <__udivmodsi4_ep>:
 a4a:	66 1f       	adc	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	88 1f       	adc	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	1a 94       	dec	r1
 a54:	69 f7       	brne	.-38     	; 0xa30 <__udivmodsi4_loop>
 a56:	60 95       	com	r22
 a58:	70 95       	com	r23
 a5a:	80 95       	com	r24
 a5c:	90 95       	com	r25
 a5e:	9b 01       	movw	r18, r22
 a60:	ac 01       	movw	r20, r24
 a62:	bd 01       	movw	r22, r26
 a64:	cf 01       	movw	r24, r30
 a66:	08 95       	ret

00000a68 <__itoa_ncheck>:
 a68:	bb 27       	eor	r27, r27
 a6a:	4a 30       	cpi	r20, 0x0A	; 10
 a6c:	31 f4       	brne	.+12     	; 0xa7a <__itoa_ncheck+0x12>
 a6e:	99 23       	and	r25, r25
 a70:	22 f4       	brpl	.+8      	; 0xa7a <__itoa_ncheck+0x12>
 a72:	bd e2       	ldi	r27, 0x2D	; 45
 a74:	90 95       	com	r25
 a76:	81 95       	neg	r24
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <__utoa_common>

00000a7c <__utoa_ncheck>:
 a7c:	bb 27       	eor	r27, r27

00000a7e <__utoa_common>:
 a7e:	fb 01       	movw	r30, r22
 a80:	55 27       	eor	r21, r21
 a82:	aa 27       	eor	r26, r26
 a84:	88 0f       	add	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	aa 1f       	adc	r26, r26
 a8a:	a4 17       	cp	r26, r20
 a8c:	10 f0       	brcs	.+4      	; 0xa92 <__utoa_common+0x14>
 a8e:	a4 1b       	sub	r26, r20
 a90:	83 95       	inc	r24
 a92:	50 51       	subi	r21, 0x10	; 16
 a94:	b9 f7       	brne	.-18     	; 0xa84 <__utoa_common+0x6>
 a96:	a0 5d       	subi	r26, 0xD0	; 208
 a98:	aa 33       	cpi	r26, 0x3A	; 58
 a9a:	08 f0       	brcs	.+2      	; 0xa9e <__utoa_common+0x20>
 a9c:	a9 5d       	subi	r26, 0xD9	; 217
 a9e:	a1 93       	st	Z+, r26
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	79 f7       	brne	.-34     	; 0xa82 <__utoa_common+0x4>
 aa4:	b1 11       	cpse	r27, r1
 aa6:	b1 93       	st	Z+, r27
 aa8:	11 92       	st	Z+, r1
 aaa:	cb 01       	movw	r24, r22
 aac:	00 c0       	rjmp	.+0      	; 0xaae <strrev>

00000aae <strrev>:
 aae:	dc 01       	movw	r26, r24
 ab0:	fc 01       	movw	r30, r24
 ab2:	67 2f       	mov	r22, r23
 ab4:	71 91       	ld	r23, Z+
 ab6:	77 23       	and	r23, r23
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <strrev+0x4>
 aba:	32 97       	sbiw	r30, 0x02	; 2
 abc:	04 c0       	rjmp	.+8      	; 0xac6 <strrev+0x18>
 abe:	7c 91       	ld	r23, X
 ac0:	6d 93       	st	X+, r22
 ac2:	70 83       	st	Z, r23
 ac4:	62 91       	ld	r22, -Z
 ac6:	ae 17       	cp	r26, r30
 ac8:	bf 07       	cpc	r27, r31
 aca:	c8 f3       	brcs	.-14     	; 0xabe <strrev+0x10>
 acc:	08 95       	ret

00000ace <_exit>:
 ace:	f8 94       	cli

00000ad0 <__stop_program>:
 ad0:	ff cf       	rjmp	.-2      	; 0xad0 <__stop_program>
