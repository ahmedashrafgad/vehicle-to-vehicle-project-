
testRSSI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00002eea  00002f7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002eea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000536  008002b0  008002b0  0000312e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000312e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000318c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022bb  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc1  00000000  00000000  0000566f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a6  00000000  00000000  00006630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00007ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000966  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ff  00000000  00000000  000089c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00009bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      10:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      14:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      18:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      20:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      24:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_9>
      28:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      30:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      38:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_14>
      3c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      40:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_16>
      44:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      48:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_18>
      4c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      50:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      54:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      58:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      5c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      60:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      64:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <split+0xb0>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 07       	cpc	r19, r31
      d2:	63 42       	sbci	r22, 0x23	; 35
      d4:	36 b7       	in	r19, 0x36	; 54
      d6:	9b d8       	rcall	.-3786   	; 0xfffff20e <__eeprom_end+0xff7ef20e>
      d8:	a7 1a       	sub	r10, r23
      da:	39 68       	ori	r19, 0x89	; 137
      dc:	56 18       	sub	r5, r6
      de:	ae ba       	out	0x1e, r10	; 30
      e0:	ab 55       	subi	r26, 0x5B	; 91
      e2:	8c 1d       	adc	r24, r12
      e4:	3c b7       	in	r19, 0x3c	; 60
      e6:	cc 57       	subi	r28, 0x7C	; 124
      e8:	63 bd       	out	0x23, r22	; 35
      ea:	6d ed       	ldi	r22, 0xDD	; 221
      ec:	fd 75       	andi	r31, 0x5D	; 93
      ee:	3e f6       	brtc	.-114    	; 0x7e <__SREG__+0x3f>
      f0:	17 72       	andi	r17, 0x27	; 39
      f2:	31 bf       	out	0x31, r19	; 49
      f4:	00 00       	nop
      f6:	00 80       	ld	r0, Z
      f8:	3f 08       	sbc	r3, r15
      fa:	00 00       	nop
      fc:	00 be       	out	0x30, r0	; 48
      fe:	92 24       	eor	r9, r2
     100:	49 12       	cpse	r4, r25
     102:	3e ab       	std	Y+54, r19	; 0x36
     104:	aa aa       	std	Y+50, r10	; 0x32
     106:	2a be       	out	0x3a, r2	; 58
     108:	cd cc       	rjmp	.-1638   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     10a:	cc 4c       	sbci	r28, 0xCC	; 204
     10c:	3e 00       	.word	0x003e	; ????
     10e:	00 00       	nop
     110:	80 be       	out	0x30, r8	; 48
     112:	ab aa       	std	Y+51, r10	; 0x33
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	3e 00       	.word	0x003e	; ????
     118:	00 00       	nop
     11a:	00 bf       	out	0x30, r16	; 48
     11c:	00 00       	nop
     11e:	00 80       	ld	r0, Z
     120:	3f 00       	.word	0x003f	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	08 41       	sbci	r16, 0x18	; 24
     128:	78 d3       	rcall	.+1776   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
     12a:	bb 43       	sbci	r27, 0x3B	; 59
     12c:	87 d1       	rcall	.+782    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     12e:	13 3d       	cpi	r17, 0xD3	; 211
     130:	19 0e       	add	r1, r25
     132:	3c c3       	rjmp	.+1656   	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     134:	bd 42       	sbci	r27, 0x2D	; 45
     136:	82 ad       	ldd	r24, Z+58	; 0x3a
     138:	2b 3e       	cpi	r18, 0xEB	; 235
     13a:	68 ec       	ldi	r22, 0xC8	; 200
     13c:	82 76       	andi	r24, 0x62	; 98
     13e:	be d9       	rcall	.-3204   	; 0xfffff4bc <__eeprom_end+0xff7ef4bc>
     140:	8f e1       	ldi	r24, 0x1F	; 31
     142:	a9 3e       	cpi	r26, 0xE9	; 233
     144:	4c 80       	ldd	r4, Y+4	; 0x04
     146:	ef ff       	.word	0xffef	; ????
     148:	be 01       	movw	r22, r28
     14a:	c4 ff       	sbrs	r28, 4
     14c:	7f 3f       	cpi	r23, 0xFF	; 255
     14e:	00 00       	nop
     150:	00 00       	nop
	...

00000154 <__trampolines_end>:
     154:	63 64       	ori	r22, 0x43	; 67
     156:	69 6e       	ori	r22, 0xE9	; 233
     158:	6f 70       	andi	r22, 0x0F	; 15
     15a:	73 75       	andi	r23, 0x53	; 83
     15c:	78 58       	subi	r23, 0x88	; 136
     15e:	5b 00       	.word	0x005b	; ????

00000160 <__c.2498>:
     160:	0d 0a 53 74 61 72 74 69 6e 67 20 6f 66 20 61 70     ..Starting of ap
     170:	70 6c 69 63 61 74 69 6f 6e 0d 0a 00                 plication...

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d8 e0       	ldi	r29, 0x08	; 8
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	12 e0       	ldi	r17, 0x02	; 2
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	ea ee       	ldi	r30, 0xEA	; 234
     190:	fe e2       	ldi	r31, 0x2E	; 46
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x10>
     194:	05 90       	lpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a0 3b       	cpi	r26, 0xB0	; 176
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0xc>

0000019e <__do_clear_bss>:
     19e:	27 e0       	ldi	r18, 0x07	; 7
     1a0:	a0 eb       	ldi	r26, 0xB0	; 176
     1a2:	b2 e0       	ldi	r27, 0x02	; 2
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	a6 3e       	cpi	r26, 0xE6	; 230
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
     1ae:	0e 94 c2 07 	call	0xf84	; 0xf84 <main>
     1b2:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <_exit>

000001b6 <__bad_interrupt>:
     1b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ba <ADC_Read>:
	ADCSRA = (1<<ADEN); 
}
unsigned short ADC_Read(void){
	unsigned short adcValue = 0;
	/* Start Conversion */
	ADCSRA |= (1<<ADSC);
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	80 64       	ori	r24, 0x40	; 64
     1c2:	80 83       	st	Z, r24
	/* Wait Conv. to complete */
	while(ADCSRA & (1<<ADSC));
     1c4:	80 81       	ld	r24, Z
     1c6:	86 fd       	sbrc	r24, 6
     1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <ADC_Read+0xa>
	/* Read Value */
	adcValue = ADCL + ADCH*256;
     1ca:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcValue;
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	98 2f       	mov	r25, r24
     1d6:	88 27       	eor	r24, r24
}
     1d8:	82 0f       	add	r24, r18
     1da:	91 1d       	adc	r25, r1
     1dc:	08 95       	ret

000001de <adc_readADC0>:

unsigned short adc_readADC0(void)
{
	ADCSRA &=~ (1<<ADEN);
     1de:	ea e7       	ldi	r30, 0x7A	; 122
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8f 77       	andi	r24, 0x7F	; 127
     1e6:	80 83       	st	Z, r24
	ADMUX = 0x40 ;
     1e8:	80 e4       	ldi	r24, 0x40	; 64
     1ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN);
     1ee:	80 81       	ld	r24, Z
     1f0:	80 68       	ori	r24, 0x80	; 128
     1f2:	80 83       	st	Z, r24
	//ADC_Select(0);
	return ADC_Read();
     1f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ADC_Read>
}
     1f8:	08 95       	ret

000001fa <adc_readADC1>:
unsigned short adc_readADC1(void)
{
	ADCSRA &=~ (1<<ADEN);
     1fa:	ea e7       	ldi	r30, 0x7A	; 122
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	8f 77       	andi	r24, 0x7F	; 127
     202:	80 83       	st	Z, r24
	ADMUX = 0x41 ;
     204:	81 e4       	ldi	r24, 0x41	; 65
     206:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN);
     20a:	80 81       	ld	r24, Z
     20c:	80 68       	ori	r24, 0x80	; 128
     20e:	80 83       	st	Z, r24
	//ADC_Select(1);
	return ADC_Read();
     210:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ADC_Read>
     214:	08 95       	ret

00000216 <CarControlInit>:
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     216:	87 b1       	in	r24, 0x07	; 7
     218:	8c 63       	ori	r24, 0x3C	; 60
     21a:	87 b9       	out	0x07, r24	; 7
     21c:	88 b1       	in	r24, 0x08	; 8
     21e:	8c 63       	ori	r24, 0x3C	; 60
     220:	88 b9       	out	0x08, r24	; 8
     222:	0e 94 ba 09 	call	0x1374	; 0x1374 <US_Init>
     226:	08 95       	ret

00000228 <startDelayTimer>:
     228:	bc 01       	movw	r22, r24
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 04 0c 	call	0x1808	; 0x1808 <__floatunsisf>
     232:	27 ee       	ldi	r18, 0xE7	; 231
     234:	3b ef       	ldi	r19, 0xFB	; 251
     236:	49 e7       	ldi	r20, 0x79	; 121
     238:	50 e4       	ldi	r21, 0x40	; 64
     23a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
     23e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fixunssfsi>
     242:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <overflowstimes>
     246:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <overflowstimes+0x1>
     24a:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <overflowstimes+0x2>
     24e:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <overflowstimes+0x3>
     252:	e1 eb       	ldi	r30, 0xB1	; 177
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	82 60       	ori	r24, 0x02	; 2
     25a:	80 83       	st	Z, r24
     25c:	e0 e7       	ldi	r30, 0x70	; 112
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 83       	st	Z, r24
     266:	78 94       	sei
     268:	08 95       	ret

0000026a <moveCar>:
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	a9 f0       	breq	.+42     	; 0x298 <moveCar+0x2e>
     26e:	28 f4       	brcc	.+10     	; 0x27a <moveCar+0x10>
     270:	88 23       	and	r24, r24
     272:	71 f1       	breq	.+92     	; 0x2d0 <moveCar+0x66>
     274:	81 30       	cpi	r24, 0x01	; 1
     276:	31 f0       	breq	.+12     	; 0x284 <moveCar+0x1a>
     278:	08 95       	ret
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	b9 f0       	breq	.+46     	; 0x2ac <moveCar+0x42>
     27e:	84 30       	cpi	r24, 0x04	; 4
     280:	f1 f0       	breq	.+60     	; 0x2be <moveCar+0x54>
     282:	08 95       	ret
     284:	45 98       	cbi	0x08, 5	; 8
     286:	43 98       	cbi	0x08, 3	; 8
     288:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     28c:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <sp>
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 14 01 	call	0x228	; 0x228 <startDelayTimer>
     296:	08 95       	ret
     298:	44 98       	cbi	0x08, 4	; 8
     29a:	42 98       	cbi	0x08, 2	; 8
     29c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     2a0:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <sp>
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 14 01 	call	0x228	; 0x228 <startDelayTimer>
     2aa:	08 95       	ret
     2ac:	43 98       	cbi	0x08, 3	; 8
     2ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     2b2:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <sp>
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 14 01 	call	0x228	; 0x228 <startDelayTimer>
     2bc:	08 95       	ret
     2be:	45 98       	cbi	0x08, 5	; 8
     2c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     2c4:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <sp>
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 14 01 	call	0x228	; 0x228 <startDelayTimer>
     2ce:	08 95       	ret
     2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2d4:	81 11       	cpse	r24, r1
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <moveCar+0x84>
     2d8:	45 9a       	sbi	0x08, 5	; 8
     2da:	44 9a       	sbi	0x08, 4	; 8
     2dc:	43 9a       	sbi	0x08, 3	; 8
     2de:	42 9a       	sbi	0x08, 2	; 8
     2e0:	82 e3       	ldi	r24, 0x32	; 50
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 14 01 	call	0x228	; 0x228 <startDelayTimer>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2ee:	08 95       	ret

000002f0 <__vector_9>:
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	2f 93       	push	r18
     2fc:	3f 93       	push	r19
     2fe:	4f 93       	push	r20
     300:	5f 93       	push	r21
     302:	6f 93       	push	r22
     304:	7f 93       	push	r23
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	af 93       	push	r26
     30c:	bf 93       	push	r27
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
     312:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <overflowstimes>
     316:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <overflowstimes+0x1>
     31a:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <overflowstimes+0x2>
     31e:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <overflowstimes+0x3>
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	a1 09       	sbc	r26, r1
     326:	b1 09       	sbc	r27, r1
     328:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <overflowstimes>
     32c:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <overflowstimes+0x1>
     330:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <overflowstimes+0x2>
     334:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <overflowstimes+0x3>
     338:	89 2b       	or	r24, r25
     33a:	8a 2b       	or	r24, r26
     33c:	8b 2b       	or	r24, r27
     33e:	29 f4       	brne	.+10     	; 0x34a <__vector_9+0x5a>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
     346:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	bf 91       	pop	r27
     350:	af 91       	pop	r26
     352:	9f 91       	pop	r25
     354:	8f 91       	pop	r24
     356:	7f 91       	pop	r23
     358:	6f 91       	pop	r22
     35a:	5f 91       	pop	r21
     35c:	4f 91       	pop	r20
     35e:	3f 91       	pop	r19
     360:	2f 91       	pop	r18
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <setDirection>:
		
	}
}

void setDirection(void)
{   unsigned char distance = US_getDistance() ;
     36c:	bf 92       	push	r11
     36e:	cf 92       	push	r12
     370:	df 92       	push	r13
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	0e 94 cc 09 	call	0x1398	; 0x1398 <US_getDistance>
     382:	ec 01       	movw	r28, r24
	
	
	   usart0_puts("\n") ;
     384:	8c e6       	ldi	r24, 0x6C	; 108
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	   snprintf(buffer,50,"%d",distance);
     38c:	ce 01       	movw	r24, r28
     38e:	99 27       	eor	r25, r25
     390:	9f 93       	push	r25
     392:	8f 93       	push	r24
     394:	89 e0       	ldi	r24, 0x09	; 9
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	9f 93       	push	r25
     39a:	8f 93       	push	r24
     39c:	1f 92       	push	r1
     39e:	82 e3       	ldi	r24, 0x32	; 50
     3a0:	8f 93       	push	r24
     3a2:	86 e5       	ldi	r24, 0x56	; 86
     3a4:	93 e0       	ldi	r25, 0x03	; 3
     3a6:	9f 93       	push	r25
     3a8:	8f 93       	push	r24
     3aa:	0e 94 26 11 	call	0x224c	; 0x224c <snprintf>
	   usart0_puts(buffer) ;
     3ae:	86 e5       	ldi	r24, 0x56	; 86
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	   usart0_puts("\n") ;
     3b6:	8c e6       	ldi	r24, 0x6C	; 108
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	   
	if (distance <= 15)
     3be:	2d b7       	in	r18, 0x3d	; 61
     3c0:	3e b7       	in	r19, 0x3e	; 62
     3c2:	28 5f       	subi	r18, 0xF8	; 248
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	3e bf       	out	0x3e, r19	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	2d bf       	out	0x3d, r18	; 61
     3d0:	c0 31       	cpi	r28, 0x10	; 16
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <setDirection+0x6a>
     3d4:	e1 c0       	rjmp	.+450    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
	{
		usart0_puts("in IF \n") ;
     3d6:	8c e0       	ldi	r24, 0x0C	; 12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
		moveCar(stop) ;
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	unsigned int xValue  = 0, yValue = 0 ;

	yValue =  adc_readADC1();
     3e4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <adc_readADC1>
     3e8:	ec 01       	movw	r28, r24
	xValue = adc_readADC0();
     3ea:	0e 94 ef 00 	call	0x1de	; 0x1de <adc_readADC0>
	
		
		if (xValue > 614 && xValue <= 716)
     3ee:	9c 01       	movw	r18, r24
     3f0:	27 56       	subi	r18, 0x67	; 103
     3f2:	32 40       	sbci	r19, 0x02	; 2
     3f4:	26 36       	cpi	r18, 0x66	; 102
     3f6:	31 05       	cpc	r19, r1
     3f8:	58 f4       	brcc	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     3fa:	8e e1       	ldi	r24, 0x1E	; 30
     3fc:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	
		
		if (xValue > 614 && xValue <= 716)
		{
			speed_car(slow);
			moveCar(left);
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("sl\n");
     406:	84 e1       	ldi	r24, 0x14	; 20
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     40e:	7b c0       	rjmp	.+246    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if (xValue > 716 && xValue <= 819)
     410:	9c 01       	movw	r18, r24
     412:	2d 5c       	subi	r18, 0xCD	; 205
     414:	32 40       	sbci	r19, 0x02	; 2
     416:	27 36       	cpi	r18, 0x67	; 103
     418:	31 05       	cpc	r19, r1
     41a:	58 f4       	brcc	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     41c:	8c e3       	ldi	r24, 0x3C	; 60
     41e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("sl\n");
		}
		else if (xValue > 716 && xValue <= 819)
		{
			speed_car(moderate);
			moveCar(left);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("ml\n");
     428:	88 e1       	ldi	r24, 0x18	; 24
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     430:	6a c0       	rjmp	.+212    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if (xValue >819 && xValue <= 921)
     432:	9c 01       	movw	r18, r24
     434:	24 53       	subi	r18, 0x34	; 52
     436:	33 40       	sbci	r19, 0x03	; 3
     438:	26 36       	cpi	r18, 0x66	; 102
     43a:	31 05       	cpc	r19, r1
     43c:	58 f4       	brcc	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     43e:	80 e5       	ldi	r24, 0x50	; 80
     440:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("ml\n");
		}
		else if (xValue >819 && xValue <= 921)
		{
			speed_car(fast);
			moveCar(left);
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("fl\n");
     44a:	8c e1       	ldi	r24, 0x1C	; 28
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     452:	59 c0       	rjmp	.+178    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if (xValue > 921 && xValue <= 1023)
     454:	9c 01       	movw	r18, r24
     456:	2a 59       	subi	r18, 0x9A	; 154
     458:	33 40       	sbci	r19, 0x03	; 3
     45a:	26 36       	cpi	r18, 0x66	; 102
     45c:	31 05       	cpc	r19, r1
     45e:	58 f4       	brcc	.+22     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     460:	84 e6       	ldi	r24, 0x64	; 100
     462:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("fl\n");
		}
		else if (xValue > 921 && xValue <= 1023)
		{
			speed_car(veryfast);
			moveCar(left);
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("vl\n");
     46c:	80 e2       	ldi	r24, 0x20	; 32
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     474:	48 c0       	rjmp	.+144    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if ( xValue >= 307 && xValue < 409 )
     476:	9c 01       	movw	r18, r24
     478:	23 53       	subi	r18, 0x33	; 51
     47a:	31 40       	sbci	r19, 0x01	; 1
     47c:	26 36       	cpi	r18, 0x66	; 102
     47e:	31 05       	cpc	r19, r1
     480:	58 f4       	brcc	.+22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     482:	8e e1       	ldi	r24, 0x1E	; 30
     484:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("vl\n");
		}
		else if ( xValue >= 307 && xValue < 409 )
		{
			speed_car(slow);
			moveCar(right);
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("sr\n");
     48e:	84 e2       	ldi	r24, 0x24	; 36
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     496:	37 c0       	rjmp	.+110    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if (xValue >= 204  && xValue < 307)
     498:	9c 01       	movw	r18, r24
     49a:	2c 5c       	subi	r18, 0xCC	; 204
     49c:	31 09       	sbc	r19, r1
     49e:	27 36       	cpi	r18, 0x67	; 103
     4a0:	31 05       	cpc	r19, r1
     4a2:	58 f4       	brcc	.+22     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     4a4:	8c e3       	ldi	r24, 0x3C	; 60
     4a6:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("sr\n");
		}
		else if (xValue >= 204  && xValue < 307)
		{
			speed_car(moderate);
			moveCar(right);
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("mr\n");
     4b0:	88 e2       	ldi	r24, 0x28	; 40
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     4b8:	26 c0       	rjmp	.+76     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if ( xValue >= 102 && xValue < 204)
     4ba:	9c 01       	movw	r18, r24
     4bc:	26 56       	subi	r18, 0x66	; 102
     4be:	31 09       	sbc	r19, r1
     4c0:	26 36       	cpi	r18, 0x66	; 102
     4c2:	31 05       	cpc	r19, r1
     4c4:	58 f4       	brcc	.+22     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     4c6:	80 e5       	ldi	r24, 0x50	; 80
     4c8:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("mr\n");
		}
		else if ( xValue >= 102 && xValue < 204)
		{
			speed_car(fast);
			moveCar(right);
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("fr\n");
     4d2:	8c e2       	ldi	r24, 0x2C	; 44
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     4da:	15 c0       	rjmp	.+42     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else if ( xValue >= 0 && xValue < 102)
     4dc:	86 36       	cpi	r24, 0x66	; 102
     4de:	91 05       	cpc	r25, r1
     4e0:	58 f4       	brcc	.+22     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     4e2:	84 e6       	ldi	r24, 0x64	; 100
     4e4:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("fr\n");
		}
		else if ( xValue >= 0 && xValue < 102)
		{
			speed_car(veryfast);
			moveCar(right);
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("vr\n");
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		}
		else
		{
			moveCar(stop);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("s\n");
     4fe:	84 e3       	ldi	r24, 0x34	; 52
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
		}
		
		 if ( yValue >= 307 && yValue < 409 )
     506:	ce 01       	movw	r24, r28
     508:	83 53       	subi	r24, 0x33	; 51
     50a:	91 40       	sbci	r25, 0x01	; 1
     50c:	86 36       	cpi	r24, 0x66	; 102
     50e:	91 05       	cpc	r25, r1
     510:	58 f4       	brcc	.+22     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     512:	8e e1       	ldi	r24, 0x1E	; 30
     514:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		}
		
		 if ( yValue >= 307 && yValue < 409 )
		{
			speed_car(slow);
			moveCar(backword);
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("sb\n");
     51e:	87 e3       	ldi	r24, 0x37	; 55
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     526:	94 c1       	rjmp	.+808    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
		}
		else if (yValue >= 204 && yValue < 307)
     528:	ce 01       	movw	r24, r28
     52a:	8c 5c       	subi	r24, 0xCC	; 204
     52c:	91 09       	sbc	r25, r1
     52e:	87 36       	cpi	r24, 0x67	; 103
     530:	91 05       	cpc	r25, r1
     532:	58 f4       	brcc	.+22     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     534:	8c e3       	ldi	r24, 0x3C	; 60
     536:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("sb\n");
		}
		else if (yValue >= 204 && yValue < 307)
		{
			speed_car(moderate);
			moveCar(backword);
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("mb\n");
     540:	8b e3       	ldi	r24, 0x3B	; 59
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     548:	83 c1       	rjmp	.+774    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
		}
		else if ( yValue >= 102 && yValue < 204)
     54a:	ce 01       	movw	r24, r28
     54c:	86 56       	subi	r24, 0x66	; 102
     54e:	91 09       	sbc	r25, r1
     550:	86 36       	cpi	r24, 0x66	; 102
     552:	91 05       	cpc	r25, r1
     554:	58 f4       	brcc	.+22     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     556:	80 e5       	ldi	r24, 0x50	; 80
     558:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("mb\n");
		}
		else if ( yValue >= 102 && yValue < 204)
		{
			speed_car(fast);
			moveCar(backword);
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("fb\n");
     562:	8f e3       	ldi	r24, 0x3F	; 63
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     56a:	72 c1       	rjmp	.+740    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
		}
		else if ( yValue >= 0 && yValue < 102)
     56c:	c6 36       	cpi	r28, 0x66	; 102
     56e:	d1 05       	cpc	r29, r1
     570:	58 f4       	brcc	.+22     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     572:	84 e6       	ldi	r24, 0x64	; 100
     574:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
			usart0_puts("fb\n");
		}
		else if ( yValue >= 0 && yValue < 102)
		{
			speed_car(veryfast);
			moveCar(backword);
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("vb\n");
     57e:	83 e4       	ldi	r24, 0x43	; 67
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     586:	64 c1       	rjmp	.+712    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
		}
		else
		{
			moveCar(stop);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
			usart0_puts("s\n");
     58e:	84 e3       	ldi	r24, 0x34	; 52
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     596:	5c c1       	rjmp	.+696    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
			
		}
	}
	else
	{
		usart0_puts("\nin else \n") ;
     598:	87 e4       	ldi	r24, 0x47	; 71
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	unsigned int xValue  = 0, yValue = 0 ;

	yValue =  adc_readADC1();
     5a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <adc_readADC1>
     5a4:	ec 01       	movw	r28, r24
	xValue = adc_readADC0();
     5a6:	0e 94 ef 00 	call	0x1de	; 0x1de <adc_readADC0>
     5aa:	8c 01       	movw	r16, r24
	snprintf(buffer,50,"%d",xValue);
     5ac:	1f 93       	push	r17
     5ae:	8f 93       	push	r24
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f9 e0       	ldi	r31, 0x09	; 9
     5b4:	cf 2e       	mov	r12, r31
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	df 2e       	mov	r13, r31
     5ba:	f0 2d       	mov	r31, r0
     5bc:	df 92       	push	r13
     5be:	cf 92       	push	r12
     5c0:	1f 92       	push	r1
     5c2:	0f 2e       	mov	r0, r31
     5c4:	f2 e3       	ldi	r31, 0x32	; 50
     5c6:	bf 2e       	mov	r11, r31
     5c8:	f0 2d       	mov	r31, r0
     5ca:	bf 92       	push	r11
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f6 e5       	ldi	r31, 0x56	; 86
     5d0:	ef 2e       	mov	r14, r31
     5d2:	f3 e0       	ldi	r31, 0x03	; 3
     5d4:	ff 2e       	mov	r15, r31
     5d6:	f0 2d       	mov	r31, r0
     5d8:	ff 92       	push	r15
     5da:	ef 92       	push	r14
     5dc:	0e 94 26 11 	call	0x224c	; 0x224c <snprintf>
	usart0_puts(buffer);
     5e0:	c7 01       	movw	r24, r14
     5e2:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	usart0_puts(" y= ");
     5e6:	82 e5       	ldi	r24, 0x52	; 82
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	snprintf(buffer,50,"%d",yValue);
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	df 92       	push	r13
     5f4:	cf 92       	push	r12
     5f6:	1f 92       	push	r1
     5f8:	bf 92       	push	r11
     5fa:	ff 92       	push	r15
     5fc:	ef 92       	push	r14
     5fe:	0e 94 26 11 	call	0x224c	; 0x224c <snprintf>
	usart0_puts(buffer);
     602:	c7 01       	movw	r24, r14
     604:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	usart0_putc('\n');
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	0e 94 89 0a 	call	0x1512	; 0x1512 <usart0_putc>
	
	if (xValue > 614 && xValue <= 716)
     60e:	c8 01       	movw	r24, r16
     610:	87 56       	subi	r24, 0x67	; 103
     612:	92 40       	sbci	r25, 0x02	; 2
     614:	2d b7       	in	r18, 0x3d	; 61
     616:	3e b7       	in	r19, 0x3e	; 62
     618:	20 5f       	subi	r18, 0xF0	; 240
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	3e bf       	out	0x3e, r19	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	2d bf       	out	0x3d, r18	; 61
     626:	86 36       	cpi	r24, 0x66	; 102
     628:	91 05       	cpc	r25, r1
     62a:	58 f4       	brcc	.+22     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     62c:	8e e1       	ldi	r24, 0x1E	; 30
     62e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_putc('\n');
	
	if (xValue > 614 && xValue <= 716)
	{
		speed_car(slow);
		moveCar(left);
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("sl\n");
     638:	84 e1       	ldi	r24, 0x14	; 20
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     640:	7b c0       	rjmp	.+246    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if (xValue > 716 && xValue <= 819)
     642:	c8 01       	movw	r24, r16
     644:	8d 5c       	subi	r24, 0xCD	; 205
     646:	92 40       	sbci	r25, 0x02	; 2
     648:	87 36       	cpi	r24, 0x67	; 103
     64a:	91 05       	cpc	r25, r1
     64c:	58 f4       	brcc	.+22     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     64e:	8c e3       	ldi	r24, 0x3C	; 60
     650:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("sl\n");
	}
	else if (xValue > 716 && xValue <= 819)
	{
		speed_car(moderate);
		moveCar(left);
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("ml\n");	
     65a:	88 e1       	ldi	r24, 0x18	; 24
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     662:	6a c0       	rjmp	.+212    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if (xValue >819 && xValue <= 921)
     664:	c8 01       	movw	r24, r16
     666:	84 53       	subi	r24, 0x34	; 52
     668:	93 40       	sbci	r25, 0x03	; 3
     66a:	86 36       	cpi	r24, 0x66	; 102
     66c:	91 05       	cpc	r25, r1
     66e:	58 f4       	brcc	.+22     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("ml\n");	
	}
	else if (xValue >819 && xValue <= 921)
	{
		speed_car(fast);
		moveCar(left);
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("fl\n");
     67c:	8c e1       	ldi	r24, 0x1C	; 28
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     684:	59 c0       	rjmp	.+178    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if (xValue > 921 && xValue <= 1023)
     686:	c8 01       	movw	r24, r16
     688:	8a 59       	subi	r24, 0x9A	; 154
     68a:	93 40       	sbci	r25, 0x03	; 3
     68c:	86 36       	cpi	r24, 0x66	; 102
     68e:	91 05       	cpc	r25, r1
     690:	58 f4       	brcc	.+22     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     692:	84 e6       	ldi	r24, 0x64	; 100
     694:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("fl\n");
	}
	else if (xValue > 921 && xValue <= 1023)
	{
		speed_car(veryfast);
		moveCar(left);
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("vl\n");
     69e:	80 e2       	ldi	r24, 0x20	; 32
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     6a6:	48 c0       	rjmp	.+144    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if ( xValue >= 307 && xValue < 409 )
     6a8:	c8 01       	movw	r24, r16
     6aa:	83 53       	subi	r24, 0x33	; 51
     6ac:	91 40       	sbci	r25, 0x01	; 1
     6ae:	86 36       	cpi	r24, 0x66	; 102
     6b0:	91 05       	cpc	r25, r1
     6b2:	58 f4       	brcc	.+22     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     6b4:	8e e1       	ldi	r24, 0x1E	; 30
     6b6:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("vl\n");
	}
	else if ( xValue >= 307 && xValue < 409 )
	{
		speed_car(slow);
		moveCar(right);
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("sr\n");
     6c0:	84 e2       	ldi	r24, 0x24	; 36
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     6c8:	37 c0       	rjmp	.+110    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if (xValue >= 204  && xValue < 307)
     6ca:	c8 01       	movw	r24, r16
     6cc:	8c 5c       	subi	r24, 0xCC	; 204
     6ce:	91 09       	sbc	r25, r1
     6d0:	87 36       	cpi	r24, 0x67	; 103
     6d2:	91 05       	cpc	r25, r1
     6d4:	58 f4       	brcc	.+22     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     6d6:	8c e3       	ldi	r24, 0x3C	; 60
     6d8:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("sr\n");
	}
	else if (xValue >= 204  && xValue < 307)
	{
		speed_car(moderate);
		moveCar(right);
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("mr\n");
     6e2:	88 e2       	ldi	r24, 0x28	; 40
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     6ea:	26 c0       	rjmp	.+76     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if ( xValue >= 102 && xValue < 204)
     6ec:	c8 01       	movw	r24, r16
     6ee:	86 56       	subi	r24, 0x66	; 102
     6f0:	91 09       	sbc	r25, r1
     6f2:	86 36       	cpi	r24, 0x66	; 102
     6f4:	91 05       	cpc	r25, r1
     6f6:	58 f4       	brcc	.+22     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     6f8:	80 e5       	ldi	r24, 0x50	; 80
     6fa:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("mr\n");
	}
	else if ( xValue >= 102 && xValue < 204)
	{
		speed_car(fast);
		moveCar(right);
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("fr\n");
     704:	8c e2       	ldi	r24, 0x2C	; 44
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     70c:	15 c0       	rjmp	.+42     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else if ( xValue >= 0 && xValue < 102)
     70e:	06 36       	cpi	r16, 0x66	; 102
     710:	11 05       	cpc	r17, r1
     712:	58 f4       	brcc	.+22     	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     714:	84 e6       	ldi	r24, 0x64	; 100
     716:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
		usart0_puts("fr\n");
	}
	else if ( xValue >= 0 && xValue < 102)
	{
		speed_car(veryfast);
		moveCar(right);
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("vr\n");
     720:	80 e3       	ldi	r24, 0x30	; 48
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     728:	07 c0       	rjmp	.+14     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
	}
	else
	{
		moveCar(stop);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
		usart0_puts("s\n");
     730:	84 e3       	ldi	r24, 0x34	; 52
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	}
	
 
   if (yValue > 614 && yValue <= 716)
     738:	ce 01       	movw	r24, r28
     73a:	87 56       	subi	r24, 0x67	; 103
     73c:	92 40       	sbci	r25, 0x02	; 2
     73e:	86 36       	cpi	r24, 0x66	; 102
     740:	91 05       	cpc	r25, r1
     742:	58 f4       	brcc	.+22     	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     744:	8e e1       	ldi	r24, 0x1E	; 30
     746:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	
 
   if (yValue > 614 && yValue <= 716)
  {
	speed_car(slow);
	moveCar(forword);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("sf\n");
     750:	87 e5       	ldi	r24, 0x57	; 87
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     758:	7b c0       	rjmp	.+246    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
  }
  else if (yValue > 716 && yValue <= 819)
     75a:	ce 01       	movw	r24, r28
     75c:	8d 5c       	subi	r24, 0xCD	; 205
     75e:	92 40       	sbci	r25, 0x02	; 2
     760:	87 36       	cpi	r24, 0x67	; 103
     762:	91 05       	cpc	r25, r1
     764:	58 f4       	brcc	.+22     	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     766:	8c e3       	ldi	r24, 0x3C	; 60
     768:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("sf\n");
  }
  else if (yValue > 716 && yValue <= 819)
  {
	speed_car(moderate);
	moveCar(forword);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("mf\n");
     772:	8b e5       	ldi	r24, 0x5B	; 91
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     77a:	6a c0       	rjmp	.+212    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
  }
  else if (yValue > 819 && yValue <= 921)
     77c:	ce 01       	movw	r24, r28
     77e:	84 53       	subi	r24, 0x34	; 52
     780:	93 40       	sbci	r25, 0x03	; 3
     782:	86 36       	cpi	r24, 0x66	; 102
     784:	91 05       	cpc	r25, r1
     786:	58 f4       	brcc	.+22     	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     788:	80 e5       	ldi	r24, 0x50	; 80
     78a:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("mf\n");
  }
  else if (yValue > 819 && yValue <= 921)
  {
	speed_car(fast);
	moveCar(forword);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("ff\n");
     794:	8f e5       	ldi	r24, 0x5F	; 95
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     79c:	59 c0       	rjmp	.+178    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
  }
  else if (yValue > 921 && yValue <= 1023)
     79e:	ce 01       	movw	r24, r28
     7a0:	8a 59       	subi	r24, 0x9A	; 154
     7a2:	93 40       	sbci	r25, 0x03	; 3
     7a4:	86 36       	cpi	r24, 0x66	; 102
     7a6:	91 05       	cpc	r25, r1
     7a8:	58 f4       	brcc	.+22     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     7aa:	84 e6       	ldi	r24, 0x64	; 100
     7ac:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("ff\n");
  }
  else if (yValue > 921 && yValue <= 1023)
  {
	speed_car(veryfast);
	moveCar(forword);
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("vf\n");
     7b6:	83 e6       	ldi	r24, 0x63	; 99
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     7be:	48 c0       	rjmp	.+144    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
  }
  else if ( yValue >= 307 && yValue < 409 )
     7c0:	ce 01       	movw	r24, r28
     7c2:	83 53       	subi	r24, 0x33	; 51
     7c4:	91 40       	sbci	r25, 0x01	; 1
     7c6:	86 36       	cpi	r24, 0x66	; 102
     7c8:	91 05       	cpc	r25, r1
     7ca:	58 f4       	brcc	.+22     	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
}
void speed_car(speed control){
	switch(control)
	{ 
		case slow :
		sp =30;
     7cc:	8e e1       	ldi	r24, 0x1E	; 30
     7ce:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("vf\n");
  }
  else if ( yValue >= 307 && yValue < 409 )
  {
	speed_car(slow);
	moveCar(backword);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("sb\n");
     7d8:	87 e3       	ldi	r24, 0x37	; 55
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     7e0:	37 c0       	rjmp	.+110    	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
  }
else if (yValue >= 204 && yValue < 307)
     7e2:	ce 01       	movw	r24, r28
     7e4:	8c 5c       	subi	r24, 0xCC	; 204
     7e6:	91 09       	sbc	r25, r1
     7e8:	87 36       	cpi	r24, 0x67	; 103
     7ea:	91 05       	cpc	r25, r1
     7ec:	58 f4       	brcc	.+22     	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
		case slow :
		sp =30;
		break;
		
		case moderate :
		sp=60;
     7ee:	8c e3       	ldi	r24, 0x3C	; 60
     7f0:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("sb\n");
  }
else if (yValue >= 204 && yValue < 307)
{
	speed_car(moderate);
	moveCar(backword);
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("mb\n");
     7fa:	8b e3       	ldi	r24, 0x3B	; 59
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     802:	26 c0       	rjmp	.+76     	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
}
else if ( yValue >= 102 && yValue < 204)
     804:	ce 01       	movw	r24, r28
     806:	86 56       	subi	r24, 0x66	; 102
     808:	91 09       	sbc	r25, r1
     80a:	86 36       	cpi	r24, 0x66	; 102
     80c:	91 05       	cpc	r25, r1
     80e:	58 f4       	brcc	.+22     	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
		case moderate :
		sp=60;
		break;
		
		case fast :
		sp=80;
     810:	80 e5       	ldi	r24, 0x50	; 80
     812:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("mb\n");
}
else if ( yValue >= 102 && yValue < 204)
{
	speed_car(fast);
	moveCar(backword);
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("fb\n");
     81c:	8f e3       	ldi	r24, 0x3F	; 63
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     824:	15 c0       	rjmp	.+42     	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
}
else if ( yValue >= 0 && yValue < 102)
     826:	c6 36       	cpi	r28, 0x66	; 102
     828:	d1 05       	cpc	r29, r1
     82a:	58 f4       	brcc	.+22     	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
		sp=80;
		break;
		
		
		case veryfast :
		sp=100;
     82c:	84 e6       	ldi	r24, 0x64	; 100
     82e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <sp>
	usart0_puts("fb\n");
}
else if ( yValue >= 0 && yValue < 102)
{
	speed_car(veryfast);
	moveCar(backword);
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("vb\n");
     838:	83 e4       	ldi	r24, 0x43	; 67
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
     840:	07 c0       	rjmp	.+14     	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
}
else
{
	moveCar(stop);
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 35 01 	call	0x26a	; 0x26a <moveCar>
	usart0_puts("s\n");
     848:	84 e3       	ldi	r24, 0x34	; 52
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 91 0a 	call	0x1522	; 0x1522 <usart0_puts>
	
}
}
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	bf 90       	pop	r11
     862:	08 95       	ret

00000864 <__vector_18>:
	}
}

char start = 0 ;
ISR(USART_RX_vect)
{
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	2f 93       	push	r18
     870:	3f 93       	push	r19
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
	char r = UDR0 ;
     87a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	//test
	
	//softuart_putchar(r);
	if (r != 'O' && r != 'K')
     87e:	8f 34       	cpi	r24, 0x4F	; 79
     880:	21 f1       	breq	.+72     	; 0x8ca <__vector_18+0x66>
     882:	8b 34       	cpi	r24, 0x4B	; 75
     884:	91 f0       	breq	.+36     	; 0x8aa <__vector_18+0x46>
	{
		*ptr = r ;
     886:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <ptr>
     88a:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <ptr+0x1>
     88e:	80 83       	st	Z, r24
		ptr++;
     890:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <ptr>
     894:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <ptr+0x1>
     898:	2f 5f       	subi	r18, 0xFF	; 255
     89a:	3f 4f       	sbci	r19, 0xFF	; 255
     89c:	30 93 e7 02 	sts	0x02E7, r19	; 0x8002e7 <ptr+0x1>
     8a0:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <ptr>
	else if(r != 'O')
	{
		deviceCounter =-1 ;
	}
	
	if (r == '+')
     8a4:	8b 32       	cpi	r24, 0x2B	; 43
     8a6:	41 f0       	breq	.+16     	; 0x8b8 <__vector_18+0x54>
     8a8:	10 c0       	rjmp	.+32     	; 0x8ca <__vector_18+0x66>
		*ptr = r ;
		ptr++;
	}
	else if(r != 'O')
	{
		deviceCounter =-1 ;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <deviceCounter+0x1>
     8b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <deviceCounter>
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <__vector_18+0x66>
	}
	
	if (r == '+')
	{
		deviceCounter ++ ;
     8b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <deviceCounter>
     8bc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <deviceCounter+0x1>
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <deviceCounter+0x1>
     8c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <deviceCounter>
	}
	
}
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <clearReceivingBuffer>:

void clearReceivingBuffer()
{
     8e0:	e6 e5       	ldi	r30, 0x56	; 86
     8e2:	f3 e0       	ldi	r31, 0x03	; 3
     8e4:	22 e8       	ldi	r18, 0x82	; 130
     8e6:	34 e0       	ldi	r19, 0x04	; 4
	int counter = 0 ;
	for (counter = 0 ; counter < sizeOfBuffer ; counter++)
	{
		buffer[counter] = "\0";
     8e8:	87 e0       	ldi	r24, 0x07	; 7
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	81 93       	st	Z+, r24
}

void clearReceivingBuffer()
{
	int counter = 0 ;
	for (counter = 0 ; counter < sizeOfBuffer ; counter++)
     8ee:	e2 17       	cp	r30, r18
     8f0:	f3 07       	cpc	r31, r19
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <clearReceivingBuffer+0xc>
	{
		buffer[counter] = "\0";
	}
}
     8f4:	08 95       	ret

000008f6 <updateDeviceInfo>:
	}
}


void updateDeviceInfo(char* rssiStr,char* addrStr)
{
     8f6:	2f 92       	push	r2
     8f8:	3f 92       	push	r3
     8fa:	4f 92       	push	r4
     8fc:	5f 92       	push	r5
     8fe:	6f 92       	push	r6
     900:	7f 92       	push	r7
     902:	8f 92       	push	r8
     904:	9f 92       	push	r9
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	66 97       	sbiw	r28, 0x16	; 22
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	8b 01       	movw	r16, r22
	unsigned int  rssi , address ;
	char bb[20]={'\0'};
     92c:	fe 01       	movw	r30, r28
     92e:	31 96       	adiw	r30, 0x01	; 1
     930:	24 e1       	ldi	r18, 0x14	; 20
     932:	df 01       	movw	r26, r30
     934:	1d 92       	st	X+, r1
     936:	2a 95       	dec	r18
     938:	e9 f7       	brne	.-6      	; 0x934 <__stack+0x35>
	char counter = 0 ;
	rssi = strtol(rssiStr,NULL,16);
     93a:	40 e1       	ldi	r20, 0x10	; 16
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <strtol>
     946:	2b 01       	movw	r4, r22
     948:	3c 01       	movw	r6, r24
     94a:	6d 8b       	std	Y+21, r22	; 0x15
     94c:	5e 8a       	std	Y+22, r5	; 0x16
	address = strtol(addrStr,NULL,16);
     94e:	40 e1       	ldi	r20, 0x10	; 16
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	c8 01       	movw	r24, r16
     958:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <strtol>
     95c:	4b 01       	movw	r8, r22
     95e:	5c 01       	movw	r10, r24
     960:	aa 24       	eor	r10, r10
     962:	bb 24       	eor	r11, r11
	for(counter = 0 ; counter < 4 ; counter ++)
	{
		if(deviceInfo[counter].address == address)
     964:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <deviceInfo+0x4>
     968:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <deviceInfo+0x5>
     96c:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <deviceInfo+0x6>
     970:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <deviceInfo+0x7>
     974:	88 15       	cp	r24, r8
     976:	99 05       	cpc	r25, r9
     978:	aa 05       	cpc	r26, r10
     97a:	bb 05       	cpc	r27, r11
     97c:	09 f0       	breq	.+2      	; 0x980 <__stack+0x81>
     97e:	65 c0       	rjmp	.+202    	; 0xa4a <__stack+0x14b>
     980:	0c c0       	rjmp	.+24     	; 0x99a <__stack+0x9b>
     982:	98 01       	movw	r18, r16
     984:	f7 01       	movw	r30, r14
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	a2 81       	ldd	r26, Z+2	; 0x02
     98c:	b3 81       	ldd	r27, Z+3	; 0x03
     98e:	88 15       	cp	r24, r8
     990:	99 05       	cpc	r25, r9
     992:	aa 05       	cpc	r26, r10
     994:	bb 05       	cpc	r27, r11
     996:	b1 f5       	brne	.+108    	; 0xa04 <__stack+0x105>
     998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
		{
			deviceInfo[counter].rssi = rssi ;
     99e:	89 01       	movw	r16, r18
     9a0:	00 0f       	add	r16, r16
     9a2:	11 1f       	adc	r17, r17
     9a4:	02 0f       	add	r16, r18
     9a6:	13 1f       	adc	r17, r19
     9a8:	00 0f       	add	r16, r16
     9aa:	11 1f       	adc	r17, r17
     9ac:	00 0f       	add	r16, r16
     9ae:	11 1f       	adc	r17, r17
     9b0:	0c 50       	subi	r16, 0x0C	; 12
     9b2:	1d 4f       	sbci	r17, 0xFD	; 253
     9b4:	b2 01       	movw	r22, r4
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 04 0c 	call	0x1808	; 0x1808 <__floatunsisf>
     9be:	d8 01       	movw	r26, r16
     9c0:	6d 93       	st	X+, r22
     9c2:	7d 93       	st	X+, r23
     9c4:	8d 93       	st	X+, r24
     9c6:	9c 93       	st	X, r25
     9c8:	13 97       	sbiw	r26, 0x03	; 3
			
			snprintf(bb,20,"%d",rssi);
     9ca:	5f 92       	push	r5
     9cc:	4f 92       	push	r4
     9ce:	89 e0       	ldi	r24, 0x09	; 9
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	1f 92       	push	r1
     9d8:	84 e1       	ldi	r24, 0x14	; 20
     9da:	8f 93       	push	r24
     9dc:	8e 01       	movw	r16, r28
     9de:	0f 5f       	subi	r16, 0xFF	; 255
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	1f 93       	push	r17
     9e4:	0f 93       	push	r16
     9e6:	0e 94 26 11 	call	0x224c	; 0x224c <snprintf>
			softuart_puts("\nrssi value = ");
     9ea:	87 e6       	ldi	r24, 0x67	; 103
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			softuart_puts(bb);
     9f2:	c8 01       	movw	r24, r16
     9f4:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			break;
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	51 c0       	rjmp	.+162    	; 0xaa6 <__stack+0x1a7>
		}
		else
		{
			snprintf(bb,20,"%d",rssi);
     a04:	fe 89       	ldd	r31, Y+22	; 0x16
     a06:	ff 93       	push	r31
     a08:	8d 89       	ldd	r24, Y+21	; 0x15
     a0a:	8f 93       	push	r24
     a0c:	3f 92       	push	r3
     a0e:	2f 92       	push	r2
     a10:	1f 92       	push	r1
     a12:	94 e1       	ldi	r25, 0x14	; 20
     a14:	9f 93       	push	r25
     a16:	df 92       	push	r13
     a18:	cf 92       	push	r12
     a1a:	0e 94 26 11 	call	0x224c	; 0x224c <snprintf>
			softuart_puts("\nrssi value in else = ");
     a1e:	86 e7       	ldi	r24, 0x76	; 118
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			softuart_puts(bb);
     a26:	c6 01       	movw	r24, r12
     a28:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
     a2c:	0f 5f       	subi	r16, 0xFF	; 255
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	ac e0       	ldi	r26, 0x0C	; 12
     a32:	ea 0e       	add	r14, r26
     a34:	f1 1c       	adc	r15, r1
	unsigned int  rssi , address ;
	char bb[20]={'\0'};
	char counter = 0 ;
	rssi = strtol(rssiStr,NULL,16);
	address = strtol(addrStr,NULL,16);
	for(counter = 0 ; counter < 4 ; counter ++)
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	04 30       	cpi	r16, 0x04	; 4
     a42:	11 05       	cpc	r17, r1
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x149>
     a46:	9d cf       	rjmp	.-198    	; 0x982 <__stack+0x83>
     a48:	2e c0       	rjmp	.+92     	; 0xaa6 <__stack+0x1a7>
			softuart_puts(bb);
			break;
		}
		else
		{
			snprintf(bb,20,"%d",rssi);
     a4a:	5f 92       	push	r5
     a4c:	4f 92       	push	r4
     a4e:	89 e0       	ldi	r24, 0x09	; 9
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	1f 92       	push	r1
     a58:	84 e1       	ldi	r24, 0x14	; 20
     a5a:	8f 93       	push	r24
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
     a62:	1f 93       	push	r17
     a64:	0f 93       	push	r16
     a66:	0e 94 26 11 	call	0x224c	; 0x224c <snprintf>
			softuart_puts("\nrssi value in else = ");
     a6a:	86 e7       	ldi	r24, 0x76	; 118
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			softuart_puts(bb);
     a72:	c8 01       	movw	r24, r16
     a74:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
     a78:	0f 2e       	mov	r0, r31
     a7a:	f4 e0       	ldi	r31, 0x04	; 4
     a7c:	ef 2e       	mov	r14, r31
     a7e:	f3 e0       	ldi	r31, 0x03	; 3
     a80:	ff 2e       	mov	r15, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	01 e0       	ldi	r16, 0x01	; 1
     a90:	10 e0       	ldi	r17, 0x00	; 0
			softuart_puts(bb);
			break;
		}
		else
		{
			snprintf(bb,20,"%d",rssi);
     a92:	0f 2e       	mov	r0, r31
     a94:	f9 e0       	ldi	r31, 0x09	; 9
     a96:	2f 2e       	mov	r2, r31
     a98:	f1 e0       	ldi	r31, 0x01	; 1
     a9a:	3f 2e       	mov	r3, r31
     a9c:	f0 2d       	mov	r31, r0
     a9e:	de 01       	movw	r26, r28
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	6d 01       	movw	r12, r26
     aa4:	6e cf       	rjmp	.-292    	; 0x982 <__stack+0x83>
			softuart_puts("\nrssi value in else = ");
			softuart_puts(bb);
		}
		
	}
}
     aa6:	66 96       	adiw	r28, 0x16	; 22
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	7f 90       	pop	r7
     acc:	6f 90       	pop	r6
     ace:	5f 90       	pop	r5
     ad0:	4f 90       	pop	r4
     ad2:	3f 90       	pop	r3
     ad4:	2f 90       	pop	r2
     ad6:	08 95       	ret

00000ad8 <split>:
		buffer[counter] = "\0";
	}
}

void split(char* str)
{
     ad8:	4f 92       	push	r4
     ada:	5f 92       	push	r5
     adc:	6f 92       	push	r6
     ade:	7f 92       	push	r7
     ae0:	8f 92       	push	r8
     ae2:	9f 92       	push	r9
     ae4:	af 92       	push	r10
     ae6:	bf 92       	push	r11
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	cb 55       	subi	r28, 0x5B	; 91
     afe:	d1 40       	sbci	r29, 0x01	; 1
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	8c 01       	movw	r16, r24
	softuart_puts("string in split\n");
     b0c:	8d e8       	ldi	r24, 0x8D	; 141
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
	softuart_puts(str);
     b14:	c8 01       	movw	r24, r16
     b16:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
	
	char strBuffer [300] ;
	strcpy(strBuffer,str);
     b1a:	b8 01       	movw	r22, r16
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	0e 94 b2 10 	call	0x2164	; 0x2164 <strcpy>
	
	if(*str == NULL || *str == '\r'||*str =='\n')
     b24:	f8 01       	movw	r30, r16
     b26:	80 81       	ld	r24, Z
     b28:	88 23       	and	r24, r24
     b2a:	21 f0       	breq	.+8      	; 0xb34 <split+0x5c>
     b2c:	8d 30       	cpi	r24, 0x0D	; 13
     b2e:	11 f0       	breq	.+4      	; 0xb34 <split+0x5c>
     b30:	8a 30       	cpi	r24, 0x0A	; 10
     b32:	29 f4       	brne	.+10     	; 0xb3e <split+0x66>
	{
		softuart_puts("in return split\n");
     b34:	8e e9       	ldi	r24, 0x9E	; 158
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
     b3c:	a5 c0       	rjmp	.+330    	; 0xc88 <split+0x1b0>
	}
	

	char first[20] ,_[15],rssi[5],addressArray[7];
	char *token;
	token = strtok(str,"\r\n");
     b3e:	6b e6       	ldi	r22, 0x6B	; 107
     b40:	72 e0       	ldi	r23, 0x02	; 2
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 ad 10 	call	0x215a	; 0x215a <strtok>
     b48:	88 2e       	mov	r8, r24
     b4a:	99 2e       	mov	r9, r25
	{

		sscanf(token,"%[^,],%[^,],%[^,],%s",first,_,rssi);
     b4c:	6e 01       	movw	r12, r28
     b4e:	f0 eb       	ldi	r31, 0xB0	; 176
     b50:	cf 1a       	sub	r12, r31
     b52:	fe ef       	ldi	r31, 0xFE	; 254
     b54:	df 0a       	sbc	r13, r31
     b56:	df 92       	push	r13
     b58:	cf 92       	push	r12
     b5a:	8e 01       	movw	r16, r28
     b5c:	0f 5b       	subi	r16, 0xBF	; 191
     b5e:	1e 4f       	sbci	r17, 0xFE	; 254
     b60:	1f 93       	push	r17
     b62:	0f 93       	push	r16
     b64:	7e 01       	movw	r14, r28
     b66:	83 ed       	ldi	r24, 0xD3	; 211
     b68:	e8 1a       	sub	r14, r24
     b6a:	8e ef       	ldi	r24, 0xFE	; 254
     b6c:	f8 0a       	sbc	r15, r24
     b6e:	ff 92       	push	r15
     b70:	ef 92       	push	r14
     b72:	8f ea       	ldi	r24, 0xAF	; 175
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9f 93       	push	r25
     b78:	8f 93       	push	r24
     b7a:	9f 92       	push	r9
     b7c:	8f 92       	push	r8
     b7e:	0e 94 56 11 	call	0x22ac	; 0x22ac <sscanf>
		sscanf(first,"%[^:]:%[^:]:%[^:]:%[^:]:%s",_,_,_,addressArray);
     b82:	5e 01       	movw	r10, r28
     b84:	9b ea       	ldi	r25, 0xAB	; 171
     b86:	a9 1a       	sub	r10, r25
     b88:	9e ef       	ldi	r25, 0xFE	; 254
     b8a:	b9 0a       	sbc	r11, r25
     b8c:	bf 92       	push	r11
     b8e:	af 92       	push	r10
     b90:	1f 93       	push	r17
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	0f 93       	push	r16
     b9c:	84 ec       	ldi	r24, 0xC4	; 196
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	ff 92       	push	r15
     ba6:	ef 92       	push	r14
     ba8:	0e 94 56 11 	call	0x22ac	; 0x22ac <sscanf>
		softuart_puts("\ntoken = ");
     bac:	8f ed       	ldi	r24, 0xDF	; 223
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		softuart_puts(token);
     bb4:	88 2d       	mov	r24, r8
     bb6:	99 2d       	mov	r25, r9
     bb8:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		softuart_puts("\nfirst = ");
     bbc:	89 ee       	ldi	r24, 0xE9	; 233
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		softuart_puts(first);
     bc4:	c7 01       	movw	r24, r14
     bc6:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		updateDeviceInfo(rssi,addressArray) ;
     bca:	b5 01       	movw	r22, r10
     bcc:	c6 01       	movw	r24, r12
     bce:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <updateDeviceInfo>
		
		while((token = strtok(NULL,"\r\n"))!= NULL )
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
				softuart_puts("\ntoken before break = \n");
				softuart_puts(token);
				break;
			}
			
			sscanf(token,"%[^,],%[^,],%[^,],%s",first,_,rssi);
     bdc:	46 01       	movw	r8, r12
     bde:	67 01       	movw	r12, r14
     be0:	0f 2e       	mov	r0, r31
     be2:	ff ea       	ldi	r31, 0xAF	; 175
     be4:	6f 2e       	mov	r6, r31
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	7f 2e       	mov	r7, r31
     bea:	f0 2d       	mov	r31, r0
			sscanf(first,"%[^:]:%[^:]:%[^:]:%[^:]:%s",_,_,_,addressArray);
     bec:	0f 2e       	mov	r0, r31
     bee:	f4 ec       	ldi	r31, 0xC4	; 196
     bf0:	4f 2e       	mov	r4, r31
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	5f 2e       	mov	r5, r31
     bf6:	f0 2d       	mov	r31, r0
		softuart_puts(token);
		softuart_puts("\nfirst = ");
		softuart_puts(first);
		updateDeviceInfo(rssi,addressArray) ;
		
		while((token = strtok(NULL,"\r\n"))!= NULL )
     bf8:	3d c0       	rjmp	.+122    	; 0xc74 <split+0x19c>
		{
			
			if (*token != '+' )
     bfa:	f7 01       	movw	r30, r14
     bfc:	80 81       	ld	r24, Z
     bfe:	8b 32       	cpi	r24, 0x2B	; 43
     c00:	41 f0       	breq	.+16     	; 0xc12 <split+0x13a>
			{
				softuart_puts("\ntoken before break = \n");
     c02:	83 ef       	ldi	r24, 0xF3	; 243
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
				softuart_puts(token);
     c0a:	c7 01       	movw	r24, r14
     c0c:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
				break;
     c10:	3b c0       	rjmp	.+118    	; 0xc88 <split+0x1b0>
			}
			
			sscanf(token,"%[^,],%[^,],%[^,],%s",first,_,rssi);
     c12:	9f 92       	push	r9
     c14:	8f 92       	push	r8
     c16:	1f 93       	push	r17
     c18:	0f 93       	push	r16
     c1a:	df 92       	push	r13
     c1c:	cf 92       	push	r12
     c1e:	7f 92       	push	r7
     c20:	6f 92       	push	r6
     c22:	ff 92       	push	r15
     c24:	ef 92       	push	r14
     c26:	0e 94 56 11 	call	0x22ac	; 0x22ac <sscanf>
			sscanf(first,"%[^:]:%[^:]:%[^:]:%[^:]:%s",_,_,_,addressArray);
     c2a:	bf 92       	push	r11
     c2c:	af 92       	push	r10
     c2e:	1f 93       	push	r17
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	0f 93       	push	r16
     c3a:	5f 92       	push	r5
     c3c:	4f 92       	push	r4
     c3e:	df 92       	push	r13
     c40:	cf 92       	push	r12
     c42:	0e 94 56 11 	call	0x22ac	; 0x22ac <sscanf>
			softuart_puts("\ntoken = ");
     c46:	8f ed       	ldi	r24, 0xDF	; 223
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			softuart_puts(token);
     c4e:	c7 01       	movw	r24, r14
     c50:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			softuart_puts("\nfirst = ");
     c54:	89 ee       	ldi	r24, 0xE9	; 233
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			softuart_puts(first);
     c5c:	c6 01       	movw	r24, r12
     c5e:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
			//puts(rssi);
			//puts(addressArray);
			updateDeviceInfo(rssi,addressArray) ;
     c62:	b5 01       	movw	r22, r10
     c64:	c4 01       	movw	r24, r8
     c66:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <updateDeviceInfo>
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
		softuart_puts(token);
		softuart_puts("\nfirst = ");
		softuart_puts(first);
		updateDeviceInfo(rssi,addressArray) ;
		
		while((token = strtok(NULL,"\r\n"))!= NULL )
     c74:	6b e6       	ldi	r22, 0x6B	; 107
     c76:	72 e0       	ldi	r23, 0x02	; 2
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 ad 10 	call	0x215a	; 0x215a <strtok>
     c80:	7c 01       	movw	r14, r24
     c82:	89 2b       	or	r24, r25
     c84:	09 f0       	breq	.+2      	; 0xc88 <split+0x1b0>
     c86:	b9 cf       	rjmp	.-142    	; 0xbfa <split+0x122>
			//puts(rssi);
			//puts(addressArray);
			updateDeviceInfo(rssi,addressArray) ;
		}
	}
}
     c88:	c5 5a       	subi	r28, 0xA5	; 165
     c8a:	de 4f       	sbci	r29, 0xFE	; 254
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	08 95       	ret

00000cb8 <location>:
		
	}
}

void location(struct DeviceInfo deviceInfo[4])
{
     cb8:	4f 92       	push	r4
     cba:	5f 92       	push	r5
     cbc:	6f 92       	push	r6
     cbe:	7f 92       	push	r7
     cc0:	8f 92       	push	r8
     cc2:	9f 92       	push	r9
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <location+0x22>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <location+0x24>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	double x = 0 , y = 0,theta = 0 ;
	double A1,A2;
	printf("Resultant array is\n");
     ce4:	8b e0       	ldi	r24, 0x0B	; 11
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <puts>
	for (c = 0; c < 4; c++)
     cec:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <c+0x1>
     cf0:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <c>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
	printf("%0.3f\t", deviceInfo[c].distance);
     cf8:	0e e1       	ldi	r16, 0x1E	; 30
     cfa:	12 e0       	ldi	r17, 0x02	; 2
     cfc:	fc 01       	movw	r30, r24
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	e8 0f       	add	r30, r24
     d04:	f9 1f       	adc	r31, r25
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	e8 0f       	add	r30, r24
     d14:	f9 1f       	adc	r31, r25
     d16:	83 85       	ldd	r24, Z+11	; 0x0b
     d18:	8f 93       	push	r24
     d1a:	82 85       	ldd	r24, Z+10	; 0x0a
     d1c:	8f 93       	push	r24
     d1e:	81 85       	ldd	r24, Z+9	; 0x09
     d20:	8f 93       	push	r24
     d22:	80 85       	ldd	r24, Z+8	; 0x08
     d24:	8f 93       	push	r24
     d26:	1f 93       	push	r17
     d28:	0f 93       	push	r16
     d2a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <printf>
void location(struct DeviceInfo deviceInfo[4])
{
	double x = 0 , y = 0,theta = 0 ;
	double A1,A2;
	printf("Resultant array is\n");
	for (c = 0; c < 4; c++)
     d2e:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <c>
     d32:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <c+0x1>
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <c+0x1>
     d3c:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <c>
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	91 05       	cpc	r25, r1
     d50:	ac f2       	brlt	.-86     	; 0xcfc <location+0x44>
	printf("%0.3f\t", deviceInfo[c].distance);
	A1 = atan(round(y)/round(x));
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	a9 01       	movw	r20, r18
     d58:	ca 01       	movw	r24, r20
     d5a:	b9 01       	movw	r22, r18
     d5c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3>
     d60:	0e 94 28 0b 	call	0x1650	; 0x1650 <atan>
	A2 = atan(round(x)/round(y));

	if ((180-(A1+A2))==90)
     d64:	9b 01       	movw	r18, r22
     d66:	ac 01       	movw	r20, r24
     d68:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__addsf3>
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	84 e3       	ldi	r24, 0x34	; 52
     d76:	93 e4       	ldi	r25, 0x43	; 67
     d78:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__subsf3>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	44 eb       	ldi	r20, 0xB4	; 180
     d82:	52 e4       	ldi	r21, 0x42	; 66
     d84:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__cmpsf2>
     d88:	81 11       	cpse	r24, r1
     d8a:	6e c0       	rjmp	.+220    	; 0xe68 <location+0x1b0>
	{
		if(d2<10)
     d8c:	e9 81       	ldd	r30, Y+1	; 0x01
     d8e:	fa 81       	ldd	r31, Y+2	; 0x02
     d90:	14 89       	ldd	r17, Z+20	; 0x14
     d92:	05 89       	ldd	r16, Z+21	; 0x15
     d94:	f6 88       	ldd	r15, Z+22	; 0x16
     d96:	e7 88       	ldd	r14, Z+23	; 0x17
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e2       	ldi	r20, 0x20	; 32
     d9e:	51 e4       	ldi	r21, 0x41	; 65
     da0:	61 2f       	mov	r22, r17
     da2:	70 2f       	mov	r23, r16
     da4:	8f 2d       	mov	r24, r15
     da6:	9e 2d       	mov	r25, r14
     da8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__cmpsf2>
     dac:	88 23       	and	r24, r24
     dae:	fc f4       	brge	.+62     	; 0xdee <location+0x136>
		{
			printf("x = %0.2f\ny = %0.2f\ntheta = %f",x_room,d2,90);
     db0:	1f 92       	push	r1
     db2:	8a e5       	ldi	r24, 0x5A	; 90
     db4:	8f 93       	push	r24
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x_room+0x3>
     dc2:	8f 93       	push	r24
     dc4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <x_room+0x2>
     dc8:	8f 93       	push	r24
     dca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x_room+0x1>
     dce:	8f 93       	push	r24
     dd0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x_room>
     dd4:	8f 93       	push	r24
     dd6:	85 e2       	ldi	r24, 0x25	; 37
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	9f 93       	push	r25
     ddc:	8f 93       	push	r24
     dde:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <printf>
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	b6 c0       	rjmp	.+364    	; 0xf5a <location+0x2a2>
		}
		else if (d1<10)
     dee:	e9 81       	ldd	r30, Y+1	; 0x01
     df0:	fa 81       	ldd	r31, Y+2	; 0x02
     df2:	10 85       	ldd	r17, Z+8	; 0x08
     df4:	01 85       	ldd	r16, Z+9	; 0x09
     df6:	f2 84       	ldd	r15, Z+10	; 0x0a
     df8:	f3 85       	ldd	r31, Z+11	; 0x0b
     dfa:	f9 83       	std	Y+1, r31	; 0x01
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	e9 81       	ldd	r30, Y+1	; 0x01
     e06:	61 2f       	mov	r22, r17
     e08:	70 2f       	mov	r23, r16
     e0a:	8f 2d       	mov	r24, r15
     e0c:	9e 2f       	mov	r25, r30
     e0e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__cmpsf2>
     e12:	88 23       	and	r24, r24
     e14:	0c f0       	brlt	.+2      	; 0xe18 <location+0x160>
     e16:	a1 c0       	rjmp	.+322    	; 0xf5a <location+0x2a2>
		{
			theta=asin(d1/x_room);
     e18:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <x_room>
     e1c:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <x_room+0x1>
     e20:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <x_room+0x2>
     e24:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <x_room+0x3>
     e28:	e9 81       	ldd	r30, Y+1	; 0x01
     e2a:	61 2f       	mov	r22, r17
     e2c:	70 2f       	mov	r23, r16
     e2e:	8f 2d       	mov	r24, r15
     e30:	9e 2f       	mov	r25, r30
     e32:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3>
     e36:	0e 94 0d 0b 	call	0x161a	; 0x161a <asin>
			printf("x = %0.2f\ny = %0.2f\ntheta = %f",0,d1,theta);
     e3a:	9f 93       	push	r25
     e3c:	8f 93       	push	r24
     e3e:	7f 93       	push	r23
     e40:	6f 93       	push	r22
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	8f 93       	push	r24
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	1f 92       	push	r1
     e4e:	1f 92       	push	r1
     e50:	85 e2       	ldi	r24, 0x25	; 37
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <printf>
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	79 c0       	rjmp	.+242    	; 0xf5a <location+0x2a2>
		}
	}
	else
	{
		y = ((d1*d2)/(x_room));
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	80 84       	ldd	r8, Z+8	; 0x08
     e6e:	91 84       	ldd	r9, Z+9	; 0x09
     e70:	a2 84       	ldd	r10, Z+10	; 0x0a
     e72:	b3 84       	ldd	r11, Z+11	; 0x0b
     e74:	24 89       	ldd	r18, Z+20	; 0x14
     e76:	35 89       	ldd	r19, Z+21	; 0x15
     e78:	46 89       	ldd	r20, Z+22	; 0x16
     e7a:	57 89       	ldd	r21, Z+23	; 0x17
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
     e84:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <x_room>
     e88:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <x_room+0x1>
     e8c:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <x_room+0x2>
     e90:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <x_room+0x3>
     e94:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3>
     e98:	6b 01       	movw	r12, r22
     e9a:	7c 01       	movw	r14, r24
		x = sqrt((d1*d1)-(y*y));
     e9c:	a5 01       	movw	r20, r10
     e9e:	94 01       	movw	r18, r8
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
     ea8:	2b 01       	movw	r4, r22
     eaa:	3c 01       	movw	r6, r24
     eac:	a7 01       	movw	r20, r14
     eae:	96 01       	movw	r18, r12
     eb0:	c7 01       	movw	r24, r14
     eb2:	b6 01       	movw	r22, r12
     eb4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
     eb8:	69 83       	std	Y+1, r22	; 0x01
     eba:	7a 83       	std	Y+2, r23	; 0x02
     ebc:	8b 83       	std	Y+3, r24	; 0x03
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	29 81       	ldd	r18, Y+1	; 0x01
     ec2:	3a 81       	ldd	r19, Y+2	; 0x02
     ec4:	4b 81       	ldd	r20, Y+3	; 0x03
     ec6:	5c 81       	ldd	r21, Y+4	; 0x04
     ec8:	c3 01       	movw	r24, r6
     eca:	b2 01       	movw	r22, r4
     ecc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__subsf3>
     ed0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <sqrt>
     ed4:	2b 01       	movw	r4, r22
     ed6:	3c 01       	movw	r6, r24
		theta= asin(round(y)/d1)*(180/PI);
     ed8:	c7 01       	movw	r24, r14
     eda:	b6 01       	movw	r22, r12
     edc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <round>
     ee0:	a5 01       	movw	r20, r10
     ee2:	94 01       	movw	r18, r8
     ee4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3>
     ee8:	0e 94 0d 0b 	call	0x161a	; 0x161a <asin>
     eec:	4b 01       	movw	r8, r22
     eee:	5c 01       	movw	r10, r24
		
		Car_Data.x = x;
     ef0:	c3 01       	movw	r24, r6
     ef2:	b2 01       	movw	r22, r4
     ef4:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixsfsi>
     ef8:	2b 01       	movw	r4, r22
     efa:	3c 01       	movw	r6, r24
     efc:	e8 ee       	ldi	r30, 0xE8	; 232
     efe:	f2 e0       	ldi	r31, 0x02	; 2
     f00:	71 83       	std	Z+1, r23	; 0x01
     f02:	60 83       	st	Z, r22
		Car_Data.y = y;
     f04:	c7 01       	movw	r24, r14
     f06:	b6 01       	movw	r22, r12
     f08:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixsfsi>
     f0c:	6b 01       	movw	r12, r22
     f0e:	7c 01       	movw	r14, r24
     f10:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <Car_Data+0x3>
     f14:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <Car_Data+0x2>
		Car_Data.angle = theta; 
     f18:	20 ee       	ldi	r18, 0xE0	; 224
     f1a:	3e e2       	ldi	r19, 0x2E	; 46
     f1c:	45 e6       	ldi	r20, 0x65	; 101
     f1e:	52 e4       	ldi	r21, 0x42	; 66
     f20:	c5 01       	movw	r24, r10
     f22:	b4 01       	movw	r22, r8
     f24:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
     f28:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixsfsi>
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
     f30:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <Car_Data+0x5>
     f34:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <Car_Data+0x4>
		
		softuart_puts(Car_Data.x = x);
     f38:	c2 01       	movw	r24, r4
     f3a:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		softuart_puts(Car_Data.x = y);
     f3e:	e8 ee       	ldi	r30, 0xE8	; 232
     f40:	f2 e0       	ldi	r31, 0x02	; 2
     f42:	d1 82       	std	Z+1, r13	; 0x01
     f44:	c0 82       	st	Z, r12
     f46:	c6 01       	movw	r24, r12
     f48:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		softuart_puts(Car_Data.x = theta);
     f4c:	e8 ee       	ldi	r30, 0xE8	; 232
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	91 82       	std	Z+1, r9	; 0x01
     f52:	80 82       	st	Z, r8
     f54:	c4 01       	movw	r24, r8
     f56:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		/*printf("\nX=%.2f\n",round(x));
		printf("y=%.2f\n",round(y));
		printf("the angle is %.2f",theta);*/
	}

}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	7f 90       	pop	r7
     f7c:	6f 90       	pop	r6
     f7e:	5f 90       	pop	r5
     f80:	4f 90       	pop	r4
     f82:	08 95       	ret

00000f84 <main>:
double x = 0 , y = 0,theta = 0 ;
double x_room = 10 , y_room = 10;	//x and Y OF THE ROOM
void location(struct DeviceInfo deviceInfo[4]);

int main(void)
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	cc 52       	subi	r28, 0x2C	; 44
     f8e:	d1 40       	sbci	r29, 0x01	; 1
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
	
	deviceInfo[0].address = 12017048; //melos lab
     f9a:	e4 ef       	ldi	r30, 0xF4	; 244
     f9c:	f2 e0       	ldi	r31, 0x02	; 2
     f9e:	88 e9       	ldi	r24, 0x98	; 152
     fa0:	9d e5       	ldi	r25, 0x5D	; 93
     fa2:	a7 eb       	ldi	r26, 0xB7	; 183
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	84 83       	std	Z+4, r24	; 0x04
     fa8:	95 83       	std	Z+5, r25	; 0x05
     faa:	a6 83       	std	Z+6, r26	; 0x06
     fac:	b7 83       	std	Z+7, r27	; 0x07
	deviceInfo[1].address = 1937820;  //melos mob
     fae:	8c e9       	ldi	r24, 0x9C	; 156
     fb0:	91 e9       	ldi	r25, 0x91	; 145
     fb2:	ad e1       	ldi	r26, 0x1D	; 29
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	80 8b       	std	Z+16, r24	; 0x10
     fb8:	91 8b       	std	Z+17, r25	; 0x11
     fba:	a2 8b       	std	Z+18, r26	; 0x12
     fbc:	b3 8b       	std	Z+19, r27	; 0x13
	deviceInfo[2].address = 1156291   ; //sara mob
     fbe:	83 ec       	ldi	r24, 0xC3	; 195
     fc0:	94 ea       	ldi	r25, 0xA4	; 164
     fc2:	a1 e1       	ldi	r26, 0x11	; 17
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	84 8f       	std	Z+28, r24	; 0x1c
     fc8:	95 8f       	std	Z+29, r25	; 0x1d
     fca:	a6 8f       	std	Z+30, r26	; 0x1e
     fcc:	b7 8f       	std	Z+31, r27	; 0x1f
	deviceInfo[3].address = 316796    ; //shakeer lab
     fce:	8c e7       	ldi	r24, 0x7C	; 124
     fd0:	95 ed       	ldi	r25, 0xD5	; 213
     fd2:	a4 e0       	ldi	r26, 0x04	; 4
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	80 a7       	std	Z+40, r24	; 0x28
     fd8:	91 a7       	std	Z+41, r25	; 0x29
     fda:	a2 a7       	std	Z+42, r26	; 0x2a
     fdc:	b3 a7       	std	Z+43, r27	; 0x2b
	
	ptr	 = devices[deviceCounter].receivedData ;
     fde:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <deviceCounter>
     fe2:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <deviceCounter+0x1>
     fe6:	42 e3       	ldi	r20, 0x32	; 50
     fe8:	42 9f       	mul	r20, r18
     fea:	c0 01       	movw	r24, r0
     fec:	43 9f       	mul	r20, r19
     fee:	90 0d       	add	r25, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	8c 57       	subi	r24, 0x7C	; 124
     ff4:	9b 4f       	sbci	r25, 0xFB	; 251
     ff6:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <ptr+0x1>
     ffa:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ptr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ffe:	2f ef       	ldi	r18, 0xFF	; 255
    1000:	33 e2       	ldi	r19, 0x23	; 35
    1002:	84 ef       	ldi	r24, 0xF4	; 244
    1004:	21 50       	subi	r18, 0x01	; 1
    1006:	30 40       	sbci	r19, 0x00	; 0
    1008:	80 40       	sbci	r24, 0x00	; 0
    100a:	e1 f7       	brne	.-8      	; 0x1004 <main+0x80>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <main+0x8a>
    100e:	00 00       	nop
	unsigned int xValue  = 0, yValue = 0 ;
	_delay_ms(10000) ;
	memset(receiveBuffer,'\0',sizeOfBuffer);
    1010:	8c e2       	ldi	r24, 0x2C	; 44
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	e2 eb       	ldi	r30, 0xB2	; 178
    1016:	f6 e0       	ldi	r31, 0x06	; 6
    1018:	df 01       	movw	r26, r30
    101a:	9c 01       	movw	r18, r24
    101c:	1d 92       	st	X+, r1
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	e1 f7       	brne	.-8      	; 0x101c <main+0x98>
	uart_init(9600) ;
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	95 e2       	ldi	r25, 0x25	; 37
    1028:	0e 94 16 0a 	call	0x142c	; 0x142c <uart_init>
	usart0_init(9600);
    102c:	80 e8       	ldi	r24, 0x80	; 128
    102e:	95 e2       	ldi	r25, 0x25	; 37
    1030:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <usart0_init>
	sei();
    1034:	78 94       	sei
	softuart_init();
    1036:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <softuart_init>
	CarControlInit();
    103a:	0e 94 0b 01 	call	0x216	; 0x216 <CarControlInit>
	
	softuart_puts_P( "\r\nStarting of application\r\n" );
    103e:	80 e6       	ldi	r24, 0x60	; 96
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 a8 09 	call	0x1350	; 0x1350 <softuart_puts_p>
	
	//str_split(str);
	uart_SendString("AT\r\n");
    1046:	84 e4       	ldi	r24, 0x44	; 68
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_SendString>
	uart_SendString("at+init\r\n") ;
    104e:	89 e4       	ldi	r24, 0x49	; 73
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_SendString>
	//test
	//uart_SendString("AT+CMODE=1\r\n") ;
	//uart_SendString("AT+ROLE=1\r\n") ;
	//
	uart_SendString("at+iac=9e8b33");
    1056:	83 e5       	ldi	r24, 0x53	; 83
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_SendString>
	uart_SendString("at+class=0\r\n");
    105e:	81 e6       	ldi	r24, 0x61	; 97
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_SendString>
	uart_SendString("at+inqm=1,9,48\r\n");
    1066:	8e e6       	ldi	r24, 0x6E	; 110
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_SendString>
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	83 ed       	ldi	r24, 0xD3	; 211
    1072:	90 e3       	ldi	r25, 0x30	; 48
    1074:	31 50       	subi	r19, 0x01	; 1
    1076:	80 40       	sbci	r24, 0x00	; 0
    1078:	90 40       	sbci	r25, 0x00	; 0
    107a:	e1 f7       	brne	.-8      	; 0x1074 <main+0xf0>
    107c:	00 c0       	rjmp	.+0      	; 0x107e <main+0xfa>
    107e:	00 00       	nop
	_delay_ms(2000);
	ptr	= buffer ;
    1080:	86 e5       	ldi	r24, 0x56	; 86
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <ptr+0x1>
    1088:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ptr>
    108c:	0f 2e       	mov	r0, r31
    108e:	f4 e2       	ldi	r31, 0x24	; 36
    1090:	af 2e       	mov	r10, r31
    1092:	f3 e0       	ldi	r31, 0x03	; 3
    1094:	bf 2e       	mov	r11, r31
    1096:	f0 2d       	mov	r31, r0
	
	int j;
	for(j=0 ; j<4 ;j++)
	{
		deviceInfo[j].distance = pow(10.0, (76.5-deviceSData[j].rssi)/20.0)*100;
		printf("the rssi =%d\n",deviceInfo[j].distance);
    1098:	0f 2e       	mov	r0, r31
    109a:	f1 e9       	ldi	r31, 0x91	; 145
    109c:	cf 2e       	mov	r12, r31
    109e:	f2 e0       	ldi	r31, 0x02	; 2
    10a0:	df 2e       	mov	r13, r31
    10a2:	f0 2d       	mov	r31, r0
	ptr	= buffer ;
	while (1)
	{
			
		//fflush(buffer);
		clearReceivingBuffer();
    10a4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <clearReceivingBuffer>
		uart_SendString("At+inq\r\n");
    10a8:	8f e7       	ldi	r24, 0x7F	; 127
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 4c 0a 	call	0x1498	; 0x1498 <uart_SendString>
    10b0:	af ef       	ldi	r26, 0xFF	; 255
    10b2:	b3 e2       	ldi	r27, 0x23	; 35
    10b4:	e4 ef       	ldi	r30, 0xF4	; 244
    10b6:	a1 50       	subi	r26, 0x01	; 1
    10b8:	b0 40       	sbci	r27, 0x00	; 0
    10ba:	e0 40       	sbci	r30, 0x00	; 0
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <main+0x132>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <main+0x13c>
    10c0:	00 00       	nop
		_delay_ms(10000);

		softuart_puts("in loop\n");
    10c2:	88 e8       	ldi	r24, 0x88	; 136
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		softuart_puts(buffer);
    10ca:	86 e5       	ldi	r24, 0x56	; 86
    10cc:	93 e0       	ldi	r25, 0x03	; 3
    10ce:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
		//split_Devices(buffer) ;
		char sss[300] ;
		strcpy(sss,buffer) ;
    10d2:	66 e5       	ldi	r22, 0x56	; 86
    10d4:	73 e0       	ldi	r23, 0x03	; 3
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	0e 94 b2 10 	call	0x2164	; 0x2164 <strcpy>
		split(sss);
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	0e 94 6c 05 	call	0xad8	; 0xad8 <split>
    10e6:	0f 2e       	mov	r0, r31
    10e8:	f6 e4       	ldi	r31, 0x46	; 70
    10ea:	ef 2e       	mov	r14, r31
    10ec:	f6 e0       	ldi	r31, 0x06	; 6
    10ee:	ff 2e       	mov	r15, r31
    10f0:	f0 2d       	mov	r31, r0
    10f2:	04 ef       	ldi	r16, 0xF4	; 244
    10f4:	12 e0       	ldi	r17, 0x02	; 2
	
	int j;
	for(j=0 ; j<4 ;j++)
	{
		deviceInfo[j].distance = pow(10.0, (76.5-deviceSData[j].rssi)/20.0)*100;
    10f6:	d7 01       	movw	r26, r14
    10f8:	2d 91       	ld	r18, X+
    10fa:	3d 91       	ld	r19, X+
    10fc:	4d 91       	ld	r20, X+
    10fe:	5c 91       	ld	r21, X
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	89 e9       	ldi	r24, 0x99	; 153
    1106:	92 e4       	ldi	r25, 0x42	; 66
    1108:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__subsf3>
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 ea       	ldi	r20, 0xA0	; 160
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	91 e4       	ldi	r25, 0x41	; 65
    1124:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <pow>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	48 ec       	ldi	r20, 0xC8	; 200
    112e:	52 e4       	ldi	r21, 0x42	; 66
    1130:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
    1134:	26 2f       	mov	r18, r22
    1136:	37 2f       	mov	r19, r23
    1138:	46 2f       	mov	r20, r22
    113a:	57 2f       	mov	r21, r23
    113c:	68 2f       	mov	r22, r24
    113e:	79 2f       	mov	r23, r25
    1140:	f8 01       	movw	r30, r16
    1142:	40 87       	std	Z+8, r20	; 0x08
    1144:	51 87       	std	Z+9, r21	; 0x09
    1146:	62 87       	std	Z+10, r22	; 0x0a
    1148:	73 87       	std	Z+11, r23	; 0x0b
		printf("the rssi =%d\n",deviceInfo[j].distance);
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	3f 93       	push	r19
    1150:	2f 93       	push	r18
    1152:	df 92       	push	r13
    1154:	cf 92       	push	r12
    1156:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <printf>
    115a:	fc e0       	ldi	r31, 0x0C	; 12
    115c:	ef 0e       	add	r14, r31
    115e:	f1 1c       	adc	r15, r1
    1160:	04 5f       	subi	r16, 0xF4	; 244
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
		char sss[300] ;
		strcpy(sss,buffer) ;
		split(sss);
	
	int j;
	for(j=0 ; j<4 ;j++)
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0a 15       	cp	r16, r10
    1172:	1b 05       	cpc	r17, r11
    1174:	09 f0       	breq	.+2      	; 0x1178 <main+0x1f4>
    1176:	bf cf       	rjmp	.-130    	; 0x10f6 <main+0x172>
	{
		deviceInfo[j].distance = pow(10.0, (76.5-deviceSData[j].rssi)/20.0)*100;
		printf("the rssi =%d\n",deviceInfo[j].distance);
	}
	location(deviceInfo);
    1178:	84 ef       	ldi	r24, 0xF4	; 244
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <location>
		
		setDirection();
    1180:	0e 94 b6 01 	call	0x36c	; 0x36c <setDirection>
    1184:	2f ef       	ldi	r18, 0xFF	; 255
    1186:	30 e7       	ldi	r19, 0x70	; 112
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	30 40       	sbci	r19, 0x00	; 0
    118e:	80 40       	sbci	r24, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <main+0x206>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <main+0x210>
    1194:	00 00       	nop
		_delay_ms(100);
		
		ptr = buffer ;
    1196:	86 e5       	ldi	r24, 0x56	; 86
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <ptr+0x1>
    119e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ptr>
		softuart_puts("after init ptr\n");
    11a2:	8f e9       	ldi	r24, 0x9F	; 159
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	0e 94 99 09 	call	0x1332	; 0x1332 <softuart_puts>
	}
    11aa:	7c cf       	rjmp	.-264    	; 0x10a4 <main+0x120>

000011ac <__vector_14>:
}
	
unsigned char softuart_transmit_busy( void ) 
{
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
}
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <flag_tx_busy>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	29 f5       	brne	.+74     	; 0x1210 <__vector_14+0x64>
    11c6:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <timer_tx_ctr>
    11ca:	81 50       	subi	r24, 0x01	; 1
    11cc:	f9 f4       	brne	.+62     	; 0x120c <__vector_14+0x60>
    11ce:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <internal_tx_buffer>
    11d2:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <internal_tx_buffer+0x1>
    11d6:	80 ff       	sbrs	r24, 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <__vector_14+0x32>
    11da:	41 9a       	sbi	0x08, 1	; 8
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <__vector_14+0x34>
    11de:	41 98       	cbi	0x08, 1	; 8
    11e0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <internal_tx_buffer>
    11e4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <internal_tx_buffer+0x1>
    11e8:	96 95       	lsr	r25
    11ea:	87 95       	ror	r24
    11ec:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <internal_tx_buffer+0x1>
    11f0:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <internal_tx_buffer>
    11f4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <bits_left_in_tx>
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <bits_left_in_tx>
    11fe:	81 11       	cpse	r24, r1
    1200:	04 c0       	rjmp	.+8      	; 0x120a <__vector_14+0x5e>
    1202:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <flag_tx_busy>
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	01 c0       	rjmp	.+2      	; 0x120c <__vector_14+0x60>
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <timer_tx_ctr>
    1210:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <flag_rx_off>
    1214:	81 11       	cpse	r24, r1
    1216:	56 c0       	rjmp	.+172    	; 0x12c4 <__vector_14+0x118>
    1218:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <flag_rx_waiting_for_stop_bit.1794>
    121c:	88 23       	and	r24, r24
    121e:	e9 f0       	breq	.+58     	; 0x125a <__vector_14+0xae>
    1220:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer_rx_ctr.1796>
    1224:	81 50       	subi	r24, 0x01	; 1
    1226:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer_rx_ctr.1796>
    122a:	81 11       	cpse	r24, r1
    122c:	4b c0       	rjmp	.+150    	; 0x12c4 <__vector_14+0x118>
    122e:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <flag_rx_waiting_for_stop_bit.1794>
    1232:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <flag_rx_ready>
    1236:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <qin>
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <internal_rx_buffer.1798>
    1240:	ec 53       	subi	r30, 0x3C	; 60
    1242:	fd 4f       	sbci	r31, 0xFD	; 253
    1244:	80 83       	st	Z, r24
    1246:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <qin>
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <qin>
    1250:	80 32       	cpi	r24, 0x20	; 32
    1252:	c0 f1       	brcs	.+112    	; 0x12c4 <__vector_14+0x118>
    1254:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <qin>
    1258:	35 c0       	rjmp	.+106    	; 0x12c4 <__vector_14+0x118>
    125a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <flag_rx_ready>
    125e:	81 11       	cpse	r24, r1
    1260:	10 c0       	rjmp	.+32     	; 0x1282 <__vector_14+0xd6>
    1262:	30 99       	sbic	0x06, 0	; 6
    1264:	2f c0       	rjmp	.+94     	; 0x12c4 <__vector_14+0x118>
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <flag_rx_ready>
    126c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <internal_rx_buffer.1798>
    1270:	94 e0       	ldi	r25, 0x04	; 4
    1272:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <timer_rx_ctr.1796>
    1276:	98 e0       	ldi	r25, 0x08	; 8
    1278:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <bits_left_in_rx.1797>
    127c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <rx_mask.1795>
    1280:	21 c0       	rjmp	.+66     	; 0x12c4 <__vector_14+0x118>
    1282:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer_rx_ctr.1796>
    1286:	81 50       	subi	r24, 0x01	; 1
    1288:	d9 f4       	brne	.+54     	; 0x12c0 <__vector_14+0x114>
    128a:	30 9b       	sbis	0x06, 0	; 6
    128c:	07 c0       	rjmp	.+14     	; 0x129c <__vector_14+0xf0>
    128e:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <internal_rx_buffer.1798>
    1292:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <rx_mask.1795>
    1296:	89 2b       	or	r24, r25
    1298:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <internal_rx_buffer.1798>
    129c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <rx_mask.1795>
    12a0:	88 0f       	add	r24, r24
    12a2:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <rx_mask.1795>
    12a6:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <bits_left_in_rx.1797>
    12aa:	81 50       	subi	r24, 0x01	; 1
    12ac:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <bits_left_in_rx.1797>
    12b0:	81 11       	cpse	r24, r1
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <__vector_14+0x112>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <flag_rx_waiting_for_stop_bit.1794>
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <__vector_14+0x114>
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer_rx_ctr.1796>
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <softuart_init>:
    12d6:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <flag_tx_busy>
    12da:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <flag_rx_ready>
    12de:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <flag_rx_off>
    12e2:	41 9a       	sbi	0x08, 1	; 8
    12e4:	39 9a       	sbi	0x07, 1	; 7
    12e6:	38 98       	cbi	0x07, 0	; 7
    12e8:	9f b7       	in	r25, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	81 e2       	ldi	r24, 0x21	; 33
    12ee:	87 bd       	out	0x27, r24	; 39
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	84 bd       	out	0x24, r24	; 36
    12f4:	85 bd       	out	0x25, r24	; 37
    12f6:	ee e6       	ldi	r30, 0x6E	; 110
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	82 60       	ori	r24, 0x02	; 2
    12fe:	80 83       	st	Z, r24
    1300:	16 bc       	out	0x26, r1	; 38
    1302:	9f bf       	out	0x3f, r25	; 63
    1304:	08 95       	ret

00001306 <softuart_putchar>:

void softuart_putchar( const char ch )
{
	while ( flag_tx_busy == SU_TRUE ) {
    1306:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <flag_tx_busy>
    130a:	91 30       	cpi	r25, 0x01	; 1
    130c:	e1 f3       	breq	.-8      	; 0x1306 <softuart_putchar>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
    130e:	93 e0       	ldi	r25, 0x03	; 3
    1310:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <timer_tx_ctr>
	bits_left_in_tx    = TX_NUM_OF_BITS;
    1314:	9a e0       	ldi	r25, 0x0A	; 10
    1316:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <bits_left_in_tx>
	internal_tx_buffer = ( ch << 1 ) | 0x200;
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	92 60       	ori	r25, 0x02	; 2
    1322:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <internal_tx_buffer+0x1>
    1326:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <internal_tx_buffer>
	flag_tx_busy       = SU_TRUE;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <flag_tx_busy>
    1330:	08 95       	ret

00001332 <softuart_puts>:
}
	
void softuart_puts( const char *s )
{
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
	while ( *s ) {
    1338:	88 81       	ld	r24, Y
    133a:	88 23       	and	r24, r24
    133c:	31 f0       	breq	.+12     	; 0x134a <softuart_puts+0x18>
    133e:	21 96       	adiw	r28, 0x01	; 1
		softuart_putchar( *s++ );
    1340:	0e 94 83 09 	call	0x1306	; 0x1306 <softuart_putchar>
	flag_tx_busy       = SU_TRUE;
}
	
void softuart_puts( const char *s )
{
	while ( *s ) {
    1344:	89 91       	ld	r24, Y+
    1346:	81 11       	cpse	r24, r1
    1348:	fb cf       	rjmp	.-10     	; 0x1340 <softuart_puts+0xe>
		softuart_putchar( *s++ );
	}
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <softuart_puts_p>:
	
void softuart_puts_p( const char *prg_s )
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    1354:	ec 01       	movw	r28, r24
    1356:	21 96       	adiw	r28, 0x01	; 1
    1358:	fc 01       	movw	r30, r24
    135a:	84 91       	lpm	r24, Z
    135c:	88 23       	and	r24, r24
    135e:	39 f0       	breq	.+14     	; 0x136e <softuart_puts_p+0x1e>
		softuart_putchar(c);
    1360:	0e 94 83 09 	call	0x1306	; 0x1306 <softuart_putchar>
	
void softuart_puts_p( const char *prg_s )
{
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    1364:	fe 01       	movw	r30, r28
    1366:	84 91       	lpm	r24, Z
    1368:	21 96       	adiw	r28, 0x01	; 1
    136a:	81 11       	cpse	r24, r1
    136c:	f9 cf       	rjmp	.-14     	; 0x1360 <softuart_puts_p+0x10>
		softuart_putchar(c);
	}
}
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <US_Init>:

volatile unsigned short overflows = 0;

void US_Init(void){
	/* init io */
	US_PORT_DDR |=  (1<<TRIG_PIN); /* TRIG */
    1374:	53 9a       	sbi	0x0a, 3	; 10
	US_PORT		&= ~(1<<TRIG_PIN); /* TRIG */
    1376:	5b 98       	cbi	0x0b, 3	; 11
	US_PORT_DDR &= ~(1<<ECHO_PIN); /* ECHO */
    1378:	54 98       	cbi	0x0a, 4	; 10
	US_PORT		&= ~(1<<ECHO_PIN); /* ECHO */
    137a:	5c 98       	cbi	0x0b, 4	; 11
	
	#ifdef APPLY_POWER_PINS
	US_PORT_DDR |=  (1<<VCC_PIN); /* VCC */
    137c:	56 9a       	sbi	0x0a, 6	; 10
	US_PORT_DDR |=  (1<<GND_PIN); /* GND */
    137e:	57 9a       	sbi	0x0a, 7	; 10
	US_PORT		|=  (1<<VCC_PIN); /* VCC */
    1380:	5e 9a       	sbi	0x0b, 6	; 11
	US_PORT		&= ~(1<<GND_PIN); /* GND */
    1382:	5f 98       	cbi	0x0b, 7	; 11
	#endif
	
	/* init timer0 */
	
	TCCR0B |= (1<<CS01); /* 1/8 Prescaler */
    1384:	85 b5       	in	r24, 0x25	; 37
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0); /* Enable Overflow Int */
    138a:	ee e6       	ldi	r30, 0x6E	; 110
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	80 83       	st	Z, r24
	sei();				/* Enable Global interrupt */
    1394:	78 94       	sei
    1396:	08 95       	ret

00001398 <US_getDistance>:
}
unsigned short US_getDistance(void){
	unsigned short pulse_width = 0,distance = 0;
	/* Send Trigger */
	US_PORT |= (1<<TRIG_PIN);
    1398:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    139a:	8a e1       	ldi	r24, 0x1A	; 26
    139c:	8a 95       	dec	r24
    139e:	f1 f7       	brne	.-4      	; 0x139c <US_getDistance+0x4>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <US_getDistance+0xa>
	_delay_us(10);
	US_PORT &= ~(1<<TRIG_PIN);
    13a2:	5b 98       	cbi	0x0b, 3	; 11
	/* Measure Pulse Width */
	while(!(US_PORT_PIN & (1<<ECHO_PIN))); /* Wait for rising edge */
    13a4:	4c 9b       	sbis	0x09, 4	; 9
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <US_getDistance+0xc>
	TCNT0 = 0;
    13a8:	16 bc       	out	0x26, r1	; 38
	overflows = 0;
    13aa:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <overflows+0x1>
    13ae:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <overflows>
	while((US_PORT_PIN & (1<<ECHO_PIN)))/* Wait for falling edge */
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <US_getDistance+0x28>
	{
		if (overflows ==5) // maximum is 23 cm
    13b4:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <overflows>
    13b8:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <overflows+0x1>
    13bc:	05 97       	sbiw	r24, 0x05	; 5
    13be:	11 f0       	breq	.+4      	; 0x13c4 <US_getDistance+0x2c>
	US_PORT &= ~(1<<TRIG_PIN);
	/* Measure Pulse Width */
	while(!(US_PORT_PIN & (1<<ECHO_PIN))); /* Wait for rising edge */
	TCNT0 = 0;
	overflows = 0;
	while((US_PORT_PIN & (1<<ECHO_PIN)))/* Wait for falling edge */
    13c0:	4c 99       	sbic	0x09, 4	; 9
    13c2:	f8 cf       	rjmp	.-16     	; 0x13b4 <US_getDistance+0x1c>
		if (overflows ==5) // maximum is 23 cm
		{
			break;
		}
	}  
	pulse_width = TCNT0 + overflows*256; /* Calc, Pulse Width in us */
    13c4:	86 b5       	in	r24, 0x26	; 38
    13c6:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <overflows>
    13ca:	70 91 e5 02 	lds	r23, 0x02E5	; 0x8002e5 <overflows+0x1>
	distance = (pulse_width/29.1)/2; /* distance in cm */
	return distance; 
    13ce:	76 2f       	mov	r23, r22
    13d0:	66 27       	eor	r22, r22
    13d2:	68 0f       	add	r22, r24
    13d4:	71 1d       	adc	r23, r1
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 04 0c 	call	0x1808	; 0x1808 <__floatunsisf>
    13de:	2d ec       	ldi	r18, 0xCD	; 205
    13e0:	3c ec       	ldi	r19, 0xCC	; 204
    13e2:	48 ee       	ldi	r20, 0xE8	; 232
    13e4:	51 e4       	ldi	r21, 0x41	; 65
    13e6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
    13f6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fixunssfsi>
}
    13fa:	cb 01       	movw	r24, r22
    13fc:	08 95       	ret

000013fe <__vector_16>:
ISR(TIMER0_OVF_vect){
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
	overflows++;
    140c:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <overflows>
    1410:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <overflows+0x1>
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <overflows+0x1>
    141a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <overflows>
    141e:	9f 91       	pop	r25
    1420:	8f 91       	pop	r24
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <uart_init>:
/* receive function  ( return one byte) */
unsigned char uart_Receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0 ;
}
    142c:	a0 e0       	ldi	r26, 0x00	; 0
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	aa 1f       	adc	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	9c 01       	movw	r18, r24
    1442:	ad 01       	movw	r20, r26
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	44 1f       	adc	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	44 1f       	adc	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	72 e1       	ldi	r23, 0x12	; 18
    1458:	8a e7       	ldi	r24, 0x7A	; 122
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodsi4>
    1460:	21 50       	subi	r18, 0x01	; 1
    1462:	31 09       	sbc	r19, r1
    1464:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1468:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    146c:	e2 ec       	ldi	r30, 0xC2	; 194
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	86 60       	ori	r24, 0x06	; 6
    1474:	80 83       	st	Z, r24
    1476:	e1 ec       	ldi	r30, 0xC1	; 193
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 68       	ori	r24, 0x80	; 128
    147e:	80 83       	st	Z, r24
    1480:	80 81       	ld	r24, Z
    1482:	88 61       	ori	r24, 0x18	; 24
    1484:	80 83       	st	Z, r24
    1486:	08 95       	ret

00001488 <uart_Send>:
/* send function ( send one byte ) */
void uart_Send(unsigned char  data)
{
	while(!(UCSR0A & (1 << UDRE0)));
    1488:	e0 ec       	ldi	r30, 0xC0	; 192
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	90 81       	ld	r25, Z
    148e:	95 ff       	sbrs	r25, 5
    1490:	fd cf       	rjmp	.-6      	; 0x148c <uart_Send+0x4>
	UDR0 = data	 ;
    1492:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1496:	08 95       	ret

00001498 <uart_SendString>:
	
}
/*send function ( String )*/

void uart_SendString(char* data) 
{
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	fc 01       	movw	r30, r24
	unsigned char i = 0 ;
	while(data[i] != '\0')
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	59 f0       	breq	.+22     	; 0x14bc <uart_SendString+0x24>
    14a6:	8f 01       	movw	r16, r30
    14a8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		uart_Send(data[i]);
    14aa:	0e 94 44 0a 	call	0x1488	; 0x1488 <uart_Send>
		i++ ;
    14ae:	cf 5f       	subi	r28, 0xFF	; 255
/*send function ( String )*/

void uart_SendString(char* data) 
{
	unsigned char i = 0 ;
	while(data[i] != '\0')
    14b0:	f8 01       	movw	r30, r16
    14b2:	ec 0f       	add	r30, r28
    14b4:	f1 1d       	adc	r31, r1
    14b6:	80 81       	ld	r24, Z
    14b8:	81 11       	cpse	r24, r1
    14ba:	f7 cf       	rjmp	.-18     	; 0x14aa <uart_SendString+0x12>
	{
		uart_Send(data[i]);
		i++ ;
	}
	
}
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <usart0_init>:
unsigned char usart0_getc_unblock( void )
{
	if (UCSR0A & (1<<RXC0) )
		return UDR0;
	return 0;
}
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	aa 1f       	adc	r26, r26
    14ce:	bb 1f       	adc	r27, r27
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	aa 1f       	adc	r26, r26
    14d6:	bb 1f       	adc	r27, r27
    14d8:	9c 01       	movw	r18, r24
    14da:	ad 01       	movw	r20, r26
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	44 1f       	adc	r20, r20
    14e2:	55 1f       	adc	r21, r21
    14e4:	22 0f       	add	r18, r18
    14e6:	33 1f       	adc	r19, r19
    14e8:	44 1f       	adc	r20, r20
    14ea:	55 1f       	adc	r21, r21
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	72 e1       	ldi	r23, 0x12	; 18
    14f0:	8a e7       	ldi	r24, 0x7A	; 122
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodsi4>
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	31 09       	sbc	r19, r1
    14fc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1500:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1504:	86 e0       	ldi	r24, 0x06	; 6
    1506:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    150a:	88 e1       	ldi	r24, 0x18	; 24
    150c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1510:	08 95       	ret

00001512 <usart0_putc>:
void usart0_putc( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    1512:	e0 ec       	ldi	r30, 0xC0	; 192
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	90 81       	ld	r25, Z
    1518:	95 ff       	sbrs	r25, 5
    151a:	fd cf       	rjmp	.-6      	; 0x1516 <usart0_putc+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    151c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1520:	08 95       	ret

00001522 <usart0_puts>:
}
void usart0_puts( unsigned char* str )
{
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
	short int i=0;
	while(str[i]!='\0')
    1528:	88 81       	ld	r24, Y
    152a:	88 23       	and	r24, r24
    152c:	31 f0       	breq	.+12     	; 0x153a <usart0_puts+0x18>
    152e:	21 96       	adiw	r28, 0x01	; 1
	{
		usart0_putc(str[i]);
    1530:	0e 94 89 0a 	call	0x1512	; 0x1512 <usart0_putc>
	UDR0 = data;
}
void usart0_puts( unsigned char* str )
{
	short int i=0;
	while(str[i]!='\0')
    1534:	89 91       	ld	r24, Y+
    1536:	81 11       	cpse	r24, r1
    1538:	fb cf       	rjmp	.-10     	; 0x1530 <usart0_puts+0xe>
	{
		usart0_putc(str[i]);
		i++;
	}
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <__subsf3>:
    1540:	50 58       	subi	r21, 0x80	; 128

00001542 <__addsf3>:
    1542:	bb 27       	eor	r27, r27
    1544:	aa 27       	eor	r26, r26
    1546:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3x>
    154a:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_round>
    154e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_pscA>
    1552:	38 f0       	brcs	.+14     	; 0x1562 <__addsf3+0x20>
    1554:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__fp_pscB>
    1558:	20 f0       	brcs	.+8      	; 0x1562 <__addsf3+0x20>
    155a:	39 f4       	brne	.+14     	; 0x156a <__addsf3+0x28>
    155c:	9f 3f       	cpi	r25, 0xFF	; 255
    155e:	19 f4       	brne	.+6      	; 0x1566 <__addsf3+0x24>
    1560:	26 f4       	brtc	.+8      	; 0x156a <__addsf3+0x28>
    1562:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>
    1566:	0e f4       	brtc	.+2      	; 0x156a <__addsf3+0x28>
    1568:	e0 95       	com	r30
    156a:	e7 fb       	bst	r30, 7
    156c:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>

00001570 <__addsf3x>:
    1570:	e9 2f       	mov	r30, r25
    1572:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__fp_split3>
    1576:	58 f3       	brcs	.-42     	; 0x154e <__addsf3+0xc>
    1578:	ba 17       	cp	r27, r26
    157a:	62 07       	cpc	r22, r18
    157c:	73 07       	cpc	r23, r19
    157e:	84 07       	cpc	r24, r20
    1580:	95 07       	cpc	r25, r21
    1582:	20 f0       	brcs	.+8      	; 0x158c <__addsf3x+0x1c>
    1584:	79 f4       	brne	.+30     	; 0x15a4 <__addsf3x+0x34>
    1586:	a6 f5       	brtc	.+104    	; 0x15f0 <__addsf3x+0x80>
    1588:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_zero>
    158c:	0e f4       	brtc	.+2      	; 0x1590 <__addsf3x+0x20>
    158e:	e0 95       	com	r30
    1590:	0b 2e       	mov	r0, r27
    1592:	ba 2f       	mov	r27, r26
    1594:	a0 2d       	mov	r26, r0
    1596:	0b 01       	movw	r0, r22
    1598:	b9 01       	movw	r22, r18
    159a:	90 01       	movw	r18, r0
    159c:	0c 01       	movw	r0, r24
    159e:	ca 01       	movw	r24, r20
    15a0:	a0 01       	movw	r20, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	ff 27       	eor	r31, r31
    15a6:	59 1b       	sub	r21, r25
    15a8:	99 f0       	breq	.+38     	; 0x15d0 <__addsf3x+0x60>
    15aa:	59 3f       	cpi	r21, 0xF9	; 249
    15ac:	50 f4       	brcc	.+20     	; 0x15c2 <__addsf3x+0x52>
    15ae:	50 3e       	cpi	r21, 0xE0	; 224
    15b0:	68 f1       	brcs	.+90     	; 0x160c <__addsf3x+0x9c>
    15b2:	1a 16       	cp	r1, r26
    15b4:	f0 40       	sbci	r31, 0x00	; 0
    15b6:	a2 2f       	mov	r26, r18
    15b8:	23 2f       	mov	r18, r19
    15ba:	34 2f       	mov	r19, r20
    15bc:	44 27       	eor	r20, r20
    15be:	58 5f       	subi	r21, 0xF8	; 248
    15c0:	f3 cf       	rjmp	.-26     	; 0x15a8 <__addsf3x+0x38>
    15c2:	46 95       	lsr	r20
    15c4:	37 95       	ror	r19
    15c6:	27 95       	ror	r18
    15c8:	a7 95       	ror	r26
    15ca:	f0 40       	sbci	r31, 0x00	; 0
    15cc:	53 95       	inc	r21
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__addsf3x+0x52>
    15d0:	7e f4       	brtc	.+30     	; 0x15f0 <__addsf3x+0x80>
    15d2:	1f 16       	cp	r1, r31
    15d4:	ba 0b       	sbc	r27, r26
    15d6:	62 0b       	sbc	r22, r18
    15d8:	73 0b       	sbc	r23, r19
    15da:	84 0b       	sbc	r24, r20
    15dc:	ba f0       	brmi	.+46     	; 0x160c <__addsf3x+0x9c>
    15de:	91 50       	subi	r25, 0x01	; 1
    15e0:	a1 f0       	breq	.+40     	; 0x160a <__addsf3x+0x9a>
    15e2:	ff 0f       	add	r31, r31
    15e4:	bb 1f       	adc	r27, r27
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	c2 f7       	brpl	.-16     	; 0x15de <__addsf3x+0x6e>
    15ee:	0e c0       	rjmp	.+28     	; 0x160c <__addsf3x+0x9c>
    15f0:	ba 0f       	add	r27, r26
    15f2:	62 1f       	adc	r22, r18
    15f4:	73 1f       	adc	r23, r19
    15f6:	84 1f       	adc	r24, r20
    15f8:	48 f4       	brcc	.+18     	; 0x160c <__addsf3x+0x9c>
    15fa:	87 95       	ror	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	b7 95       	ror	r27
    1602:	f7 95       	ror	r31
    1604:	9e 3f       	cpi	r25, 0xFE	; 254
    1606:	08 f0       	brcs	.+2      	; 0x160a <__addsf3x+0x9a>
    1608:	b0 cf       	rjmp	.-160    	; 0x156a <__addsf3+0x28>
    160a:	93 95       	inc	r25
    160c:	88 0f       	add	r24, r24
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__addsf3x+0xa2>
    1610:	99 27       	eor	r25, r25
    1612:	ee 0f       	add	r30, r30
    1614:	97 95       	ror	r25
    1616:	87 95       	ror	r24
    1618:	08 95       	ret

0000161a <asin>:
    161a:	9f 93       	push	r25
    161c:	9f 77       	andi	r25, 0x7F	; 127
    161e:	ee e3       	ldi	r30, 0x3E	; 62
    1620:	89 37       	cpi	r24, 0x79	; 121
    1622:	9e 07       	cpc	r25, r30
    1624:	28 f4       	brcc	.+10     	; 0x1630 <asin+0x16>
    1626:	e8 e6       	ldi	r30, 0x68	; 104
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_powsodd>
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <asin+0x2e>
    1630:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_arccos>
    1634:	90 58       	subi	r25, 0x80	; 128
    1636:	a2 ea       	ldi	r26, 0xA2	; 162
    1638:	2a ed       	ldi	r18, 0xDA	; 218
    163a:	3f e0       	ldi	r19, 0x0F	; 15
    163c:	49 ec       	ldi	r20, 0xC9	; 201
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3x>
    1644:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_round>
    1648:	0f 90       	pop	r0
    164a:	07 fc       	sbrc	r0, 7
    164c:	90 58       	subi	r25, 0x80	; 128
    164e:	08 95       	ret

00001650 <atan>:
    1650:	df 93       	push	r29
    1652:	dd 27       	eor	r29, r29
    1654:	b9 2f       	mov	r27, r25
    1656:	bf 77       	andi	r27, 0x7F	; 127
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	16 16       	cp	r1, r22
    165e:	17 06       	cpc	r1, r23
    1660:	48 07       	cpc	r20, r24
    1662:	5b 07       	cpc	r21, r27
    1664:	18 f4       	brcc	.+6      	; 0x166c <atan+0x1c>
    1666:	d9 2f       	mov	r29, r25
    1668:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <inverse>
    166c:	9f 93       	push	r25
    166e:	8f 93       	push	r24
    1670:	7f 93       	push	r23
    1672:	6f 93       	push	r22
    1674:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <square>
    1678:	ec e7       	ldi	r30, 0x7C	; 124
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_powser>
    1680:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_round>
    1684:	2f 91       	pop	r18
    1686:	3f 91       	pop	r19
    1688:	4f 91       	pop	r20
    168a:	5f 91       	pop	r21
    168c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__mulsf3x>
    1690:	dd 23       	and	r29, r29
    1692:	51 f0       	breq	.+20     	; 0x16a8 <atan+0x58>
    1694:	90 58       	subi	r25, 0x80	; 128
    1696:	a2 ea       	ldi	r26, 0xA2	; 162
    1698:	2a ed       	ldi	r18, 0xDA	; 218
    169a:	3f e0       	ldi	r19, 0x0F	; 15
    169c:	49 ec       	ldi	r20, 0xC9	; 201
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	d0 78       	andi	r29, 0x80	; 128
    16a2:	5d 27       	eor	r21, r29
    16a4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3x>
    16a8:	df 91       	pop	r29
    16aa:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_round>

000016ae <__cmpsf2>:
    16ae:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fp_cmp>
    16b2:	08 f4       	brcc	.+2      	; 0x16b6 <__cmpsf2+0x8>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret

000016b8 <__divsf3>:
    16b8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__divsf3x>
    16bc:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_round>
    16c0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__fp_pscB>
    16c4:	58 f0       	brcs	.+22     	; 0x16dc <__divsf3+0x24>
    16c6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_pscA>
    16ca:	40 f0       	brcs	.+16     	; 0x16dc <__divsf3+0x24>
    16cc:	29 f4       	brne	.+10     	; 0x16d8 <__divsf3+0x20>
    16ce:	5f 3f       	cpi	r21, 0xFF	; 255
    16d0:	29 f0       	breq	.+10     	; 0x16dc <__divsf3+0x24>
    16d2:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>
    16d6:	51 11       	cpse	r21, r1
    16d8:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>
    16dc:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>

000016e0 <__divsf3x>:
    16e0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__fp_split3>
    16e4:	68 f3       	brcs	.-38     	; 0x16c0 <__divsf3+0x8>

000016e6 <__divsf3_pse>:
    16e6:	99 23       	and	r25, r25
    16e8:	b1 f3       	breq	.-20     	; 0x16d6 <__divsf3+0x1e>
    16ea:	55 23       	and	r21, r21
    16ec:	91 f3       	breq	.-28     	; 0x16d2 <__divsf3+0x1a>
    16ee:	95 1b       	sub	r25, r21
    16f0:	55 0b       	sbc	r21, r21
    16f2:	bb 27       	eor	r27, r27
    16f4:	aa 27       	eor	r26, r26
    16f6:	62 17       	cp	r22, r18
    16f8:	73 07       	cpc	r23, r19
    16fa:	84 07       	cpc	r24, r20
    16fc:	38 f0       	brcs	.+14     	; 0x170c <__divsf3_pse+0x26>
    16fe:	9f 5f       	subi	r25, 0xFF	; 255
    1700:	5f 4f       	sbci	r21, 0xFF	; 255
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	44 1f       	adc	r20, r20
    1708:	aa 1f       	adc	r26, r26
    170a:	a9 f3       	breq	.-22     	; 0x16f6 <__divsf3_pse+0x10>
    170c:	35 d0       	rcall	.+106    	; 0x1778 <__divsf3_pse+0x92>
    170e:	0e 2e       	mov	r0, r30
    1710:	3a f0       	brmi	.+14     	; 0x1720 <__divsf3_pse+0x3a>
    1712:	e0 e8       	ldi	r30, 0x80	; 128
    1714:	32 d0       	rcall	.+100    	; 0x177a <__divsf3_pse+0x94>
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	50 40       	sbci	r21, 0x00	; 0
    171a:	e6 95       	lsr	r30
    171c:	00 1c       	adc	r0, r0
    171e:	ca f7       	brpl	.-14     	; 0x1712 <__divsf3_pse+0x2c>
    1720:	2b d0       	rcall	.+86     	; 0x1778 <__divsf3_pse+0x92>
    1722:	fe 2f       	mov	r31, r30
    1724:	29 d0       	rcall	.+82     	; 0x1778 <__divsf3_pse+0x92>
    1726:	66 0f       	add	r22, r22
    1728:	77 1f       	adc	r23, r23
    172a:	88 1f       	adc	r24, r24
    172c:	bb 1f       	adc	r27, r27
    172e:	26 17       	cp	r18, r22
    1730:	37 07       	cpc	r19, r23
    1732:	48 07       	cpc	r20, r24
    1734:	ab 07       	cpc	r26, r27
    1736:	b0 e8       	ldi	r27, 0x80	; 128
    1738:	09 f0       	breq	.+2      	; 0x173c <__divsf3_pse+0x56>
    173a:	bb 0b       	sbc	r27, r27
    173c:	80 2d       	mov	r24, r0
    173e:	bf 01       	movw	r22, r30
    1740:	ff 27       	eor	r31, r31
    1742:	93 58       	subi	r25, 0x83	; 131
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	3a f0       	brmi	.+14     	; 0x1756 <__divsf3_pse+0x70>
    1748:	9e 3f       	cpi	r25, 0xFE	; 254
    174a:	51 05       	cpc	r21, r1
    174c:	78 f0       	brcs	.+30     	; 0x176c <__divsf3_pse+0x86>
    174e:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>
    1752:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>
    1756:	5f 3f       	cpi	r21, 0xFF	; 255
    1758:	e4 f3       	brlt	.-8      	; 0x1752 <__divsf3_pse+0x6c>
    175a:	98 3e       	cpi	r25, 0xE8	; 232
    175c:	d4 f3       	brlt	.-12     	; 0x1752 <__divsf3_pse+0x6c>
    175e:	86 95       	lsr	r24
    1760:	77 95       	ror	r23
    1762:	67 95       	ror	r22
    1764:	b7 95       	ror	r27
    1766:	f7 95       	ror	r31
    1768:	9f 5f       	subi	r25, 0xFF	; 255
    176a:	c9 f7       	brne	.-14     	; 0x175e <__divsf3_pse+0x78>
    176c:	88 0f       	add	r24, r24
    176e:	91 1d       	adc	r25, r1
    1770:	96 95       	lsr	r25
    1772:	87 95       	ror	r24
    1774:	97 f9       	bld	r25, 7
    1776:	08 95       	ret
    1778:	e1 e0       	ldi	r30, 0x01	; 1
    177a:	66 0f       	add	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	bb 1f       	adc	r27, r27
    1782:	62 17       	cp	r22, r18
    1784:	73 07       	cpc	r23, r19
    1786:	84 07       	cpc	r24, r20
    1788:	ba 07       	cpc	r27, r26
    178a:	20 f0       	brcs	.+8      	; 0x1794 <__divsf3_pse+0xae>
    178c:	62 1b       	sub	r22, r18
    178e:	73 0b       	sbc	r23, r19
    1790:	84 0b       	sbc	r24, r20
    1792:	ba 0b       	sbc	r27, r26
    1794:	ee 1f       	adc	r30, r30
    1796:	88 f7       	brcc	.-30     	; 0x177a <__divsf3_pse+0x94>
    1798:	e0 95       	com	r30
    179a:	08 95       	ret

0000179c <__fixsfsi>:
    179c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fixunssfsi>
    17a0:	68 94       	set
    17a2:	b1 11       	cpse	r27, r1
    17a4:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>
    17a8:	08 95       	ret

000017aa <__fixunssfsi>:
    17aa:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_splitA>
    17ae:	88 f0       	brcs	.+34     	; 0x17d2 <__fixunssfsi+0x28>
    17b0:	9f 57       	subi	r25, 0x7F	; 127
    17b2:	98 f0       	brcs	.+38     	; 0x17da <__fixunssfsi+0x30>
    17b4:	b9 2f       	mov	r27, r25
    17b6:	99 27       	eor	r25, r25
    17b8:	b7 51       	subi	r27, 0x17	; 23
    17ba:	b0 f0       	brcs	.+44     	; 0x17e8 <__fixunssfsi+0x3e>
    17bc:	e1 f0       	breq	.+56     	; 0x17f6 <__fixunssfsi+0x4c>
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	1a f0       	brmi	.+6      	; 0x17ce <__fixunssfsi+0x24>
    17c8:	ba 95       	dec	r27
    17ca:	c9 f7       	brne	.-14     	; 0x17be <__fixunssfsi+0x14>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <__fixunssfsi+0x4c>
    17ce:	b1 30       	cpi	r27, 0x01	; 1
    17d0:	91 f0       	breq	.+36     	; 0x17f6 <__fixunssfsi+0x4c>
    17d2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__fp_zero>
    17d6:	b1 e0       	ldi	r27, 0x01	; 1
    17d8:	08 95       	ret
    17da:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_zero>
    17de:	67 2f       	mov	r22, r23
    17e0:	78 2f       	mov	r23, r24
    17e2:	88 27       	eor	r24, r24
    17e4:	b8 5f       	subi	r27, 0xF8	; 248
    17e6:	39 f0       	breq	.+14     	; 0x17f6 <__fixunssfsi+0x4c>
    17e8:	b9 3f       	cpi	r27, 0xF9	; 249
    17ea:	cc f3       	brlt	.-14     	; 0x17de <__fixunssfsi+0x34>
    17ec:	86 95       	lsr	r24
    17ee:	77 95       	ror	r23
    17f0:	67 95       	ror	r22
    17f2:	b3 95       	inc	r27
    17f4:	d9 f7       	brne	.-10     	; 0x17ec <__fixunssfsi+0x42>
    17f6:	3e f4       	brtc	.+14     	; 0x1806 <__fixunssfsi+0x5c>
    17f8:	90 95       	com	r25
    17fa:	80 95       	com	r24
    17fc:	70 95       	com	r23
    17fe:	61 95       	neg	r22
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	08 95       	ret

00001808 <__floatunsisf>:
    1808:	e8 94       	clt
    180a:	09 c0       	rjmp	.+18     	; 0x181e <__floatsisf+0x12>

0000180c <__floatsisf>:
    180c:	97 fb       	bst	r25, 7
    180e:	3e f4       	brtc	.+14     	; 0x181e <__floatsisf+0x12>
    1810:	90 95       	com	r25
    1812:	80 95       	com	r24
    1814:	70 95       	com	r23
    1816:	61 95       	neg	r22
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	8f 4f       	sbci	r24, 0xFF	; 255
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	99 23       	and	r25, r25
    1820:	a9 f0       	breq	.+42     	; 0x184c <__floatsisf+0x40>
    1822:	f9 2f       	mov	r31, r25
    1824:	96 e9       	ldi	r25, 0x96	; 150
    1826:	bb 27       	eor	r27, r27
    1828:	93 95       	inc	r25
    182a:	f6 95       	lsr	r31
    182c:	87 95       	ror	r24
    182e:	77 95       	ror	r23
    1830:	67 95       	ror	r22
    1832:	b7 95       	ror	r27
    1834:	f1 11       	cpse	r31, r1
    1836:	f8 cf       	rjmp	.-16     	; 0x1828 <__floatsisf+0x1c>
    1838:	fa f4       	brpl	.+62     	; 0x1878 <__floatsisf+0x6c>
    183a:	bb 0f       	add	r27, r27
    183c:	11 f4       	brne	.+4      	; 0x1842 <__floatsisf+0x36>
    183e:	60 ff       	sbrs	r22, 0
    1840:	1b c0       	rjmp	.+54     	; 0x1878 <__floatsisf+0x6c>
    1842:	6f 5f       	subi	r22, 0xFF	; 255
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	8f 4f       	sbci	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	16 c0       	rjmp	.+44     	; 0x1878 <__floatsisf+0x6c>
    184c:	88 23       	and	r24, r24
    184e:	11 f0       	breq	.+4      	; 0x1854 <__floatsisf+0x48>
    1850:	96 e9       	ldi	r25, 0x96	; 150
    1852:	11 c0       	rjmp	.+34     	; 0x1876 <__floatsisf+0x6a>
    1854:	77 23       	and	r23, r23
    1856:	21 f0       	breq	.+8      	; 0x1860 <__floatsisf+0x54>
    1858:	9e e8       	ldi	r25, 0x8E	; 142
    185a:	87 2f       	mov	r24, r23
    185c:	76 2f       	mov	r23, r22
    185e:	05 c0       	rjmp	.+10     	; 0x186a <__floatsisf+0x5e>
    1860:	66 23       	and	r22, r22
    1862:	71 f0       	breq	.+28     	; 0x1880 <__floatsisf+0x74>
    1864:	96 e8       	ldi	r25, 0x86	; 134
    1866:	86 2f       	mov	r24, r22
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	2a f0       	brmi	.+10     	; 0x1878 <__floatsisf+0x6c>
    186e:	9a 95       	dec	r25
    1870:	66 0f       	add	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	88 1f       	adc	r24, r24
    1876:	da f7       	brpl	.-10     	; 0x186e <__floatsisf+0x62>
    1878:	88 0f       	add	r24, r24
    187a:	96 95       	lsr	r25
    187c:	87 95       	ror	r24
    187e:	97 f9       	bld	r25, 7
    1880:	08 95       	ret

00001882 <__fp_arccos>:
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	1f 93       	push	r17
    1888:	0f 93       	push	r16
    188a:	8b 01       	movw	r16, r22
    188c:	ec 01       	movw	r28, r24
    188e:	e9 ea       	ldi	r30, 0xA9	; 169
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_powser>
    1896:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_round>
    189a:	98 01       	movw	r18, r16
    189c:	ae 01       	movw	r20, r28
    189e:	8b 01       	movw	r16, r22
    18a0:	ec 01       	movw	r28, r24
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e8       	ldi	r24, 0x80	; 128
    18a8:	9f e3       	ldi	r25, 0x3F	; 63
    18aa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__subsf3>
    18ae:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <sqrt>
    18b2:	98 01       	movw	r18, r16
    18b4:	ae 01       	movw	r20, r28
    18b6:	0f 91       	pop	r16
    18b8:	1f 91       	pop	r17
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__mulsf3x>

000018c2 <__fp_cmp>:
    18c2:	99 0f       	add	r25, r25
    18c4:	00 08       	sbc	r0, r0
    18c6:	55 0f       	add	r21, r21
    18c8:	aa 0b       	sbc	r26, r26
    18ca:	e0 e8       	ldi	r30, 0x80	; 128
    18cc:	fe ef       	ldi	r31, 0xFE	; 254
    18ce:	16 16       	cp	r1, r22
    18d0:	17 06       	cpc	r1, r23
    18d2:	e8 07       	cpc	r30, r24
    18d4:	f9 07       	cpc	r31, r25
    18d6:	c0 f0       	brcs	.+48     	; 0x1908 <__fp_cmp+0x46>
    18d8:	12 16       	cp	r1, r18
    18da:	13 06       	cpc	r1, r19
    18dc:	e4 07       	cpc	r30, r20
    18de:	f5 07       	cpc	r31, r21
    18e0:	98 f0       	brcs	.+38     	; 0x1908 <__fp_cmp+0x46>
    18e2:	62 1b       	sub	r22, r18
    18e4:	73 0b       	sbc	r23, r19
    18e6:	84 0b       	sbc	r24, r20
    18e8:	95 0b       	sbc	r25, r21
    18ea:	39 f4       	brne	.+14     	; 0x18fa <__fp_cmp+0x38>
    18ec:	0a 26       	eor	r0, r26
    18ee:	61 f0       	breq	.+24     	; 0x1908 <__fp_cmp+0x46>
    18f0:	23 2b       	or	r18, r19
    18f2:	24 2b       	or	r18, r20
    18f4:	25 2b       	or	r18, r21
    18f6:	21 f4       	brne	.+8      	; 0x1900 <__fp_cmp+0x3e>
    18f8:	08 95       	ret
    18fa:	0a 26       	eor	r0, r26
    18fc:	09 f4       	brne	.+2      	; 0x1900 <__fp_cmp+0x3e>
    18fe:	a1 40       	sbci	r26, 0x01	; 1
    1900:	a6 95       	lsr	r26
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	81 1d       	adc	r24, r1
    1906:	81 1d       	adc	r24, r1
    1908:	08 95       	ret

0000190a <__fp_inf>:
    190a:	97 f9       	bld	r25, 7
    190c:	9f 67       	ori	r25, 0x7F	; 127
    190e:	80 e8       	ldi	r24, 0x80	; 128
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	08 95       	ret

00001916 <__fp_nan>:
    1916:	9f ef       	ldi	r25, 0xFF	; 255
    1918:	80 ec       	ldi	r24, 0xC0	; 192
    191a:	08 95       	ret

0000191c <__fp_powser>:
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	1f 93       	push	r17
    1922:	0f 93       	push	r16
    1924:	ff 92       	push	r15
    1926:	ef 92       	push	r14
    1928:	df 92       	push	r13
    192a:	7b 01       	movw	r14, r22
    192c:	8c 01       	movw	r16, r24
    192e:	68 94       	set
    1930:	06 c0       	rjmp	.+12     	; 0x193e <__fp_powser+0x22>
    1932:	da 2e       	mov	r13, r26
    1934:	ef 01       	movw	r28, r30
    1936:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__mulsf3x>
    193a:	fe 01       	movw	r30, r28
    193c:	e8 94       	clt
    193e:	a5 91       	lpm	r26, Z+
    1940:	25 91       	lpm	r18, Z+
    1942:	35 91       	lpm	r19, Z+
    1944:	45 91       	lpm	r20, Z+
    1946:	55 91       	lpm	r21, Z+
    1948:	a6 f3       	brts	.-24     	; 0x1932 <__fp_powser+0x16>
    194a:	ef 01       	movw	r28, r30
    194c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3x>
    1950:	fe 01       	movw	r30, r28
    1952:	97 01       	movw	r18, r14
    1954:	a8 01       	movw	r20, r16
    1956:	da 94       	dec	r13
    1958:	69 f7       	brne	.-38     	; 0x1934 <__fp_powser+0x18>
    195a:	df 90       	pop	r13
    195c:	ef 90       	pop	r14
    195e:	ff 90       	pop	r15
    1960:	0f 91       	pop	r16
    1962:	1f 91       	pop	r17
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <__fp_powsodd>:
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	7f 93       	push	r23
    1970:	6f 93       	push	r22
    1972:	ff 93       	push	r31
    1974:	ef 93       	push	r30
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
    197e:	ef 91       	pop	r30
    1980:	ff 91       	pop	r31
    1982:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_powser>
    1986:	2f 91       	pop	r18
    1988:	3f 91       	pop	r19
    198a:	4f 91       	pop	r20
    198c:	5f 91       	pop	r21
    198e:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__mulsf3>

00001992 <__fp_pscA>:
    1992:	00 24       	eor	r0, r0
    1994:	0a 94       	dec	r0
    1996:	16 16       	cp	r1, r22
    1998:	17 06       	cpc	r1, r23
    199a:	18 06       	cpc	r1, r24
    199c:	09 06       	cpc	r0, r25
    199e:	08 95       	ret

000019a0 <__fp_pscB>:
    19a0:	00 24       	eor	r0, r0
    19a2:	0a 94       	dec	r0
    19a4:	12 16       	cp	r1, r18
    19a6:	13 06       	cpc	r1, r19
    19a8:	14 06       	cpc	r1, r20
    19aa:	05 06       	cpc	r0, r21
    19ac:	08 95       	ret

000019ae <__fp_round>:
    19ae:	09 2e       	mov	r0, r25
    19b0:	03 94       	inc	r0
    19b2:	00 0c       	add	r0, r0
    19b4:	11 f4       	brne	.+4      	; 0x19ba <__fp_round+0xc>
    19b6:	88 23       	and	r24, r24
    19b8:	52 f0       	brmi	.+20     	; 0x19ce <__fp_round+0x20>
    19ba:	bb 0f       	add	r27, r27
    19bc:	40 f4       	brcc	.+16     	; 0x19ce <__fp_round+0x20>
    19be:	bf 2b       	or	r27, r31
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__fp_round+0x18>
    19c2:	60 ff       	sbrs	r22, 0
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <__fp_round+0x20>
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	08 95       	ret

000019d0 <__fp_split3>:
    19d0:	57 fd       	sbrc	r21, 7
    19d2:	90 58       	subi	r25, 0x80	; 128
    19d4:	44 0f       	add	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	59 f0       	breq	.+22     	; 0x19f0 <__fp_splitA+0x10>
    19da:	5f 3f       	cpi	r21, 0xFF	; 255
    19dc:	71 f0       	breq	.+28     	; 0x19fa <__fp_splitA+0x1a>
    19de:	47 95       	ror	r20

000019e0 <__fp_splitA>:
    19e0:	88 0f       	add	r24, r24
    19e2:	97 fb       	bst	r25, 7
    19e4:	99 1f       	adc	r25, r25
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <__fp_splitA+0x20>
    19e8:	9f 3f       	cpi	r25, 0xFF	; 255
    19ea:	79 f0       	breq	.+30     	; 0x1a0a <__fp_splitA+0x2a>
    19ec:	87 95       	ror	r24
    19ee:	08 95       	ret
    19f0:	12 16       	cp	r1, r18
    19f2:	13 06       	cpc	r1, r19
    19f4:	14 06       	cpc	r1, r20
    19f6:	55 1f       	adc	r21, r21
    19f8:	f2 cf       	rjmp	.-28     	; 0x19de <__fp_split3+0xe>
    19fa:	46 95       	lsr	r20
    19fc:	f1 df       	rcall	.-30     	; 0x19e0 <__fp_splitA>
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <__fp_splitA+0x30>
    1a00:	16 16       	cp	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	18 06       	cpc	r1, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	f1 cf       	rjmp	.-30     	; 0x19ec <__fp_splitA+0xc>
    1a0a:	86 95       	lsr	r24
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	61 05       	cpc	r22, r1
    1a10:	08 94       	sec
    1a12:	08 95       	ret

00001a14 <__fp_zero>:
    1a14:	e8 94       	clt

00001a16 <__fp_szero>:
    1a16:	bb 27       	eor	r27, r27
    1a18:	66 27       	eor	r22, r22
    1a1a:	77 27       	eor	r23, r23
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	97 f9       	bld	r25, 7
    1a20:	08 95       	ret

00001a22 <inverse>:
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	80 e8       	ldi	r24, 0x80	; 128
    1a2c:	9f e3       	ldi	r25, 0x3F	; 63
    1a2e:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__divsf3>

00001a32 <__mulsf3>:
    1a32:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__mulsf3x>
    1a36:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_round>
    1a3a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_pscA>
    1a3e:	38 f0       	brcs	.+14     	; 0x1a4e <__mulsf3+0x1c>
    1a40:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__fp_pscB>
    1a44:	20 f0       	brcs	.+8      	; 0x1a4e <__mulsf3+0x1c>
    1a46:	95 23       	and	r25, r21
    1a48:	11 f0       	breq	.+4      	; 0x1a4e <__mulsf3+0x1c>
    1a4a:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>
    1a4e:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>
    1a52:	11 24       	eor	r1, r1
    1a54:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>

00001a58 <__mulsf3x>:
    1a58:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__fp_split3>
    1a5c:	70 f3       	brcs	.-36     	; 0x1a3a <__mulsf3+0x8>

00001a5e <__mulsf3_pse>:
    1a5e:	95 9f       	mul	r25, r21
    1a60:	c1 f3       	breq	.-16     	; 0x1a52 <__mulsf3+0x20>
    1a62:	95 0f       	add	r25, r21
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	55 1f       	adc	r21, r21
    1a68:	62 9f       	mul	r22, r18
    1a6a:	f0 01       	movw	r30, r0
    1a6c:	72 9f       	mul	r23, r18
    1a6e:	bb 27       	eor	r27, r27
    1a70:	f0 0d       	add	r31, r0
    1a72:	b1 1d       	adc	r27, r1
    1a74:	63 9f       	mul	r22, r19
    1a76:	aa 27       	eor	r26, r26
    1a78:	f0 0d       	add	r31, r0
    1a7a:	b1 1d       	adc	r27, r1
    1a7c:	aa 1f       	adc	r26, r26
    1a7e:	64 9f       	mul	r22, r20
    1a80:	66 27       	eor	r22, r22
    1a82:	b0 0d       	add	r27, r0
    1a84:	a1 1d       	adc	r26, r1
    1a86:	66 1f       	adc	r22, r22
    1a88:	82 9f       	mul	r24, r18
    1a8a:	22 27       	eor	r18, r18
    1a8c:	b0 0d       	add	r27, r0
    1a8e:	a1 1d       	adc	r26, r1
    1a90:	62 1f       	adc	r22, r18
    1a92:	73 9f       	mul	r23, r19
    1a94:	b0 0d       	add	r27, r0
    1a96:	a1 1d       	adc	r26, r1
    1a98:	62 1f       	adc	r22, r18
    1a9a:	83 9f       	mul	r24, r19
    1a9c:	a0 0d       	add	r26, r0
    1a9e:	61 1d       	adc	r22, r1
    1aa0:	22 1f       	adc	r18, r18
    1aa2:	74 9f       	mul	r23, r20
    1aa4:	33 27       	eor	r19, r19
    1aa6:	a0 0d       	add	r26, r0
    1aa8:	61 1d       	adc	r22, r1
    1aaa:	23 1f       	adc	r18, r19
    1aac:	84 9f       	mul	r24, r20
    1aae:	60 0d       	add	r22, r0
    1ab0:	21 1d       	adc	r18, r1
    1ab2:	82 2f       	mov	r24, r18
    1ab4:	76 2f       	mov	r23, r22
    1ab6:	6a 2f       	mov	r22, r26
    1ab8:	11 24       	eor	r1, r1
    1aba:	9f 57       	subi	r25, 0x7F	; 127
    1abc:	50 40       	sbci	r21, 0x00	; 0
    1abe:	9a f0       	brmi	.+38     	; 0x1ae6 <__mulsf3_pse+0x88>
    1ac0:	f1 f0       	breq	.+60     	; 0x1afe <__mulsf3_pse+0xa0>
    1ac2:	88 23       	and	r24, r24
    1ac4:	4a f0       	brmi	.+18     	; 0x1ad8 <__mulsf3_pse+0x7a>
    1ac6:	ee 0f       	add	r30, r30
    1ac8:	ff 1f       	adc	r31, r31
    1aca:	bb 1f       	adc	r27, r27
    1acc:	66 1f       	adc	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	91 50       	subi	r25, 0x01	; 1
    1ad4:	50 40       	sbci	r21, 0x00	; 0
    1ad6:	a9 f7       	brne	.-22     	; 0x1ac2 <__mulsf3_pse+0x64>
    1ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    1ada:	51 05       	cpc	r21, r1
    1adc:	80 f0       	brcs	.+32     	; 0x1afe <__mulsf3_pse+0xa0>
    1ade:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>
    1ae2:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>
    1ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae8:	e4 f3       	brlt	.-8      	; 0x1ae2 <__mulsf3_pse+0x84>
    1aea:	98 3e       	cpi	r25, 0xE8	; 232
    1aec:	d4 f3       	brlt	.-12     	; 0x1ae2 <__mulsf3_pse+0x84>
    1aee:	86 95       	lsr	r24
    1af0:	77 95       	ror	r23
    1af2:	67 95       	ror	r22
    1af4:	b7 95       	ror	r27
    1af6:	f7 95       	ror	r31
    1af8:	e7 95       	ror	r30
    1afa:	9f 5f       	subi	r25, 0xFF	; 255
    1afc:	c1 f7       	brne	.-16     	; 0x1aee <__mulsf3_pse+0x90>
    1afe:	fe 2b       	or	r31, r30
    1b00:	88 0f       	add	r24, r24
    1b02:	91 1d       	adc	r25, r1
    1b04:	96 95       	lsr	r25
    1b06:	87 95       	ror	r24
    1b08:	97 f9       	bld	r25, 7
    1b0a:	08 95       	ret

00001b0c <pow>:
    1b0c:	fa 01       	movw	r30, r20
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	30 96       	adiw	r30, 0x00	; 0
    1b14:	21 05       	cpc	r18, r1
    1b16:	31 05       	cpc	r19, r1
    1b18:	a1 f1       	breq	.+104    	; 0x1b82 <pow+0x76>
    1b1a:	61 15       	cp	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	61 f4       	brne	.+24     	; 0x1b38 <pow+0x2c>
    1b20:	80 38       	cpi	r24, 0x80	; 128
    1b22:	bf e3       	ldi	r27, 0x3F	; 63
    1b24:	9b 07       	cpc	r25, r27
    1b26:	49 f1       	breq	.+82     	; 0x1b7a <pow+0x6e>
    1b28:	68 94       	set
    1b2a:	90 38       	cpi	r25, 0x80	; 128
    1b2c:	81 05       	cpc	r24, r1
    1b2e:	61 f0       	breq	.+24     	; 0x1b48 <pow+0x3c>
    1b30:	80 38       	cpi	r24, 0x80	; 128
    1b32:	bf ef       	ldi	r27, 0xFF	; 255
    1b34:	9b 07       	cpc	r25, r27
    1b36:	41 f0       	breq	.+16     	; 0x1b48 <pow+0x3c>
    1b38:	99 23       	and	r25, r25
    1b3a:	4a f5       	brpl	.+82     	; 0x1b8e <pow+0x82>
    1b3c:	ff 3f       	cpi	r31, 0xFF	; 255
    1b3e:	e1 05       	cpc	r30, r1
    1b40:	31 05       	cpc	r19, r1
    1b42:	21 05       	cpc	r18, r1
    1b44:	19 f1       	breq	.+70     	; 0x1b8c <pow+0x80>
    1b46:	e8 94       	clt
    1b48:	08 94       	sec
    1b4a:	e7 95       	ror	r30
    1b4c:	d9 01       	movw	r26, r18
    1b4e:	aa 23       	and	r26, r26
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <pow+0x50>
    1b52:	ab 2f       	mov	r26, r27
    1b54:	be 2f       	mov	r27, r30
    1b56:	f8 5f       	subi	r31, 0xF8	; 248
    1b58:	d0 f3       	brcs	.-12     	; 0x1b4e <pow+0x42>
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <pow+0x70>
    1b5c:	ff 5f       	subi	r31, 0xFF	; 255
    1b5e:	70 f4       	brcc	.+28     	; 0x1b7c <pow+0x70>
    1b60:	a6 95       	lsr	r26
    1b62:	e0 f7       	brcc	.-8      	; 0x1b5c <pow+0x50>
    1b64:	f7 39       	cpi	r31, 0x97	; 151
    1b66:	50 f0       	brcs	.+20     	; 0x1b7c <pow+0x70>
    1b68:	19 f0       	breq	.+6      	; 0x1b70 <pow+0x64>
    1b6a:	ff 3a       	cpi	r31, 0xAF	; 175
    1b6c:	38 f4       	brcc	.+14     	; 0x1b7c <pow+0x70>
    1b6e:	9f 77       	andi	r25, 0x7F	; 127
    1b70:	9f 93       	push	r25
    1b72:	0d d0       	rcall	.+26     	; 0x1b8e <pow+0x82>
    1b74:	0f 90       	pop	r0
    1b76:	07 fc       	sbrc	r0, 7
    1b78:	90 58       	subi	r25, 0x80	; 128
    1b7a:	08 95       	ret
    1b7c:	46 f0       	brts	.+16     	; 0x1b8e <pow+0x82>
    1b7e:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	80 e8       	ldi	r24, 0x80	; 128
    1b88:	9f e3       	ldi	r25, 0x3F	; 63
    1b8a:	08 95       	ret
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	9f 77       	andi	r25, 0x7F	; 127
    1b90:	5f 93       	push	r21
    1b92:	4f 93       	push	r20
    1b94:	3f 93       	push	r19
    1b96:	2f 93       	push	r18
    1b98:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <log>
    1b9c:	2f 91       	pop	r18
    1b9e:	3f 91       	pop	r19
    1ba0:	4f 91       	pop	r20
    1ba2:	5f 91       	pop	r21
    1ba4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsf3>
    1ba8:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <exp>

00001bac <round>:
    1bac:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_splitA>
    1bb0:	e8 f0       	brcs	.+58     	; 0x1bec <round+0x40>
    1bb2:	9e 37       	cpi	r25, 0x7E	; 126
    1bb4:	e8 f0       	brcs	.+58     	; 0x1bf0 <round+0x44>
    1bb6:	96 39       	cpi	r25, 0x96	; 150
    1bb8:	b8 f4       	brcc	.+46     	; 0x1be8 <round+0x3c>
    1bba:	9e 38       	cpi	r25, 0x8E	; 142
    1bbc:	48 f4       	brcc	.+18     	; 0x1bd0 <round+0x24>
    1bbe:	67 2f       	mov	r22, r23
    1bc0:	78 2f       	mov	r23, r24
    1bc2:	88 27       	eor	r24, r24
    1bc4:	98 5f       	subi	r25, 0xF8	; 248
    1bc6:	f9 cf       	rjmp	.-14     	; 0x1bba <round+0xe>
    1bc8:	86 95       	lsr	r24
    1bca:	77 95       	ror	r23
    1bcc:	67 95       	ror	r22
    1bce:	93 95       	inc	r25
    1bd0:	95 39       	cpi	r25, 0x95	; 149
    1bd2:	d0 f3       	brcs	.-12     	; 0x1bc8 <round+0x1c>
    1bd4:	b6 2f       	mov	r27, r22
    1bd6:	b1 70       	andi	r27, 0x01	; 1
    1bd8:	6b 0f       	add	r22, r27
    1bda:	71 1d       	adc	r23, r1
    1bdc:	81 1d       	adc	r24, r1
    1bde:	20 f4       	brcc	.+8      	; 0x1be8 <round+0x3c>
    1be0:	87 95       	ror	r24
    1be2:	77 95       	ror	r23
    1be4:	67 95       	ror	r22
    1be6:	93 95       	inc	r25
    1be8:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__fp_mintl>
    1bec:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_mpack>
    1bf0:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <round+0x50>
    1bf6:	16 f4       	brtc	.+4      	; 0x1bfc <round+0x50>
    1bf8:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>
    1bfc:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_mpack>

00001c00 <sqrt>:
    1c00:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_splitA>
    1c04:	b8 f3       	brcs	.-18     	; 0x1bf4 <round+0x48>
    1c06:	99 23       	and	r25, r25
    1c08:	c9 f3       	breq	.-14     	; 0x1bfc <round+0x50>
    1c0a:	b6 f3       	brts	.-20     	; 0x1bf8 <round+0x4c>
    1c0c:	9f 57       	subi	r25, 0x7F	; 127
    1c0e:	55 0b       	sbc	r21, r21
    1c10:	87 ff       	sbrs	r24, 7
    1c12:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__fp_norm2>
    1c16:	00 24       	eor	r0, r0
    1c18:	a0 e6       	ldi	r26, 0x60	; 96
    1c1a:	40 ea       	ldi	r20, 0xA0	; 160
    1c1c:	90 01       	movw	r18, r0
    1c1e:	80 58       	subi	r24, 0x80	; 128
    1c20:	56 95       	lsr	r21
    1c22:	97 95       	ror	r25
    1c24:	28 f4       	brcc	.+10     	; 0x1c30 <sqrt+0x30>
    1c26:	80 5c       	subi	r24, 0xC0	; 192
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	20 f0       	brcs	.+8      	; 0x1c38 <sqrt+0x38>
    1c30:	26 17       	cp	r18, r22
    1c32:	37 07       	cpc	r19, r23
    1c34:	48 07       	cpc	r20, r24
    1c36:	30 f4       	brcc	.+12     	; 0x1c44 <sqrt+0x44>
    1c38:	62 1b       	sub	r22, r18
    1c3a:	73 0b       	sbc	r23, r19
    1c3c:	84 0b       	sbc	r24, r20
    1c3e:	20 29       	or	r18, r0
    1c40:	31 29       	or	r19, r1
    1c42:	4a 2b       	or	r20, r26
    1c44:	a6 95       	lsr	r26
    1c46:	17 94       	ror	r1
    1c48:	07 94       	ror	r0
    1c4a:	20 25       	eor	r18, r0
    1c4c:	31 25       	eor	r19, r1
    1c4e:	4a 27       	eor	r20, r26
    1c50:	58 f7       	brcc	.-42     	; 0x1c28 <sqrt+0x28>
    1c52:	66 0f       	add	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	20 f0       	brcs	.+8      	; 0x1c62 <sqrt+0x62>
    1c5a:	26 17       	cp	r18, r22
    1c5c:	37 07       	cpc	r19, r23
    1c5e:	48 07       	cpc	r20, r24
    1c60:	30 f4       	brcc	.+12     	; 0x1c6e <sqrt+0x6e>
    1c62:	62 0b       	sbc	r22, r18
    1c64:	73 0b       	sbc	r23, r19
    1c66:	84 0b       	sbc	r24, r20
    1c68:	20 0d       	add	r18, r0
    1c6a:	31 1d       	adc	r19, r1
    1c6c:	41 1d       	adc	r20, r1
    1c6e:	a0 95       	com	r26
    1c70:	81 f7       	brne	.-32     	; 0x1c52 <sqrt+0x52>
    1c72:	b9 01       	movw	r22, r18
    1c74:	84 2f       	mov	r24, r20
    1c76:	91 58       	subi	r25, 0x81	; 129
    1c78:	88 0f       	add	r24, r24
    1c7a:	96 95       	lsr	r25
    1c7c:	87 95       	ror	r24
    1c7e:	08 95       	ret

00001c80 <square>:
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
    1c84:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__mulsf3>
    1c88:	29 f4       	brne	.+10     	; 0x1c94 <square+0x14>
    1c8a:	16 f0       	brts	.+4      	; 0x1c90 <square+0x10>
    1c8c:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>
    1c90:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_zero>
    1c94:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>

00001c98 <exp>:
    1c98:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_splitA>
    1c9c:	a8 f3       	brcs	.-22     	; 0x1c88 <square+0x8>
    1c9e:	96 38       	cpi	r25, 0x86	; 134
    1ca0:	a0 f7       	brcc	.-24     	; 0x1c8a <square+0xa>
    1ca2:	07 f8       	bld	r0, 7
    1ca4:	0f 92       	push	r0
    1ca6:	e8 94       	clt
    1ca8:	2b e3       	ldi	r18, 0x3B	; 59
    1caa:	3a ea       	ldi	r19, 0xAA	; 170
    1cac:	48 eb       	ldi	r20, 0xB8	; 184
    1cae:	5f e7       	ldi	r21, 0x7F	; 127
    1cb0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__mulsf3_pse>
    1cb4:	0f 92       	push	r0
    1cb6:	0f 92       	push	r0
    1cb8:	0f 92       	push	r0
    1cba:	4d b7       	in	r20, 0x3d	; 61
    1cbc:	5e b7       	in	r21, 0x3e	; 62
    1cbe:	0f 92       	push	r0
    1cc0:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <modf>
    1cc4:	e1 ed       	ldi	r30, 0xD1	; 209
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_powser>
    1ccc:	4f 91       	pop	r20
    1cce:	5f 91       	pop	r21
    1cd0:	ef 91       	pop	r30
    1cd2:	ff 91       	pop	r31
    1cd4:	e5 95       	asr	r30
    1cd6:	ee 1f       	adc	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	49 f0       	breq	.+18     	; 0x1cee <exp+0x56>
    1cdc:	fe 57       	subi	r31, 0x7E	; 126
    1cde:	e0 68       	ori	r30, 0x80	; 128
    1ce0:	44 27       	eor	r20, r20
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	44 1f       	adc	r20, r20
    1ce6:	fa 95       	dec	r31
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <exp+0x4a>
    1cea:	41 95       	neg	r20
    1cec:	55 0b       	sbc	r21, r21
    1cee:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <ldexp>
    1cf2:	0f 90       	pop	r0
    1cf4:	07 fe       	sbrs	r0, 7
    1cf6:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <inverse>
    1cfa:	08 95       	ret

00001cfc <__fp_mintl>:
    1cfc:	88 23       	and	r24, r24
    1cfe:	71 f4       	brne	.+28     	; 0x1d1c <__fp_mintl+0x20>
    1d00:	77 23       	and	r23, r23
    1d02:	21 f0       	breq	.+8      	; 0x1d0c <__fp_mintl+0x10>
    1d04:	98 50       	subi	r25, 0x08	; 8
    1d06:	87 2b       	or	r24, r23
    1d08:	76 2f       	mov	r23, r22
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <__fp_mintl+0x1e>
    1d0c:	66 23       	and	r22, r22
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <__fp_mintl+0x18>
    1d10:	99 27       	eor	r25, r25
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <__fp_mintl+0x32>
    1d14:	90 51       	subi	r25, 0x10	; 16
    1d16:	86 2b       	or	r24, r22
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	2a f0       	brmi	.+10     	; 0x1d28 <__fp_mintl+0x2c>
    1d1e:	9a 95       	dec	r25
    1d20:	66 0f       	add	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	88 1f       	adc	r24, r24
    1d26:	da f7       	brpl	.-10     	; 0x1d1e <__fp_mintl+0x22>
    1d28:	88 0f       	add	r24, r24
    1d2a:	96 95       	lsr	r25
    1d2c:	87 95       	ror	r24
    1d2e:	97 f9       	bld	r25, 7
    1d30:	08 95       	ret

00001d32 <__fp_mpack>:
    1d32:	9f 3f       	cpi	r25, 0xFF	; 255
    1d34:	31 f0       	breq	.+12     	; 0x1d42 <__fp_mpack_finite+0xc>

00001d36 <__fp_mpack_finite>:
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	20 f4       	brcc	.+8      	; 0x1d42 <__fp_mpack_finite+0xc>
    1d3a:	87 95       	ror	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b7 95       	ror	r27
    1d42:	88 0f       	add	r24, r24
    1d44:	91 1d       	adc	r25, r1
    1d46:	96 95       	lsr	r25
    1d48:	87 95       	ror	r24
    1d4a:	97 f9       	bld	r25, 7
    1d4c:	08 95       	ret

00001d4e <__fp_norm2>:
    1d4e:	91 50       	subi	r25, 0x01	; 1
    1d50:	50 40       	sbci	r21, 0x00	; 0
    1d52:	66 0f       	add	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	d2 f7       	brpl	.-12     	; 0x1d4e <__fp_norm2>
    1d5a:	08 95       	ret
    1d5c:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>
    1d60:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_mpack>

00001d64 <ldexp>:
    1d64:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_splitA>
    1d68:	d8 f3       	brcs	.-10     	; 0x1d60 <__fp_norm2+0x12>
    1d6a:	99 23       	and	r25, r25
    1d6c:	c9 f3       	breq	.-14     	; 0x1d60 <__fp_norm2+0x12>
    1d6e:	94 0f       	add	r25, r20
    1d70:	51 1d       	adc	r21, r1
    1d72:	a3 f3       	brvs	.-24     	; 0x1d5c <__fp_norm2+0xe>
    1d74:	91 50       	subi	r25, 0x01	; 1
    1d76:	50 40       	sbci	r21, 0x00	; 0
    1d78:	94 f0       	brlt	.+36     	; 0x1d9e <ldexp+0x3a>
    1d7a:	59 f0       	breq	.+22     	; 0x1d92 <ldexp+0x2e>
    1d7c:	88 23       	and	r24, r24
    1d7e:	32 f0       	brmi	.+12     	; 0x1d8c <ldexp+0x28>
    1d80:	66 0f       	add	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	88 1f       	adc	r24, r24
    1d86:	91 50       	subi	r25, 0x01	; 1
    1d88:	50 40       	sbci	r21, 0x00	; 0
    1d8a:	c1 f7       	brne	.-16     	; 0x1d7c <ldexp+0x18>
    1d8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d8e:	51 05       	cpc	r21, r1
    1d90:	2c f7       	brge	.-54     	; 0x1d5c <__fp_norm2+0xe>
    1d92:	88 0f       	add	r24, r24
    1d94:	91 1d       	adc	r25, r1
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret
    1d9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1da0:	ac f0       	brlt	.+42     	; 0x1dcc <ldexp+0x68>
    1da2:	98 3e       	cpi	r25, 0xE8	; 232
    1da4:	9c f0       	brlt	.+38     	; 0x1dcc <ldexp+0x68>
    1da6:	bb 27       	eor	r27, r27
    1da8:	86 95       	lsr	r24
    1daa:	77 95       	ror	r23
    1dac:	67 95       	ror	r22
    1dae:	b7 95       	ror	r27
    1db0:	08 f4       	brcc	.+2      	; 0x1db4 <ldexp+0x50>
    1db2:	b1 60       	ori	r27, 0x01	; 1
    1db4:	93 95       	inc	r25
    1db6:	c1 f7       	brne	.-16     	; 0x1da8 <ldexp+0x44>
    1db8:	bb 0f       	add	r27, r27
    1dba:	58 f7       	brcc	.-42     	; 0x1d92 <ldexp+0x2e>
    1dbc:	11 f4       	brne	.+4      	; 0x1dc2 <ldexp+0x5e>
    1dbe:	60 ff       	sbrs	r22, 0
    1dc0:	e8 cf       	rjmp	.-48     	; 0x1d92 <ldexp+0x2e>
    1dc2:	6f 5f       	subi	r22, 0xFF	; 255
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	e3 cf       	rjmp	.-58     	; 0x1d92 <ldexp+0x2e>
    1dcc:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_szero>
    1dd0:	16 f0       	brts	.+4      	; 0x1dd6 <ldexp+0x72>
    1dd2:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_mpack>
    1dd6:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__fp_nan>
    1dda:	68 94       	set
    1ddc:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_inf>

00001de0 <log>:
    1de0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_splitA>
    1de4:	a8 f3       	brcs	.-22     	; 0x1dd0 <ldexp+0x6c>
    1de6:	99 23       	and	r25, r25
    1de8:	c1 f3       	breq	.-16     	; 0x1dda <ldexp+0x76>
    1dea:	ae f3       	brts	.-22     	; 0x1dd6 <ldexp+0x72>
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	1f 93       	push	r17
    1df2:	0f 93       	push	r16
    1df4:	ff 92       	push	r15
    1df6:	c9 2f       	mov	r28, r25
    1df8:	dd 27       	eor	r29, r29
    1dfa:	88 23       	and	r24, r24
    1dfc:	2a f0       	brmi	.+10     	; 0x1e08 <log+0x28>
    1dfe:	21 97       	sbiw	r28, 0x01	; 1
    1e00:	66 0f       	add	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	da f7       	brpl	.-10     	; 0x1dfe <log+0x1e>
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f eb       	ldi	r21, 0xBF	; 191
    1e10:	9f e3       	ldi	r25, 0x3F	; 63
    1e12:	88 39       	cpi	r24, 0x98	; 152
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <log+0x3e>
    1e16:	80 3e       	cpi	r24, 0xE0	; 224
    1e18:	38 f0       	brcs	.+14     	; 0x1e28 <log+0x48>
    1e1a:	21 96       	adiw	r28, 0x01	; 1
    1e1c:	8f 77       	andi	r24, 0x7F	; 127
    1e1e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__addsf3>
    1e22:	e9 ef       	ldi	r30, 0xF9	; 249
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <log+0x50>
    1e28:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__addsf3>
    1e2c:	e6 e2       	ldi	r30, 0x26	; 38
    1e2e:	f1 e0       	ldi	r31, 0x01	; 1
    1e30:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_powser>
    1e34:	8b 01       	movw	r16, r22
    1e36:	be 01       	movw	r22, r28
    1e38:	ec 01       	movw	r28, r24
    1e3a:	fb 2e       	mov	r15, r27
    1e3c:	6f 57       	subi	r22, 0x7F	; 127
    1e3e:	71 09       	sbc	r23, r1
    1e40:	75 95       	asr	r23
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 0b       	sbc	r24, r24
    1e46:	99 0b       	sbc	r25, r25
    1e48:	0e 94 06 0c 	call	0x180c	; 0x180c <__floatsisf>
    1e4c:	28 e1       	ldi	r18, 0x18	; 24
    1e4e:	32 e7       	ldi	r19, 0x72	; 114
    1e50:	41 e3       	ldi	r20, 0x31	; 49
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__mulsf3x>
    1e58:	af 2d       	mov	r26, r15
    1e5a:	98 01       	movw	r18, r16
    1e5c:	ae 01       	movw	r20, r28
    1e5e:	ff 90       	pop	r15
    1e60:	0f 91       	pop	r16
    1e62:	1f 91       	pop	r17
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3x>
    1e6c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_round>

00001e70 <modf>:
    1e70:	fa 01       	movw	r30, r20
    1e72:	dc 01       	movw	r26, r24
    1e74:	aa 0f       	add	r26, r26
    1e76:	bb 1f       	adc	r27, r27
    1e78:	9b 01       	movw	r18, r22
    1e7a:	ac 01       	movw	r20, r24
    1e7c:	bf 57       	subi	r27, 0x7F	; 127
    1e7e:	28 f4       	brcc	.+10     	; 0x1e8a <modf+0x1a>
    1e80:	22 27       	eor	r18, r18
    1e82:	33 27       	eor	r19, r19
    1e84:	44 27       	eor	r20, r20
    1e86:	50 78       	andi	r21, 0x80	; 128
    1e88:	20 c0       	rjmp	.+64     	; 0x1eca <modf+0x5a>
    1e8a:	b7 51       	subi	r27, 0x17	; 23
    1e8c:	90 f4       	brcc	.+36     	; 0x1eb2 <modf+0x42>
    1e8e:	ab 2f       	mov	r26, r27
    1e90:	00 24       	eor	r0, r0
    1e92:	46 95       	lsr	r20
    1e94:	37 95       	ror	r19
    1e96:	27 95       	ror	r18
    1e98:	01 1c       	adc	r0, r1
    1e9a:	a3 95       	inc	r26
    1e9c:	d2 f3       	brmi	.-12     	; 0x1e92 <modf+0x22>
    1e9e:	00 20       	and	r0, r0
    1ea0:	71 f0       	breq	.+28     	; 0x1ebe <modf+0x4e>
    1ea2:	22 0f       	add	r18, r18
    1ea4:	33 1f       	adc	r19, r19
    1ea6:	44 1f       	adc	r20, r20
    1ea8:	b3 95       	inc	r27
    1eaa:	da f3       	brmi	.-10     	; 0x1ea2 <modf+0x32>
    1eac:	0e d0       	rcall	.+28     	; 0x1eca <modf+0x5a>
    1eae:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__subsf3>
    1eb2:	61 30       	cpi	r22, 0x01	; 1
    1eb4:	71 05       	cpc	r23, r1
    1eb6:	a0 e8       	ldi	r26, 0x80	; 128
    1eb8:	8a 07       	cpc	r24, r26
    1eba:	b9 46       	sbci	r27, 0x69	; 105
    1ebc:	30 f4       	brcc	.+12     	; 0x1eca <modf+0x5a>
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	66 27       	eor	r22, r22
    1ec4:	77 27       	eor	r23, r23
    1ec6:	88 27       	eor	r24, r24
    1ec8:	90 78       	andi	r25, 0x80	; 128
    1eca:	30 96       	adiw	r30, 0x00	; 0
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <modf+0x66>
    1ece:	20 83       	st	Z, r18
    1ed0:	31 83       	std	Z+1, r19	; 0x01
    1ed2:	42 83       	std	Z+2, r20	; 0x02
    1ed4:	53 83       	std	Z+3, r21	; 0x03
    1ed6:	08 95       	ret

00001ed8 <__udivmodsi4>:
    1ed8:	a1 e2       	ldi	r26, 0x21	; 33
    1eda:	1a 2e       	mov	r1, r26
    1edc:	aa 1b       	sub	r26, r26
    1ede:	bb 1b       	sub	r27, r27
    1ee0:	fd 01       	movw	r30, r26
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <__udivmodsi4_ep>

00001ee4 <__udivmodsi4_loop>:
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	ee 1f       	adc	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	a2 17       	cp	r26, r18
    1eee:	b3 07       	cpc	r27, r19
    1ef0:	e4 07       	cpc	r30, r20
    1ef2:	f5 07       	cpc	r31, r21
    1ef4:	20 f0       	brcs	.+8      	; 0x1efe <__udivmodsi4_ep>
    1ef6:	a2 1b       	sub	r26, r18
    1ef8:	b3 0b       	sbc	r27, r19
    1efa:	e4 0b       	sbc	r30, r20
    1efc:	f5 0b       	sbc	r31, r21

00001efe <__udivmodsi4_ep>:
    1efe:	66 1f       	adc	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	1a 94       	dec	r1
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <__udivmodsi4_loop>
    1f0a:	60 95       	com	r22
    1f0c:	70 95       	com	r23
    1f0e:	80 95       	com	r24
    1f10:	90 95       	com	r25
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	bd 01       	movw	r22, r26
    1f18:	cf 01       	movw	r24, r30
    1f1a:	08 95       	ret

00001f1c <strtol>:
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	ff e0       	ldi	r31, 0x0F	; 15
    1f24:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__+0x2>
    1f28:	5c 01       	movw	r10, r24
    1f2a:	6b 01       	movw	r12, r22
    1f2c:	7a 01       	movw	r14, r20
    1f2e:	61 15       	cp	r22, r1
    1f30:	71 05       	cpc	r23, r1
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <strtol+0x1e>
    1f34:	fb 01       	movw	r30, r22
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
    1f3a:	e1 14       	cp	r14, r1
    1f3c:	f1 04       	cpc	r15, r1
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <strtol+0x2e>
    1f40:	c7 01       	movw	r24, r14
    1f42:	02 97       	sbiw	r24, 0x02	; 2
    1f44:	83 97       	sbiw	r24, 0x23	; 35
    1f46:	08 f0       	brcs	.+2      	; 0x1f4a <strtol+0x2e>
    1f48:	e5 c0       	rjmp	.+458    	; 0x2114 <strtol+0x1f8>
    1f4a:	e5 01       	movw	r28, r10
    1f4c:	21 96       	adiw	r28, 0x01	; 1
    1f4e:	f5 01       	movw	r30, r10
    1f50:	10 81       	ld	r17, Z
    1f52:	81 2f       	mov	r24, r17
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 a4 10 	call	0x2148	; 0x2148 <isspace>
    1f5a:	89 2b       	or	r24, r25
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <strtol+0x46>
    1f5e:	5e 01       	movw	r10, r28
    1f60:	f4 cf       	rjmp	.-24     	; 0x1f4a <strtol+0x2e>
    1f62:	1d 32       	cpi	r17, 0x2D	; 45
    1f64:	29 f4       	brne	.+10     	; 0x1f70 <strtol+0x54>
    1f66:	21 96       	adiw	r28, 0x01	; 1
    1f68:	f5 01       	movw	r30, r10
    1f6a:	11 81       	ldd	r17, Z+1	; 0x01
    1f6c:	01 e0       	ldi	r16, 0x01	; 1
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <strtol+0x62>
    1f70:	1b 32       	cpi	r17, 0x2B	; 43
    1f72:	21 f4       	brne	.+8      	; 0x1f7c <strtol+0x60>
    1f74:	e5 01       	movw	r28, r10
    1f76:	22 96       	adiw	r28, 0x02	; 2
    1f78:	f5 01       	movw	r30, r10
    1f7a:	11 81       	ldd	r17, Z+1	; 0x01
    1f7c:	00 e0       	ldi	r16, 0x00	; 0
    1f7e:	e1 14       	cp	r14, r1
    1f80:	f1 04       	cpc	r15, r1
    1f82:	09 f1       	breq	.+66     	; 0x1fc6 <strtol+0xaa>
    1f84:	f0 e1       	ldi	r31, 0x10	; 16
    1f86:	ef 16       	cp	r14, r31
    1f88:	f1 04       	cpc	r15, r1
    1f8a:	29 f4       	brne	.+10     	; 0x1f96 <strtol+0x7a>
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <strtol+0xf0>
    1f8e:	10 e3       	ldi	r17, 0x30	; 48
    1f90:	e1 14       	cp	r14, r1
    1f92:	f1 04       	cpc	r15, r1
    1f94:	21 f1       	breq	.+72     	; 0x1fde <strtol+0xc2>
    1f96:	28 e0       	ldi	r18, 0x08	; 8
    1f98:	e2 16       	cp	r14, r18
    1f9a:	f1 04       	cpc	r15, r1
    1f9c:	01 f1       	breq	.+64     	; 0x1fde <strtol+0xc2>
    1f9e:	54 f4       	brge	.+20     	; 0x1fb4 <strtol+0x98>
    1fa0:	e2 e0       	ldi	r30, 0x02	; 2
    1fa2:	ee 16       	cp	r14, r30
    1fa4:	f1 04       	cpc	r15, r1
    1fa6:	21 f5       	brne	.+72     	; 0x1ff0 <strtol+0xd4>
    1fa8:	81 2c       	mov	r8, r1
    1faa:	91 2c       	mov	r9, r1
    1fac:	a1 2c       	mov	r10, r1
    1fae:	b0 e4       	ldi	r27, 0x40	; 64
    1fb0:	bb 2e       	mov	r11, r27
    1fb2:	3e c0       	rjmp	.+124    	; 0x2030 <strtol+0x114>
    1fb4:	fa e0       	ldi	r31, 0x0A	; 10
    1fb6:	ef 16       	cp	r14, r31
    1fb8:	f1 04       	cpc	r15, r1
    1fba:	39 f0       	breq	.+14     	; 0x1fca <strtol+0xae>
    1fbc:	20 e1       	ldi	r18, 0x10	; 16
    1fbe:	e2 16       	cp	r14, r18
    1fc0:	f1 04       	cpc	r15, r1
    1fc2:	b1 f4       	brne	.+44     	; 0x1ff0 <strtol+0xd4>
    1fc4:	30 c0       	rjmp	.+96     	; 0x2026 <strtol+0x10a>
    1fc6:	10 33       	cpi	r17, 0x30	; 48
    1fc8:	19 f1       	breq	.+70     	; 0x2010 <strtol+0xf4>
    1fca:	fa e0       	ldi	r31, 0x0A	; 10
    1fcc:	ef 2e       	mov	r14, r31
    1fce:	f1 2c       	mov	r15, r1
    1fd0:	ac ec       	ldi	r26, 0xCC	; 204
    1fd2:	8a 2e       	mov	r8, r26
    1fd4:	98 2c       	mov	r9, r8
    1fd6:	a8 2c       	mov	r10, r8
    1fd8:	ac e0       	ldi	r26, 0x0C	; 12
    1fda:	ba 2e       	mov	r11, r26
    1fdc:	29 c0       	rjmp	.+82     	; 0x2030 <strtol+0x114>
    1fde:	78 e0       	ldi	r23, 0x08	; 8
    1fe0:	e7 2e       	mov	r14, r23
    1fe2:	f1 2c       	mov	r15, r1
    1fe4:	81 2c       	mov	r8, r1
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	a1 2c       	mov	r10, r1
    1fea:	e0 e1       	ldi	r30, 0x10	; 16
    1fec:	be 2e       	mov	r11, r30
    1fee:	20 c0       	rjmp	.+64     	; 0x2030 <strtol+0x114>
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e8       	ldi	r25, 0x80	; 128
    1ff8:	97 01       	movw	r18, r14
    1ffa:	0f 2c       	mov	r0, r15
    1ffc:	00 0c       	add	r0, r0
    1ffe:	44 0b       	sbc	r20, r20
    2000:	55 0b       	sbc	r21, r21
    2002:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodsi4>
    2006:	49 01       	movw	r8, r18
    2008:	5a 01       	movw	r10, r20
    200a:	12 c0       	rjmp	.+36     	; 0x2030 <strtol+0x114>
    200c:	10 33       	cpi	r17, 0x30	; 48
    200e:	59 f4       	brne	.+22     	; 0x2026 <strtol+0x10a>
    2010:	88 81       	ld	r24, Y
    2012:	8f 7d       	andi	r24, 0xDF	; 223
    2014:	88 35       	cpi	r24, 0x58	; 88
    2016:	09 f0       	breq	.+2      	; 0x201a <strtol+0xfe>
    2018:	ba cf       	rjmp	.-140    	; 0x1f8e <strtol+0x72>
    201a:	19 81       	ldd	r17, Y+1	; 0x01
    201c:	22 96       	adiw	r28, 0x02	; 2
    201e:	02 60       	ori	r16, 0x02	; 2
    2020:	80 e1       	ldi	r24, 0x10	; 16
    2022:	e8 2e       	mov	r14, r24
    2024:	f1 2c       	mov	r15, r1
    2026:	81 2c       	mov	r8, r1
    2028:	91 2c       	mov	r9, r1
    202a:	a1 2c       	mov	r10, r1
    202c:	68 e0       	ldi	r22, 0x08	; 8
    202e:	b6 2e       	mov	r11, r22
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	cb 01       	movw	r24, r22
    2038:	27 01       	movw	r4, r14
    203a:	0f 2c       	mov	r0, r15
    203c:	00 0c       	add	r0, r0
    203e:	66 08       	sbc	r6, r6
    2040:	77 08       	sbc	r7, r7
    2042:	fe 01       	movw	r30, r28
    2044:	50 ed       	ldi	r21, 0xD0	; 208
    2046:	35 2e       	mov	r3, r21
    2048:	31 0e       	add	r3, r17
    204a:	29 e0       	ldi	r18, 0x09	; 9
    204c:	23 15       	cp	r18, r3
    204e:	70 f4       	brcc	.+28     	; 0x206c <strtol+0x150>
    2050:	2f eb       	ldi	r18, 0xBF	; 191
    2052:	21 0f       	add	r18, r17
    2054:	2a 31       	cpi	r18, 0x1A	; 26
    2056:	18 f4       	brcc	.+6      	; 0x205e <strtol+0x142>
    2058:	39 ec       	ldi	r19, 0xC9	; 201
    205a:	33 2e       	mov	r3, r19
    205c:	06 c0       	rjmp	.+12     	; 0x206a <strtol+0x14e>
    205e:	2f e9       	ldi	r18, 0x9F	; 159
    2060:	21 0f       	add	r18, r17
    2062:	2a 31       	cpi	r18, 0x1A	; 26
    2064:	18 f5       	brcc	.+70     	; 0x20ac <strtol+0x190>
    2066:	29 ea       	ldi	r18, 0xA9	; 169
    2068:	32 2e       	mov	r3, r18
    206a:	31 0e       	add	r3, r17
    206c:	23 2d       	mov	r18, r3
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	2e 15       	cp	r18, r14
    2072:	3f 05       	cpc	r19, r15
    2074:	dc f4       	brge	.+54     	; 0x20ac <strtol+0x190>
    2076:	47 fd       	sbrc	r20, 7
    2078:	16 c0       	rjmp	.+44     	; 0x20a6 <strtol+0x18a>
    207a:	86 16       	cp	r8, r22
    207c:	97 06       	cpc	r9, r23
    207e:	a8 06       	cpc	r10, r24
    2080:	b9 06       	cpc	r11, r25
    2082:	70 f0       	brcs	.+28     	; 0x20a0 <strtol+0x184>
    2084:	a3 01       	movw	r20, r6
    2086:	92 01       	movw	r18, r4
    2088:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__mulsi3>
    208c:	63 0d       	add	r22, r3
    208e:	71 1d       	adc	r23, r1
    2090:	81 1d       	adc	r24, r1
    2092:	91 1d       	adc	r25, r1
    2094:	61 30       	cpi	r22, 0x01	; 1
    2096:	71 05       	cpc	r23, r1
    2098:	81 05       	cpc	r24, r1
    209a:	20 e8       	ldi	r18, 0x80	; 128
    209c:	92 07       	cpc	r25, r18
    209e:	10 f0       	brcs	.+4      	; 0x20a4 <strtol+0x188>
    20a0:	4f ef       	ldi	r20, 0xFF	; 255
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <strtol+0x18a>
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	21 96       	adiw	r28, 0x01	; 1
    20a8:	10 81       	ld	r17, Z
    20aa:	cb cf       	rjmp	.-106    	; 0x2042 <strtol+0x126>
    20ac:	20 2f       	mov	r18, r16
    20ae:	21 70       	andi	r18, 0x01	; 1
    20b0:	c1 14       	cp	r12, r1
    20b2:	d1 04       	cpc	r13, r1
    20b4:	71 f0       	breq	.+28     	; 0x20d2 <strtol+0x1b6>
    20b6:	44 23       	and	r20, r20
    20b8:	29 f0       	breq	.+10     	; 0x20c4 <strtol+0x1a8>
    20ba:	21 97       	sbiw	r28, 0x01	; 1
    20bc:	f6 01       	movw	r30, r12
    20be:	d1 83       	std	Z+1, r29	; 0x01
    20c0:	c0 83       	st	Z, r28
    20c2:	07 c0       	rjmp	.+14     	; 0x20d2 <strtol+0x1b6>
    20c4:	01 ff       	sbrs	r16, 1
    20c6:	19 c0       	rjmp	.+50     	; 0x20fa <strtol+0x1de>
    20c8:	22 97       	sbiw	r28, 0x02	; 2
    20ca:	f6 01       	movw	r30, r12
    20cc:	d1 83       	std	Z+1, r29	; 0x01
    20ce:	c0 83       	st	Z, r28
    20d0:	14 c0       	rjmp	.+40     	; 0x20fa <strtol+0x1de>
    20d2:	47 ff       	sbrs	r20, 7
    20d4:	12 c0       	rjmp	.+36     	; 0x20fa <strtol+0x1de>
    20d6:	22 23       	and	r18, r18
    20d8:	29 f0       	breq	.+10     	; 0x20e4 <strtol+0x1c8>
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e8       	ldi	r25, 0x80	; 128
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <strtol+0x1d0>
    20e4:	6f ef       	ldi	r22, 0xFF	; 255
    20e6:	7f ef       	ldi	r23, 0xFF	; 255
    20e8:	8f ef       	ldi	r24, 0xFF	; 255
    20ea:	9f e7       	ldi	r25, 0x7F	; 127
    20ec:	22 e2       	ldi	r18, 0x22	; 34
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	30 93 df 07 	sts	0x07DF, r19	; 0x8007df <errno+0x1>
    20f4:	20 93 de 07 	sts	0x07DE, r18	; 0x8007de <errno>
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <strtol+0x1f0>
    20fa:	22 23       	and	r18, r18
    20fc:	81 f0       	breq	.+32     	; 0x211e <strtol+0x202>
    20fe:	90 95       	com	r25
    2100:	80 95       	com	r24
    2102:	70 95       	com	r23
    2104:	61 95       	neg	r22
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	8f 4f       	sbci	r24, 0xFF	; 255
    210a:	9f 4f       	sbci	r25, 0xFF	; 255
    210c:	46 2f       	mov	r20, r22
    210e:	37 2f       	mov	r19, r23
    2110:	28 2f       	mov	r18, r24
    2112:	12 c0       	rjmp	.+36     	; 0x2138 <strtol+0x21c>
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0d c0       	rjmp	.+26     	; 0x2138 <strtol+0x21c>
    211e:	97 ff       	sbrs	r25, 7
    2120:	f5 cf       	rjmp	.-22     	; 0x210c <strtol+0x1f0>
    2122:	82 e2       	ldi	r24, 0x22	; 34
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <errno+0x1>
    212a:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <errno>
    212e:	6f ef       	ldi	r22, 0xFF	; 255
    2130:	7f ef       	ldi	r23, 0xFF	; 255
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	9f e7       	ldi	r25, 0x7F	; 127
    2136:	ea cf       	rjmp	.-44     	; 0x210c <strtol+0x1f0>
    2138:	64 2f       	mov	r22, r20
    213a:	73 2f       	mov	r23, r19
    213c:	82 2f       	mov	r24, r18
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	e1 e1       	ldi	r30, 0x11	; 17
    2144:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__+0x2>

00002148 <isspace>:
    2148:	91 11       	cpse	r25, r1
    214a:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__ctype_isfalse>
    214e:	80 32       	cpi	r24, 0x20	; 32
    2150:	19 f0       	breq	.+6      	; 0x2158 <isspace+0x10>
    2152:	89 50       	subi	r24, 0x09	; 9
    2154:	85 50       	subi	r24, 0x05	; 5
    2156:	c8 f7       	brcc	.-14     	; 0x214a <isspace+0x2>
    2158:	08 95       	ret

0000215a <strtok>:
    215a:	40 eb       	ldi	r20, 0xB0	; 176
    215c:	52 e0       	ldi	r21, 0x02	; 2
    215e:	0e 94 b9 10 	call	0x2172	; 0x2172 <strtok_r>
    2162:	08 95       	ret

00002164 <strcpy>:
    2164:	fb 01       	movw	r30, r22
    2166:	dc 01       	movw	r26, r24
    2168:	01 90       	ld	r0, Z+
    216a:	0d 92       	st	X+, r0
    216c:	00 20       	and	r0, r0
    216e:	e1 f7       	brne	.-8      	; 0x2168 <strcpy+0x4>
    2170:	08 95       	ret

00002172 <strtok_r>:
    2172:	fa 01       	movw	r30, r20
    2174:	a1 91       	ld	r26, Z+
    2176:	b0 81       	ld	r27, Z
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	19 f4       	brne	.+6      	; 0x2182 <strtok_r+0x10>
    217c:	10 97       	sbiw	r26, 0x00	; 0
    217e:	e1 f0       	breq	.+56     	; 0x21b8 <strtok_r+0x46>
    2180:	cd 01       	movw	r24, r26
    2182:	dc 01       	movw	r26, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0d 90       	ld	r0, X+
    2188:	00 20       	and	r0, r0
    218a:	11 f4       	brne	.+4      	; 0x2190 <strtok_r+0x1e>
    218c:	c0 01       	movw	r24, r0
    218e:	13 c0       	rjmp	.+38     	; 0x21b6 <strtok_r+0x44>
    2190:	fb 01       	movw	r30, r22
    2192:	21 91       	ld	r18, Z+
    2194:	22 23       	and	r18, r18
    2196:	19 f0       	breq	.+6      	; 0x219e <strtok_r+0x2c>
    2198:	20 15       	cp	r18, r0
    219a:	d9 f7       	brne	.-10     	; 0x2192 <strtok_r+0x20>
    219c:	f3 cf       	rjmp	.-26     	; 0x2184 <strtok_r+0x12>
    219e:	fb 01       	movw	r30, r22
    21a0:	21 91       	ld	r18, Z+
    21a2:	20 15       	cp	r18, r0
    21a4:	19 f4       	brne	.+6      	; 0x21ac <strtok_r+0x3a>
    21a6:	1e 92       	st	-X, r1
    21a8:	11 96       	adiw	r26, 0x01	; 1
    21aa:	06 c0       	rjmp	.+12     	; 0x21b8 <strtok_r+0x46>
    21ac:	22 23       	and	r18, r18
    21ae:	c1 f7       	brne	.-16     	; 0x21a0 <strtok_r+0x2e>
    21b0:	0d 90       	ld	r0, X+
    21b2:	00 20       	and	r0, r0
    21b4:	a1 f7       	brne	.-24     	; 0x219e <strtok_r+0x2c>
    21b6:	d0 01       	movw	r26, r0
    21b8:	fa 01       	movw	r30, r20
    21ba:	a1 93       	st	Z+, r26
    21bc:	b0 83       	st	Z, r27
    21be:	08 95       	ret

000021c0 <printf>:
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e6 ee       	ldi	r30, 0xE6	; 230
    21c6:	f0 e1       	ldi	r31, 0x10	; 16
    21c8:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x20>
    21cc:	ae 01       	movw	r20, r28
    21ce:	4b 5f       	subi	r20, 0xFB	; 251
    21d0:	5f 4f       	sbci	r21, 0xFF	; 255
    21d2:	fa 01       	movw	r30, r20
    21d4:	61 91       	ld	r22, Z+
    21d6:	71 91       	ld	r23, Z+
    21d8:	af 01       	movw	r20, r30
    21da:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <__iob+0x2>
    21de:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <__iob+0x3>
    21e2:	0e 94 6f 11 	call	0x22de	; 0x22de <vfprintf>
    21e6:	e2 e0       	ldi	r30, 0x02	; 2
    21e8:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x20>

000021ec <puts>:
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <__iob+0x2>
    21f8:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <__iob+0x3>
    21fc:	23 81       	ldd	r18, Z+3	; 0x03
    21fe:	21 ff       	sbrs	r18, 1
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <puts+0x4c>
    2202:	8c 01       	movw	r16, r24
    2204:	d0 e0       	ldi	r29, 0x00	; 0
    2206:	c0 e0       	ldi	r28, 0x00	; 0
    2208:	f8 01       	movw	r30, r16
    220a:	81 91       	ld	r24, Z+
    220c:	8f 01       	movw	r16, r30
    220e:	60 91 e2 07 	lds	r22, 0x07E2	; 0x8007e2 <__iob+0x2>
    2212:	70 91 e3 07 	lds	r23, 0x07E3	; 0x8007e3 <__iob+0x3>
    2216:	db 01       	movw	r26, r22
    2218:	18 96       	adiw	r26, 0x08	; 8
    221a:	ed 91       	ld	r30, X+
    221c:	fc 91       	ld	r31, X
    221e:	19 97       	sbiw	r26, 0x09	; 9
    2220:	88 23       	and	r24, r24
    2222:	31 f0       	breq	.+12     	; 0x2230 <puts+0x44>
    2224:	09 95       	icall
    2226:	89 2b       	or	r24, r25
    2228:	79 f3       	breq	.-34     	; 0x2208 <puts+0x1c>
    222a:	df ef       	ldi	r29, 0xFF	; 255
    222c:	cf ef       	ldi	r28, 0xFF	; 255
    222e:	ec cf       	rjmp	.-40     	; 0x2208 <puts+0x1c>
    2230:	8a e0       	ldi	r24, 0x0A	; 10
    2232:	09 95       	icall
    2234:	89 2b       	or	r24, r25
    2236:	19 f0       	breq	.+6      	; 0x223e <puts+0x52>
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	9f ef       	ldi	r25, 0xFF	; 255
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <puts+0x56>
    223e:	8d 2f       	mov	r24, r29
    2240:	9c 2f       	mov	r25, r28
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <snprintf>:
    224c:	ae e0       	ldi	r26, 0x0E	; 14
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ec e2       	ldi	r30, 0x2C	; 44
    2252:	f1 e1       	ldi	r31, 0x11	; 17
    2254:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__prologue_saves__+0x1c>
    2258:	0d 89       	ldd	r16, Y+21	; 0x15
    225a:	1e 89       	ldd	r17, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	26 e0       	ldi	r18, 0x06	; 6
    2262:	2c 83       	std	Y+4, r18	; 0x04
    2264:	1a 83       	std	Y+2, r17	; 0x02
    2266:	09 83       	std	Y+1, r16	; 0x01
    2268:	97 ff       	sbrs	r25, 7
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <snprintf+0x24>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e8       	ldi	r25, 0x80	; 128
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	ae 01       	movw	r20, r28
    2278:	45 5e       	subi	r20, 0xE5	; 229
    227a:	5f 4f       	sbci	r21, 0xFF	; 255
    227c:	69 8d       	ldd	r22, Y+25	; 0x19
    227e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2280:	ce 01       	movw	r24, r28
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	0e 94 6f 11 	call	0x22de	; 0x22de <vfprintf>
    2288:	4d 81       	ldd	r20, Y+5	; 0x05
    228a:	5e 81       	ldd	r21, Y+6	; 0x06
    228c:	57 fd       	sbrc	r21, 7
    228e:	0a c0       	rjmp	.+20     	; 0x22a4 <snprintf+0x58>
    2290:	2f 81       	ldd	r18, Y+7	; 0x07
    2292:	38 85       	ldd	r19, Y+8	; 0x08
    2294:	42 17       	cp	r20, r18
    2296:	53 07       	cpc	r21, r19
    2298:	0c f4       	brge	.+2      	; 0x229c <snprintf+0x50>
    229a:	9a 01       	movw	r18, r20
    229c:	f8 01       	movw	r30, r16
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	10 82       	st	Z, r1
    22a4:	2e 96       	adiw	r28, 0x0e	; 14
    22a6:	e4 e0       	ldi	r30, 0x04	; 4
    22a8:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__epilogue_restores__+0x1c>

000022ac <sscanf>:
    22ac:	ae e0       	ldi	r26, 0x0E	; 14
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	ec e5       	ldi	r30, 0x5C	; 92
    22b2:	f1 e1       	ldi	r31, 0x11	; 17
    22b4:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x20>
    22b8:	85 e0       	ldi	r24, 0x05	; 5
    22ba:	8c 83       	std	Y+4, r24	; 0x04
    22bc:	8b 89       	ldd	r24, Y+19	; 0x13
    22be:	9c 89       	ldd	r25, Y+20	; 0x14
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	ae 01       	movw	r20, r28
    22c6:	49 5e       	subi	r20, 0xE9	; 233
    22c8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ca:	6d 89       	ldd	r22, Y+21	; 0x15
    22cc:	7e 89       	ldd	r23, Y+22	; 0x16
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <vfscanf>
    22d6:	2e 96       	adiw	r28, 0x0e	; 14
    22d8:	e2 e0       	ldi	r30, 0x02	; 2
    22da:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x20>

000022de <vfprintf>:
    22de:	ab e0       	ldi	r26, 0x0B	; 11
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e5 e7       	ldi	r30, 0x75	; 117
    22e4:	f1 e1       	ldi	r31, 0x11	; 17
    22e6:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__prologue_saves__>
    22ea:	6c 01       	movw	r12, r24
    22ec:	7b 01       	movw	r14, r22
    22ee:	8a 01       	movw	r16, r20
    22f0:	fc 01       	movw	r30, r24
    22f2:	17 82       	std	Z+7, r1	; 0x07
    22f4:	16 82       	std	Z+6, r1	; 0x06
    22f6:	83 81       	ldd	r24, Z+3	; 0x03
    22f8:	81 ff       	sbrs	r24, 1
    22fa:	cc c1       	rjmp	.+920    	; 0x2694 <vfprintf+0x3b6>
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	3c 01       	movw	r6, r24
    2302:	f6 01       	movw	r30, r12
    2304:	93 81       	ldd	r25, Z+3	; 0x03
    2306:	f7 01       	movw	r30, r14
    2308:	93 fd       	sbrc	r25, 3
    230a:	85 91       	lpm	r24, Z+
    230c:	93 ff       	sbrs	r25, 3
    230e:	81 91       	ld	r24, Z+
    2310:	7f 01       	movw	r14, r30
    2312:	88 23       	and	r24, r24
    2314:	09 f4       	brne	.+2      	; 0x2318 <vfprintf+0x3a>
    2316:	ba c1       	rjmp	.+884    	; 0x268c <vfprintf+0x3ae>
    2318:	85 32       	cpi	r24, 0x25	; 37
    231a:	39 f4       	brne	.+14     	; 0x232a <vfprintf+0x4c>
    231c:	93 fd       	sbrc	r25, 3
    231e:	85 91       	lpm	r24, Z+
    2320:	93 ff       	sbrs	r25, 3
    2322:	81 91       	ld	r24, Z+
    2324:	7f 01       	movw	r14, r30
    2326:	85 32       	cpi	r24, 0x25	; 37
    2328:	29 f4       	brne	.+10     	; 0x2334 <vfprintf+0x56>
    232a:	b6 01       	movw	r22, r12
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    2332:	e7 cf       	rjmp	.-50     	; 0x2302 <vfprintf+0x24>
    2334:	91 2c       	mov	r9, r1
    2336:	21 2c       	mov	r2, r1
    2338:	31 2c       	mov	r3, r1
    233a:	ff e1       	ldi	r31, 0x1F	; 31
    233c:	f3 15       	cp	r31, r3
    233e:	d8 f0       	brcs	.+54     	; 0x2376 <vfprintf+0x98>
    2340:	8b 32       	cpi	r24, 0x2B	; 43
    2342:	79 f0       	breq	.+30     	; 0x2362 <vfprintf+0x84>
    2344:	38 f4       	brcc	.+14     	; 0x2354 <vfprintf+0x76>
    2346:	80 32       	cpi	r24, 0x20	; 32
    2348:	79 f0       	breq	.+30     	; 0x2368 <vfprintf+0x8a>
    234a:	83 32       	cpi	r24, 0x23	; 35
    234c:	a1 f4       	brne	.+40     	; 0x2376 <vfprintf+0x98>
    234e:	23 2d       	mov	r18, r3
    2350:	20 61       	ori	r18, 0x10	; 16
    2352:	1d c0       	rjmp	.+58     	; 0x238e <vfprintf+0xb0>
    2354:	8d 32       	cpi	r24, 0x2D	; 45
    2356:	61 f0       	breq	.+24     	; 0x2370 <vfprintf+0x92>
    2358:	80 33       	cpi	r24, 0x30	; 48
    235a:	69 f4       	brne	.+26     	; 0x2376 <vfprintf+0x98>
    235c:	23 2d       	mov	r18, r3
    235e:	21 60       	ori	r18, 0x01	; 1
    2360:	16 c0       	rjmp	.+44     	; 0x238e <vfprintf+0xb0>
    2362:	83 2d       	mov	r24, r3
    2364:	82 60       	ori	r24, 0x02	; 2
    2366:	38 2e       	mov	r3, r24
    2368:	e3 2d       	mov	r30, r3
    236a:	e4 60       	ori	r30, 0x04	; 4
    236c:	3e 2e       	mov	r3, r30
    236e:	2a c0       	rjmp	.+84     	; 0x23c4 <vfprintf+0xe6>
    2370:	f3 2d       	mov	r31, r3
    2372:	f8 60       	ori	r31, 0x08	; 8
    2374:	1d c0       	rjmp	.+58     	; 0x23b0 <vfprintf+0xd2>
    2376:	37 fc       	sbrc	r3, 7
    2378:	2d c0       	rjmp	.+90     	; 0x23d4 <vfprintf+0xf6>
    237a:	20 ed       	ldi	r18, 0xD0	; 208
    237c:	28 0f       	add	r18, r24
    237e:	2a 30       	cpi	r18, 0x0A	; 10
    2380:	40 f0       	brcs	.+16     	; 0x2392 <vfprintf+0xb4>
    2382:	8e 32       	cpi	r24, 0x2E	; 46
    2384:	b9 f4       	brne	.+46     	; 0x23b4 <vfprintf+0xd6>
    2386:	36 fc       	sbrc	r3, 6
    2388:	81 c1       	rjmp	.+770    	; 0x268c <vfprintf+0x3ae>
    238a:	23 2d       	mov	r18, r3
    238c:	20 64       	ori	r18, 0x40	; 64
    238e:	32 2e       	mov	r3, r18
    2390:	19 c0       	rjmp	.+50     	; 0x23c4 <vfprintf+0xe6>
    2392:	36 fe       	sbrs	r3, 6
    2394:	06 c0       	rjmp	.+12     	; 0x23a2 <vfprintf+0xc4>
    2396:	8a e0       	ldi	r24, 0x0A	; 10
    2398:	98 9e       	mul	r9, r24
    239a:	20 0d       	add	r18, r0
    239c:	11 24       	eor	r1, r1
    239e:	92 2e       	mov	r9, r18
    23a0:	11 c0       	rjmp	.+34     	; 0x23c4 <vfprintf+0xe6>
    23a2:	ea e0       	ldi	r30, 0x0A	; 10
    23a4:	2e 9e       	mul	r2, r30
    23a6:	20 0d       	add	r18, r0
    23a8:	11 24       	eor	r1, r1
    23aa:	22 2e       	mov	r2, r18
    23ac:	f3 2d       	mov	r31, r3
    23ae:	f0 62       	ori	r31, 0x20	; 32
    23b0:	3f 2e       	mov	r3, r31
    23b2:	08 c0       	rjmp	.+16     	; 0x23c4 <vfprintf+0xe6>
    23b4:	8c 36       	cpi	r24, 0x6C	; 108
    23b6:	21 f4       	brne	.+8      	; 0x23c0 <vfprintf+0xe2>
    23b8:	83 2d       	mov	r24, r3
    23ba:	80 68       	ori	r24, 0x80	; 128
    23bc:	38 2e       	mov	r3, r24
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <vfprintf+0xe6>
    23c0:	88 36       	cpi	r24, 0x68	; 104
    23c2:	41 f4       	brne	.+16     	; 0x23d4 <vfprintf+0xf6>
    23c4:	f7 01       	movw	r30, r14
    23c6:	93 fd       	sbrc	r25, 3
    23c8:	85 91       	lpm	r24, Z+
    23ca:	93 ff       	sbrs	r25, 3
    23cc:	81 91       	ld	r24, Z+
    23ce:	7f 01       	movw	r14, r30
    23d0:	81 11       	cpse	r24, r1
    23d2:	b3 cf       	rjmp	.-154    	; 0x233a <vfprintf+0x5c>
    23d4:	98 2f       	mov	r25, r24
    23d6:	9f 7d       	andi	r25, 0xDF	; 223
    23d8:	95 54       	subi	r25, 0x45	; 69
    23da:	93 30       	cpi	r25, 0x03	; 3
    23dc:	28 f4       	brcc	.+10     	; 0x23e8 <vfprintf+0x10a>
    23de:	0c 5f       	subi	r16, 0xFC	; 252
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	9f e3       	ldi	r25, 0x3F	; 63
    23e4:	99 83       	std	Y+1, r25	; 0x01
    23e6:	0d c0       	rjmp	.+26     	; 0x2402 <vfprintf+0x124>
    23e8:	83 36       	cpi	r24, 0x63	; 99
    23ea:	31 f0       	breq	.+12     	; 0x23f8 <vfprintf+0x11a>
    23ec:	83 37       	cpi	r24, 0x73	; 115
    23ee:	71 f0       	breq	.+28     	; 0x240c <vfprintf+0x12e>
    23f0:	83 35       	cpi	r24, 0x53	; 83
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <vfprintf+0x118>
    23f4:	59 c0       	rjmp	.+178    	; 0x24a8 <vfprintf+0x1ca>
    23f6:	21 c0       	rjmp	.+66     	; 0x243a <vfprintf+0x15c>
    23f8:	f8 01       	movw	r30, r16
    23fa:	80 81       	ld	r24, Z
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	0e 5f       	subi	r16, 0xFE	; 254
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	88 24       	eor	r8, r8
    2404:	83 94       	inc	r8
    2406:	91 2c       	mov	r9, r1
    2408:	53 01       	movw	r10, r6
    240a:	13 c0       	rjmp	.+38     	; 0x2432 <vfprintf+0x154>
    240c:	28 01       	movw	r4, r16
    240e:	f2 e0       	ldi	r31, 0x02	; 2
    2410:	4f 0e       	add	r4, r31
    2412:	51 1c       	adc	r5, r1
    2414:	f8 01       	movw	r30, r16
    2416:	a0 80       	ld	r10, Z
    2418:	b1 80       	ldd	r11, Z+1	; 0x01
    241a:	36 fe       	sbrs	r3, 6
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <vfprintf+0x146>
    241e:	69 2d       	mov	r22, r9
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <vfprintf+0x14a>
    2424:	6f ef       	ldi	r22, 0xFF	; 255
    2426:	7f ef       	ldi	r23, 0xFF	; 255
    2428:	c5 01       	movw	r24, r10
    242a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <strnlen>
    242e:	4c 01       	movw	r8, r24
    2430:	82 01       	movw	r16, r4
    2432:	f3 2d       	mov	r31, r3
    2434:	ff 77       	andi	r31, 0x7F	; 127
    2436:	3f 2e       	mov	r3, r31
    2438:	16 c0       	rjmp	.+44     	; 0x2466 <vfprintf+0x188>
    243a:	28 01       	movw	r4, r16
    243c:	22 e0       	ldi	r18, 0x02	; 2
    243e:	42 0e       	add	r4, r18
    2440:	51 1c       	adc	r5, r1
    2442:	f8 01       	movw	r30, r16
    2444:	a0 80       	ld	r10, Z
    2446:	b1 80       	ldd	r11, Z+1	; 0x01
    2448:	36 fe       	sbrs	r3, 6
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <vfprintf+0x174>
    244c:	69 2d       	mov	r22, r9
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <vfprintf+0x178>
    2452:	6f ef       	ldi	r22, 0xFF	; 255
    2454:	7f ef       	ldi	r23, 0xFF	; 255
    2456:	c5 01       	movw	r24, r10
    2458:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <strnlen_P>
    245c:	4c 01       	movw	r8, r24
    245e:	f3 2d       	mov	r31, r3
    2460:	f0 68       	ori	r31, 0x80	; 128
    2462:	3f 2e       	mov	r3, r31
    2464:	82 01       	movw	r16, r4
    2466:	33 fc       	sbrc	r3, 3
    2468:	1b c0       	rjmp	.+54     	; 0x24a0 <vfprintf+0x1c2>
    246a:	82 2d       	mov	r24, r2
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	88 16       	cp	r8, r24
    2470:	99 06       	cpc	r9, r25
    2472:	b0 f4       	brcc	.+44     	; 0x24a0 <vfprintf+0x1c2>
    2474:	b6 01       	movw	r22, r12
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    247e:	2a 94       	dec	r2
    2480:	f4 cf       	rjmp	.-24     	; 0x246a <vfprintf+0x18c>
    2482:	f5 01       	movw	r30, r10
    2484:	37 fc       	sbrc	r3, 7
    2486:	85 91       	lpm	r24, Z+
    2488:	37 fe       	sbrs	r3, 7
    248a:	81 91       	ld	r24, Z+
    248c:	5f 01       	movw	r10, r30
    248e:	b6 01       	movw	r22, r12
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    2496:	21 10       	cpse	r2, r1
    2498:	2a 94       	dec	r2
    249a:	21 e0       	ldi	r18, 0x01	; 1
    249c:	82 1a       	sub	r8, r18
    249e:	91 08       	sbc	r9, r1
    24a0:	81 14       	cp	r8, r1
    24a2:	91 04       	cpc	r9, r1
    24a4:	71 f7       	brne	.-36     	; 0x2482 <vfprintf+0x1a4>
    24a6:	e8 c0       	rjmp	.+464    	; 0x2678 <vfprintf+0x39a>
    24a8:	84 36       	cpi	r24, 0x64	; 100
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <vfprintf+0x1d2>
    24ac:	89 36       	cpi	r24, 0x69	; 105
    24ae:	41 f5       	brne	.+80     	; 0x2500 <vfprintf+0x222>
    24b0:	f8 01       	movw	r30, r16
    24b2:	37 fe       	sbrs	r3, 7
    24b4:	07 c0       	rjmp	.+14     	; 0x24c4 <vfprintf+0x1e6>
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	0c 5f       	subi	r16, 0xFC	; 252
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <vfprintf+0x1f6>
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	07 2e       	mov	r0, r23
    24ca:	00 0c       	add	r0, r0
    24cc:	88 0b       	sbc	r24, r24
    24ce:	99 0b       	sbc	r25, r25
    24d0:	0e 5f       	subi	r16, 0xFE	; 254
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	f3 2d       	mov	r31, r3
    24d6:	ff 76       	andi	r31, 0x6F	; 111
    24d8:	3f 2e       	mov	r3, r31
    24da:	97 ff       	sbrs	r25, 7
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <vfprintf+0x212>
    24de:	90 95       	com	r25
    24e0:	80 95       	com	r24
    24e2:	70 95       	com	r23
    24e4:	61 95       	neg	r22
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255
    24e8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	f0 68       	ori	r31, 0x80	; 128
    24ee:	3f 2e       	mov	r3, r31
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	a3 01       	movw	r20, r6
    24f6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__ultoa_invert>
    24fa:	88 2e       	mov	r8, r24
    24fc:	86 18       	sub	r8, r6
    24fe:	45 c0       	rjmp	.+138    	; 0x258a <vfprintf+0x2ac>
    2500:	85 37       	cpi	r24, 0x75	; 117
    2502:	31 f4       	brne	.+12     	; 0x2510 <vfprintf+0x232>
    2504:	23 2d       	mov	r18, r3
    2506:	2f 7e       	andi	r18, 0xEF	; 239
    2508:	b2 2e       	mov	r11, r18
    250a:	2a e0       	ldi	r18, 0x0A	; 10
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	25 c0       	rjmp	.+74     	; 0x255a <vfprintf+0x27c>
    2510:	93 2d       	mov	r25, r3
    2512:	99 7f       	andi	r25, 0xF9	; 249
    2514:	b9 2e       	mov	r11, r25
    2516:	8f 36       	cpi	r24, 0x6F	; 111
    2518:	c1 f0       	breq	.+48     	; 0x254a <vfprintf+0x26c>
    251a:	18 f4       	brcc	.+6      	; 0x2522 <vfprintf+0x244>
    251c:	88 35       	cpi	r24, 0x58	; 88
    251e:	79 f0       	breq	.+30     	; 0x253e <vfprintf+0x260>
    2520:	b5 c0       	rjmp	.+362    	; 0x268c <vfprintf+0x3ae>
    2522:	80 37       	cpi	r24, 0x70	; 112
    2524:	19 f0       	breq	.+6      	; 0x252c <vfprintf+0x24e>
    2526:	88 37       	cpi	r24, 0x78	; 120
    2528:	21 f0       	breq	.+8      	; 0x2532 <vfprintf+0x254>
    252a:	b0 c0       	rjmp	.+352    	; 0x268c <vfprintf+0x3ae>
    252c:	e9 2f       	mov	r30, r25
    252e:	e0 61       	ori	r30, 0x10	; 16
    2530:	be 2e       	mov	r11, r30
    2532:	b4 fe       	sbrs	r11, 4
    2534:	0d c0       	rjmp	.+26     	; 0x2550 <vfprintf+0x272>
    2536:	fb 2d       	mov	r31, r11
    2538:	f4 60       	ori	r31, 0x04	; 4
    253a:	bf 2e       	mov	r11, r31
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <vfprintf+0x272>
    253e:	34 fe       	sbrs	r3, 4
    2540:	0a c0       	rjmp	.+20     	; 0x2556 <vfprintf+0x278>
    2542:	29 2f       	mov	r18, r25
    2544:	26 60       	ori	r18, 0x06	; 6
    2546:	b2 2e       	mov	r11, r18
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <vfprintf+0x278>
    254a:	28 e0       	ldi	r18, 0x08	; 8
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	05 c0       	rjmp	.+10     	; 0x255a <vfprintf+0x27c>
    2550:	20 e1       	ldi	r18, 0x10	; 16
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	02 c0       	rjmp	.+4      	; 0x255a <vfprintf+0x27c>
    2556:	20 e1       	ldi	r18, 0x10	; 16
    2558:	32 e0       	ldi	r19, 0x02	; 2
    255a:	f8 01       	movw	r30, r16
    255c:	b7 fe       	sbrs	r11, 7
    255e:	07 c0       	rjmp	.+14     	; 0x256e <vfprintf+0x290>
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	0c 5f       	subi	r16, 0xFC	; 252
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	06 c0       	rjmp	.+12     	; 0x257a <vfprintf+0x29c>
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	0e 5f       	subi	r16, 0xFE	; 254
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	a3 01       	movw	r20, r6
    257c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__ultoa_invert>
    2580:	88 2e       	mov	r8, r24
    2582:	86 18       	sub	r8, r6
    2584:	fb 2d       	mov	r31, r11
    2586:	ff 77       	andi	r31, 0x7F	; 127
    2588:	3f 2e       	mov	r3, r31
    258a:	36 fe       	sbrs	r3, 6
    258c:	0d c0       	rjmp	.+26     	; 0x25a8 <vfprintf+0x2ca>
    258e:	23 2d       	mov	r18, r3
    2590:	2e 7f       	andi	r18, 0xFE	; 254
    2592:	a2 2e       	mov	r10, r18
    2594:	89 14       	cp	r8, r9
    2596:	58 f4       	brcc	.+22     	; 0x25ae <vfprintf+0x2d0>
    2598:	34 fe       	sbrs	r3, 4
    259a:	0b c0       	rjmp	.+22     	; 0x25b2 <vfprintf+0x2d4>
    259c:	32 fc       	sbrc	r3, 2
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <vfprintf+0x2d4>
    25a0:	83 2d       	mov	r24, r3
    25a2:	8e 7e       	andi	r24, 0xEE	; 238
    25a4:	a8 2e       	mov	r10, r24
    25a6:	05 c0       	rjmp	.+10     	; 0x25b2 <vfprintf+0x2d4>
    25a8:	b8 2c       	mov	r11, r8
    25aa:	a3 2c       	mov	r10, r3
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <vfprintf+0x2d6>
    25ae:	b8 2c       	mov	r11, r8
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <vfprintf+0x2d6>
    25b2:	b9 2c       	mov	r11, r9
    25b4:	a4 fe       	sbrs	r10, 4
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <vfprintf+0x2f8>
    25b8:	fe 01       	movw	r30, r28
    25ba:	e8 0d       	add	r30, r8
    25bc:	f1 1d       	adc	r31, r1
    25be:	80 81       	ld	r24, Z
    25c0:	80 33       	cpi	r24, 0x30	; 48
    25c2:	21 f4       	brne	.+8      	; 0x25cc <vfprintf+0x2ee>
    25c4:	9a 2d       	mov	r25, r10
    25c6:	99 7e       	andi	r25, 0xE9	; 233
    25c8:	a9 2e       	mov	r10, r25
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <vfprintf+0x300>
    25cc:	a2 fe       	sbrs	r10, 2
    25ce:	06 c0       	rjmp	.+12     	; 0x25dc <vfprintf+0x2fe>
    25d0:	b3 94       	inc	r11
    25d2:	b3 94       	inc	r11
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <vfprintf+0x300>
    25d6:	8a 2d       	mov	r24, r10
    25d8:	86 78       	andi	r24, 0x86	; 134
    25da:	09 f0       	breq	.+2      	; 0x25de <vfprintf+0x300>
    25dc:	b3 94       	inc	r11
    25de:	a3 fc       	sbrc	r10, 3
    25e0:	11 c0       	rjmp	.+34     	; 0x2604 <vfprintf+0x326>
    25e2:	a0 fe       	sbrs	r10, 0
    25e4:	06 c0       	rjmp	.+12     	; 0x25f2 <vfprintf+0x314>
    25e6:	b2 14       	cp	r11, r2
    25e8:	88 f4       	brcc	.+34     	; 0x260c <vfprintf+0x32e>
    25ea:	28 0c       	add	r2, r8
    25ec:	92 2c       	mov	r9, r2
    25ee:	9b 18       	sub	r9, r11
    25f0:	0e c0       	rjmp	.+28     	; 0x260e <vfprintf+0x330>
    25f2:	b2 14       	cp	r11, r2
    25f4:	60 f4       	brcc	.+24     	; 0x260e <vfprintf+0x330>
    25f6:	b6 01       	movw	r22, r12
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    2600:	b3 94       	inc	r11
    2602:	f7 cf       	rjmp	.-18     	; 0x25f2 <vfprintf+0x314>
    2604:	b2 14       	cp	r11, r2
    2606:	18 f4       	brcc	.+6      	; 0x260e <vfprintf+0x330>
    2608:	2b 18       	sub	r2, r11
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <vfprintf+0x332>
    260c:	98 2c       	mov	r9, r8
    260e:	21 2c       	mov	r2, r1
    2610:	a4 fe       	sbrs	r10, 4
    2612:	10 c0       	rjmp	.+32     	; 0x2634 <vfprintf+0x356>
    2614:	b6 01       	movw	r22, r12
    2616:	80 e3       	ldi	r24, 0x30	; 48
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    261e:	a2 fe       	sbrs	r10, 2
    2620:	17 c0       	rjmp	.+46     	; 0x2650 <vfprintf+0x372>
    2622:	a1 fc       	sbrc	r10, 1
    2624:	03 c0       	rjmp	.+6      	; 0x262c <vfprintf+0x34e>
    2626:	88 e7       	ldi	r24, 0x78	; 120
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <vfprintf+0x352>
    262c:	88 e5       	ldi	r24, 0x58	; 88
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	b6 01       	movw	r22, r12
    2632:	0c c0       	rjmp	.+24     	; 0x264c <vfprintf+0x36e>
    2634:	8a 2d       	mov	r24, r10
    2636:	86 78       	andi	r24, 0x86	; 134
    2638:	59 f0       	breq	.+22     	; 0x2650 <vfprintf+0x372>
    263a:	a1 fe       	sbrs	r10, 1
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <vfprintf+0x364>
    263e:	8b e2       	ldi	r24, 0x2B	; 43
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <vfprintf+0x366>
    2642:	80 e2       	ldi	r24, 0x20	; 32
    2644:	a7 fc       	sbrc	r10, 7
    2646:	8d e2       	ldi	r24, 0x2D	; 45
    2648:	b6 01       	movw	r22, r12
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    2650:	89 14       	cp	r8, r9
    2652:	38 f4       	brcc	.+14     	; 0x2662 <vfprintf+0x384>
    2654:	b6 01       	movw	r22, r12
    2656:	80 e3       	ldi	r24, 0x30	; 48
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    265e:	9a 94       	dec	r9
    2660:	f7 cf       	rjmp	.-18     	; 0x2650 <vfprintf+0x372>
    2662:	8a 94       	dec	r8
    2664:	f3 01       	movw	r30, r6
    2666:	e8 0d       	add	r30, r8
    2668:	f1 1d       	adc	r31, r1
    266a:	80 81       	ld	r24, Z
    266c:	b6 01       	movw	r22, r12
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    2674:	81 10       	cpse	r8, r1
    2676:	f5 cf       	rjmp	.-22     	; 0x2662 <vfprintf+0x384>
    2678:	22 20       	and	r2, r2
    267a:	09 f4       	brne	.+2      	; 0x267e <vfprintf+0x3a0>
    267c:	42 ce       	rjmp	.-892    	; 0x2302 <vfprintf+0x24>
    267e:	b6 01       	movw	r22, r12
    2680:	80 e2       	ldi	r24, 0x20	; 32
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <fputc>
    2688:	2a 94       	dec	r2
    268a:	f6 cf       	rjmp	.-20     	; 0x2678 <vfprintf+0x39a>
    268c:	f6 01       	movw	r30, r12
    268e:	86 81       	ldd	r24, Z+6	; 0x06
    2690:	97 81       	ldd	r25, Z+7	; 0x07
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <vfprintf+0x3ba>
    2694:	8f ef       	ldi	r24, 0xFF	; 255
    2696:	9f ef       	ldi	r25, 0xFF	; 255
    2698:	2b 96       	adiw	r28, 0x0b	; 11
    269a:	e2 e1       	ldi	r30, 0x12	; 18
    269c:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__epilogue_restores__>

000026a0 <putval>:
    26a0:	20 fd       	sbrc	r18, 0
    26a2:	09 c0       	rjmp	.+18     	; 0x26b6 <putval+0x16>
    26a4:	fc 01       	movw	r30, r24
    26a6:	23 fd       	sbrc	r18, 3
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <putval+0x14>
    26aa:	22 ff       	sbrs	r18, 2
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <putval+0x12>
    26ae:	73 83       	std	Z+3, r23	; 0x03
    26b0:	62 83       	std	Z+2, r22	; 0x02
    26b2:	51 83       	std	Z+1, r21	; 0x01
    26b4:	40 83       	st	Z, r20
    26b6:	08 95       	ret

000026b8 <mulacc>:
    26b8:	44 fd       	sbrc	r20, 4
    26ba:	17 c0       	rjmp	.+46     	; 0x26ea <mulacc+0x32>
    26bc:	46 fd       	sbrc	r20, 6
    26be:	17 c0       	rjmp	.+46     	; 0x26ee <mulacc+0x36>
    26c0:	ab 01       	movw	r20, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	da 01       	movw	r26, r20
    26c6:	fb 01       	movw	r30, r22
    26c8:	aa 0f       	add	r26, r26
    26ca:	bb 1f       	adc	r27, r27
    26cc:	ee 1f       	adc	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	10 94       	com	r1
    26d2:	d1 f7       	brne	.-12     	; 0x26c8 <mulacc+0x10>
    26d4:	4a 0f       	add	r20, r26
    26d6:	5b 1f       	adc	r21, r27
    26d8:	6e 1f       	adc	r22, r30
    26da:	7f 1f       	adc	r23, r31
    26dc:	cb 01       	movw	r24, r22
    26de:	ba 01       	movw	r22, r20
    26e0:	66 0f       	add	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 1f       	adc	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	09 c0       	rjmp	.+18     	; 0x26fc <mulacc+0x44>
    26ea:	33 e0       	ldi	r19, 0x03	; 3
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <mulacc+0x38>
    26ee:	34 e0       	ldi	r19, 0x04	; 4
    26f0:	66 0f       	add	r22, r22
    26f2:	77 1f       	adc	r23, r23
    26f4:	88 1f       	adc	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	31 50       	subi	r19, 0x01	; 1
    26fa:	d1 f7       	brne	.-12     	; 0x26f0 <mulacc+0x38>
    26fc:	62 0f       	add	r22, r18
    26fe:	71 1d       	adc	r23, r1
    2700:	81 1d       	adc	r24, r1
    2702:	91 1d       	adc	r25, r1
    2704:	08 95       	ret

00002706 <skip_spaces>:
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	8c 01       	movw	r16, r24
    2710:	c8 01       	movw	r24, r16
    2712:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2716:	ec 01       	movw	r28, r24
    2718:	97 fd       	sbrc	r25, 7
    271a:	08 c0       	rjmp	.+16     	; 0x272c <skip_spaces+0x26>
    271c:	0e 94 a4 10 	call	0x2148	; 0x2148 <isspace>
    2720:	89 2b       	or	r24, r25
    2722:	b1 f7       	brne	.-20     	; 0x2710 <skip_spaces+0xa>
    2724:	b8 01       	movw	r22, r16
    2726:	ce 01       	movw	r24, r28
    2728:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <ungetc>
    272c:	ce 01       	movw	r24, r28
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	08 95       	ret

00002738 <conv_int>:
    2738:	8f 92       	push	r8
    273a:	9f 92       	push	r9
    273c:	af 92       	push	r10
    273e:	bf 92       	push	r11
    2740:	ef 92       	push	r14
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	8c 01       	movw	r16, r24
    274e:	d6 2f       	mov	r29, r22
    2750:	7a 01       	movw	r14, r20
    2752:	b2 2e       	mov	r11, r18
    2754:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2758:	9c 01       	movw	r18, r24
    275a:	33 27       	eor	r19, r19
    275c:	2b 32       	cpi	r18, 0x2B	; 43
    275e:	31 05       	cpc	r19, r1
    2760:	31 f0       	breq	.+12     	; 0x276e <conv_int+0x36>
    2762:	2d 32       	cpi	r18, 0x2D	; 45
    2764:	31 05       	cpc	r19, r1
    2766:	61 f4       	brne	.+24     	; 0x2780 <conv_int+0x48>
    2768:	8b 2d       	mov	r24, r11
    276a:	80 68       	ori	r24, 0x80	; 128
    276c:	b8 2e       	mov	r11, r24
    276e:	d1 50       	subi	r29, 0x01	; 1
    2770:	11 f4       	brne	.+4      	; 0x2776 <conv_int+0x3e>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	68 c0       	rjmp	.+208    	; 0x2846 <conv_int+0x10e>
    2776:	c8 01       	movw	r24, r16
    2778:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    277c:	97 fd       	sbrc	r25, 7
    277e:	f9 cf       	rjmp	.-14     	; 0x2772 <conv_int+0x3a>
    2780:	cb 2d       	mov	r28, r11
    2782:	cd 7f       	andi	r28, 0xFD	; 253
    2784:	2b 2d       	mov	r18, r11
    2786:	20 73       	andi	r18, 0x30	; 48
    2788:	09 f5       	brne	.+66     	; 0x27cc <conv_int+0x94>
    278a:	80 33       	cpi	r24, 0x30	; 48
    278c:	f9 f4       	brne	.+62     	; 0x27cc <conv_int+0x94>
    278e:	aa 24       	eor	r10, r10
    2790:	aa 94       	dec	r10
    2792:	ad 0e       	add	r10, r29
    2794:	09 f4       	brne	.+2      	; 0x2798 <conv_int+0x60>
    2796:	43 c0       	rjmp	.+134    	; 0x281e <conv_int+0xe6>
    2798:	c8 01       	movw	r24, r16
    279a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    279e:	97 fd       	sbrc	r25, 7
    27a0:	3e c0       	rjmp	.+124    	; 0x281e <conv_int+0xe6>
    27a2:	9c 01       	movw	r18, r24
    27a4:	2f 7d       	andi	r18, 0xDF	; 223
    27a6:	33 27       	eor	r19, r19
    27a8:	28 35       	cpi	r18, 0x58	; 88
    27aa:	31 05       	cpc	r19, r1
    27ac:	49 f4       	brne	.+18     	; 0x27c0 <conv_int+0x88>
    27ae:	c2 64       	ori	r28, 0x42	; 66
    27b0:	d2 50       	subi	r29, 0x02	; 2
    27b2:	a9 f1       	breq	.+106    	; 0x281e <conv_int+0xe6>
    27b4:	c8 01       	movw	r24, r16
    27b6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    27ba:	97 ff       	sbrs	r25, 7
    27bc:	07 c0       	rjmp	.+14     	; 0x27cc <conv_int+0x94>
    27be:	2f c0       	rjmp	.+94     	; 0x281e <conv_int+0xe6>
    27c0:	b6 fe       	sbrs	r11, 6
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <conv_int+0x90>
    27c4:	c2 60       	ori	r28, 0x02	; 2
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <conv_int+0x92>
    27c8:	c2 61       	ori	r28, 0x12	; 18
    27ca:	da 2d       	mov	r29, r10
    27cc:	81 2c       	mov	r8, r1
    27ce:	91 2c       	mov	r9, r1
    27d0:	54 01       	movw	r10, r8
    27d2:	20 ed       	ldi	r18, 0xD0	; 208
    27d4:	28 0f       	add	r18, r24
    27d6:	28 30       	cpi	r18, 0x08	; 8
    27d8:	80 f0       	brcs	.+32     	; 0x27fa <conv_int+0xc2>
    27da:	c4 ff       	sbrs	r28, 4
    27dc:	04 c0       	rjmp	.+8      	; 0x27e6 <conv_int+0xae>
    27de:	b8 01       	movw	r22, r16
    27e0:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <ungetc>
    27e4:	19 c0       	rjmp	.+50     	; 0x2818 <conv_int+0xe0>
    27e6:	2a 30       	cpi	r18, 0x0A	; 10
    27e8:	40 f0       	brcs	.+16     	; 0x27fa <conv_int+0xc2>
    27ea:	c6 ff       	sbrs	r28, 6
    27ec:	f8 cf       	rjmp	.-16     	; 0x27de <conv_int+0xa6>
    27ee:	2f 7d       	andi	r18, 0xDF	; 223
    27f0:	3f ee       	ldi	r19, 0xEF	; 239
    27f2:	32 0f       	add	r19, r18
    27f4:	36 30       	cpi	r19, 0x06	; 6
    27f6:	98 f7       	brcc	.-26     	; 0x27de <conv_int+0xa6>
    27f8:	27 50       	subi	r18, 0x07	; 7
    27fa:	4c 2f       	mov	r20, r28
    27fc:	c5 01       	movw	r24, r10
    27fe:	b4 01       	movw	r22, r8
    2800:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <mulacc>
    2804:	4b 01       	movw	r8, r22
    2806:	5c 01       	movw	r10, r24
    2808:	c2 60       	ori	r28, 0x02	; 2
    280a:	d1 50       	subi	r29, 0x01	; 1
    280c:	59 f0       	breq	.+22     	; 0x2824 <conv_int+0xec>
    280e:	c8 01       	movw	r24, r16
    2810:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2814:	97 ff       	sbrs	r25, 7
    2816:	dd cf       	rjmp	.-70     	; 0x27d2 <conv_int+0x9a>
    2818:	c1 fd       	sbrc	r28, 1
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <conv_int+0xec>
    281c:	aa cf       	rjmp	.-172    	; 0x2772 <conv_int+0x3a>
    281e:	81 2c       	mov	r8, r1
    2820:	91 2c       	mov	r9, r1
    2822:	54 01       	movw	r10, r8
    2824:	c7 ff       	sbrs	r28, 7
    2826:	08 c0       	rjmp	.+16     	; 0x2838 <conv_int+0x100>
    2828:	b0 94       	com	r11
    282a:	a0 94       	com	r10
    282c:	90 94       	com	r9
    282e:	80 94       	com	r8
    2830:	81 1c       	adc	r8, r1
    2832:	91 1c       	adc	r9, r1
    2834:	a1 1c       	adc	r10, r1
    2836:	b1 1c       	adc	r11, r1
    2838:	2c 2f       	mov	r18, r28
    283a:	b5 01       	movw	r22, r10
    283c:	a4 01       	movw	r20, r8
    283e:	c7 01       	movw	r24, r14
    2840:	0e 94 50 13 	call	0x26a0	; 0x26a0 <putval>
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	8f 90       	pop	r8
    285a:	08 95       	ret

0000285c <conv_brk>:
    285c:	a0 e2       	ldi	r26, 0x20	; 32
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e4 e3       	ldi	r30, 0x34	; 52
    2862:	f4 e1       	ldi	r31, 0x14	; 20
    2864:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__+0x6>
    2868:	5c 01       	movw	r10, r24
    286a:	96 2e       	mov	r9, r22
    286c:	7a 01       	movw	r14, r20
    286e:	f9 01       	movw	r30, r18
    2870:	8e 01       	movw	r16, r28
    2872:	0f 5f       	subi	r16, 0xFF	; 255
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	68 01       	movw	r12, r16
    2878:	80 e2       	ldi	r24, 0x20	; 32
    287a:	d8 01       	movw	r26, r16
    287c:	1d 92       	st	X+, r1
    287e:	8a 95       	dec	r24
    2880:	e9 f7       	brne	.-6      	; 0x287c <conv_brk+0x20>
    2882:	d5 01       	movw	r26, r10
    2884:	13 96       	adiw	r26, 0x03	; 3
    2886:	8c 90       	ld	r8, X
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	61 2c       	mov	r6, r1
    288e:	71 2c       	mov	r7, r1
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	83 fc       	sbrc	r8, 3
    2898:	25 91       	lpm	r18, Z+
    289a:	83 fe       	sbrs	r8, 3
    289c:	21 91       	ld	r18, Z+
    289e:	8f 01       	movw	r16, r30
    28a0:	52 2e       	mov	r5, r18
    28a2:	21 11       	cpse	r18, r1
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <conv_brk+0x50>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	92 c0       	rjmp	.+292    	; 0x29d0 <conv_brk+0x174>
    28ac:	2e 35       	cpi	r18, 0x5E	; 94
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <conv_brk+0x58>
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	51 f1       	breq	.+84     	; 0x2908 <conv_brk+0xac>
    28b4:	43 2f       	mov	r20, r19
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	48 17       	cp	r20, r24
    28ba:	59 07       	cpc	r21, r25
    28bc:	3c f4       	brge	.+14     	; 0x28cc <conv_brk+0x70>
    28be:	2d 35       	cpi	r18, 0x5D	; 93
    28c0:	59 f1       	breq	.+86     	; 0x2918 <conv_brk+0xbc>
    28c2:	2d 32       	cpi	r18, 0x2D	; 45
    28c4:	19 f4       	brne	.+6      	; 0x28cc <conv_brk+0x70>
    28c6:	77 20       	and	r7, r7
    28c8:	09 f1       	breq	.+66     	; 0x290c <conv_brk+0xb0>
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <conv_brk+0x76>
    28cc:	77 20       	and	r7, r7
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <conv_brk+0x76>
    28d0:	6a c0       	rjmp	.+212    	; 0x29a6 <conv_brk+0x14a>
    28d2:	45 2d       	mov	r20, r5
    28d4:	46 95       	lsr	r20
    28d6:	46 95       	lsr	r20
    28d8:	46 95       	lsr	r20
    28da:	d6 01       	movw	r26, r12
    28dc:	a4 0f       	add	r26, r20
    28de:	b1 1d       	adc	r27, r1
    28e0:	45 2d       	mov	r20, r5
    28e2:	47 70       	andi	r20, 0x07	; 7
    28e4:	8b 01       	movw	r16, r22
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <conv_brk+0x90>
    28e8:	00 0f       	add	r16, r16
    28ea:	11 1f       	adc	r17, r17
    28ec:	4a 95       	dec	r20
    28ee:	e2 f7       	brpl	.-8      	; 0x28e8 <conv_brk+0x8c>
    28f0:	a8 01       	movw	r20, r16
    28f2:	5c 91       	ld	r21, X
    28f4:	45 2b       	or	r20, r21
    28f6:	4c 93       	st	X, r20
    28f8:	65 14       	cp	r6, r5
    28fa:	59 f0       	breq	.+22     	; 0x2912 <conv_brk+0xb6>
    28fc:	56 14       	cp	r5, r6
    28fe:	10 f4       	brcc	.+4      	; 0x2904 <conv_brk+0xa8>
    2900:	53 94       	inc	r5
    2902:	e7 cf       	rjmp	.-50     	; 0x28d2 <conv_brk+0x76>
    2904:	5a 94       	dec	r5
    2906:	e5 cf       	rjmp	.-54     	; 0x28d2 <conv_brk+0x76>
    2908:	31 e0       	ldi	r19, 0x01	; 1
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <conv_brk+0xb8>
    290c:	77 24       	eor	r7, r7
    290e:	73 94       	inc	r7
    2910:	01 c0       	rjmp	.+2      	; 0x2914 <conv_brk+0xb8>
    2912:	71 2c       	mov	r7, r1
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	bf cf       	rjmp	.-130    	; 0x2896 <conv_brk+0x3a>
    2918:	77 20       	and	r7, r7
    291a:	19 f0       	breq	.+6      	; 0x2922 <conv_brk+0xc6>
    291c:	8e 81       	ldd	r24, Y+6	; 0x06
    291e:	80 62       	ori	r24, 0x20	; 32
    2920:	8e 83       	std	Y+6, r24	; 0x06
    2922:	31 11       	cpse	r19, r1
    2924:	03 c0       	rjmp	.+6      	; 0x292c <conv_brk+0xd0>
    2926:	88 24       	eor	r8, r8
    2928:	83 94       	inc	r8
    292a:	17 c0       	rjmp	.+46     	; 0x295a <conv_brk+0xfe>
    292c:	f6 01       	movw	r30, r12
    292e:	9e 01       	movw	r18, r28
    2930:	2f 5d       	subi	r18, 0xDF	; 223
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	80 95       	com	r24
    2938:	81 93       	st	Z+, r24
    293a:	2e 17       	cp	r18, r30
    293c:	3f 07       	cpc	r19, r31
    293e:	d1 f7       	brne	.-12     	; 0x2934 <conv_brk+0xd8>
    2940:	f2 cf       	rjmp	.-28     	; 0x2926 <conv_brk+0xca>
    2942:	e1 14       	cp	r14, r1
    2944:	f1 04       	cpc	r15, r1
    2946:	29 f0       	breq	.+10     	; 0x2952 <conv_brk+0xf6>
    2948:	d7 01       	movw	r26, r14
    294a:	8c 93       	st	X, r24
    294c:	f7 01       	movw	r30, r14
    294e:	31 96       	adiw	r30, 0x01	; 1
    2950:	7f 01       	movw	r14, r30
    2952:	9a 94       	dec	r9
    2954:	81 2c       	mov	r8, r1
    2956:	99 20       	and	r9, r9
    2958:	f9 f0       	breq	.+62     	; 0x2998 <conv_brk+0x13c>
    295a:	c5 01       	movw	r24, r10
    295c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2960:	97 fd       	sbrc	r25, 7
    2962:	18 c0       	rjmp	.+48     	; 0x2994 <conv_brk+0x138>
    2964:	fc 01       	movw	r30, r24
    2966:	ff 27       	eor	r31, r31
    2968:	23 e0       	ldi	r18, 0x03	; 3
    296a:	f5 95       	asr	r31
    296c:	e7 95       	ror	r30
    296e:	2a 95       	dec	r18
    2970:	e1 f7       	brne	.-8      	; 0x296a <conv_brk+0x10e>
    2972:	ec 0d       	add	r30, r12
    2974:	fd 1d       	adc	r31, r13
    2976:	20 81       	ld	r18, Z
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	ac 01       	movw	r20, r24
    297c:	47 70       	andi	r20, 0x07	; 7
    297e:	55 27       	eor	r21, r21
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <conv_brk+0x12a>
    2982:	35 95       	asr	r19
    2984:	27 95       	ror	r18
    2986:	4a 95       	dec	r20
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <conv_brk+0x126>
    298a:	20 fd       	sbrc	r18, 0
    298c:	da cf       	rjmp	.-76     	; 0x2942 <conv_brk+0xe6>
    298e:	b5 01       	movw	r22, r10
    2990:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <ungetc>
    2994:	81 10       	cpse	r8, r1
    2996:	87 cf       	rjmp	.-242    	; 0x28a6 <conv_brk+0x4a>
    2998:	e1 14       	cp	r14, r1
    299a:	f1 04       	cpc	r15, r1
    299c:	11 f0       	breq	.+4      	; 0x29a2 <conv_brk+0x146>
    299e:	d7 01       	movw	r26, r14
    29a0:	1c 92       	st	X, r1
    29a2:	c8 01       	movw	r24, r16
    29a4:	15 c0       	rjmp	.+42     	; 0x29d0 <conv_brk+0x174>
    29a6:	42 2f       	mov	r20, r18
    29a8:	46 95       	lsr	r20
    29aa:	46 95       	lsr	r20
    29ac:	46 95       	lsr	r20
    29ae:	d6 01       	movw	r26, r12
    29b0:	a4 0f       	add	r26, r20
    29b2:	b1 1d       	adc	r27, r1
    29b4:	42 2f       	mov	r20, r18
    29b6:	47 70       	andi	r20, 0x07	; 7
    29b8:	8b 01       	movw	r16, r22
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <conv_brk+0x164>
    29bc:	00 0f       	add	r16, r16
    29be:	11 1f       	adc	r17, r17
    29c0:	4a 95       	dec	r20
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <conv_brk+0x160>
    29c4:	a8 01       	movw	r20, r16
    29c6:	5c 91       	ld	r21, X
    29c8:	45 2b       	or	r20, r21
    29ca:	4c 93       	st	X, r20
    29cc:	62 2e       	mov	r6, r18
    29ce:	a2 cf       	rjmp	.-188    	; 0x2914 <conv_brk+0xb8>
    29d0:	a0 96       	adiw	r28, 0x20	; 32
    29d2:	ef e0       	ldi	r30, 0x0F	; 15
    29d4:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__+0x6>

000029d8 <vfscanf>:
    29d8:	a0 e0       	ldi	r26, 0x00	; 0
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e2 ef       	ldi	r30, 0xF2	; 242
    29de:	f4 e1       	ldi	r31, 0x14	; 20
    29e0:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__+0x6>
    29e4:	6c 01       	movw	r12, r24
    29e6:	eb 01       	movw	r28, r22
    29e8:	5a 01       	movw	r10, r20
    29ea:	fc 01       	movw	r30, r24
    29ec:	17 82       	std	Z+7, r1	; 0x07
    29ee:	16 82       	std	Z+6, r1	; 0x06
    29f0:	51 2c       	mov	r5, r1
    29f2:	f6 01       	movw	r30, r12
    29f4:	e3 80       	ldd	r14, Z+3	; 0x03
    29f6:	fe 01       	movw	r30, r28
    29f8:	e3 fc       	sbrc	r14, 3
    29fa:	85 91       	lpm	r24, Z+
    29fc:	e3 fe       	sbrs	r14, 3
    29fe:	81 91       	ld	r24, Z+
    2a00:	18 2f       	mov	r17, r24
    2a02:	ef 01       	movw	r28, r30
    2a04:	88 23       	and	r24, r24
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <vfscanf+0x32>
    2a08:	ee c0       	rjmp	.+476    	; 0x2be6 <vfscanf+0x20e>
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 a4 10 	call	0x2148	; 0x2148 <isspace>
    2a10:	89 2b       	or	r24, r25
    2a12:	21 f0       	breq	.+8      	; 0x2a1c <vfscanf+0x44>
    2a14:	c6 01       	movw	r24, r12
    2a16:	0e 94 83 13 	call	0x2706	; 0x2706 <skip_spaces>
    2a1a:	eb cf       	rjmp	.-42     	; 0x29f2 <vfscanf+0x1a>
    2a1c:	15 32       	cpi	r17, 0x25	; 37
    2a1e:	41 f4       	brne	.+16     	; 0x2a30 <vfscanf+0x58>
    2a20:	fe 01       	movw	r30, r28
    2a22:	e3 fc       	sbrc	r14, 3
    2a24:	15 91       	lpm	r17, Z+
    2a26:	e3 fe       	sbrs	r14, 3
    2a28:	11 91       	ld	r17, Z+
    2a2a:	ef 01       	movw	r28, r30
    2a2c:	15 32       	cpi	r17, 0x25	; 37
    2a2e:	81 f4       	brne	.+32     	; 0x2a50 <vfscanf+0x78>
    2a30:	c6 01       	movw	r24, r12
    2a32:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2a36:	97 fd       	sbrc	r25, 7
    2a38:	d4 c0       	rjmp	.+424    	; 0x2be2 <vfscanf+0x20a>
    2a3a:	41 2f       	mov	r20, r17
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	9c 01       	movw	r18, r24
    2a40:	33 27       	eor	r19, r19
    2a42:	24 17       	cp	r18, r20
    2a44:	35 07       	cpc	r19, r21
    2a46:	a9 f2       	breq	.-86     	; 0x29f2 <vfscanf+0x1a>
    2a48:	b6 01       	movw	r22, r12
    2a4a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <ungetc>
    2a4e:	cb c0       	rjmp	.+406    	; 0x2be6 <vfscanf+0x20e>
    2a50:	1a 32       	cpi	r17, 0x2A	; 42
    2a52:	39 f4       	brne	.+14     	; 0x2a62 <vfscanf+0x8a>
    2a54:	e3 fc       	sbrc	r14, 3
    2a56:	15 91       	lpm	r17, Z+
    2a58:	e3 fe       	sbrs	r14, 3
    2a5a:	11 91       	ld	r17, Z+
    2a5c:	ef 01       	movw	r28, r30
    2a5e:	01 e0       	ldi	r16, 0x01	; 1
    2a60:	01 c0       	rjmp	.+2      	; 0x2a64 <vfscanf+0x8c>
    2a62:	00 e0       	ldi	r16, 0x00	; 0
    2a64:	f1 2c       	mov	r15, r1
    2a66:	20 ed       	ldi	r18, 0xD0	; 208
    2a68:	21 0f       	add	r18, r17
    2a6a:	2a 30       	cpi	r18, 0x0A	; 10
    2a6c:	80 f4       	brcc	.+32     	; 0x2a8e <vfscanf+0xb6>
    2a6e:	02 60       	ori	r16, 0x02	; 2
    2a70:	6f 2d       	mov	r22, r15
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	40 e2       	ldi	r20, 0x20	; 32
    2a7a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <mulacc>
    2a7e:	f6 2e       	mov	r15, r22
    2a80:	fe 01       	movw	r30, r28
    2a82:	e3 fc       	sbrc	r14, 3
    2a84:	15 91       	lpm	r17, Z+
    2a86:	e3 fe       	sbrs	r14, 3
    2a88:	11 91       	ld	r17, Z+
    2a8a:	ef 01       	movw	r28, r30
    2a8c:	ec cf       	rjmp	.-40     	; 0x2a66 <vfscanf+0x8e>
    2a8e:	01 ff       	sbrs	r16, 1
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <vfscanf+0xc0>
    2a92:	f1 10       	cpse	r15, r1
    2a94:	03 c0       	rjmp	.+6      	; 0x2a9c <vfscanf+0xc4>
    2a96:	a7 c0       	rjmp	.+334    	; 0x2be6 <vfscanf+0x20e>
    2a98:	ff 24       	eor	r15, r15
    2a9a:	fa 94       	dec	r15
    2a9c:	18 36       	cpi	r17, 0x68	; 104
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <vfscanf+0xce>
    2aa0:	1c 36       	cpi	r17, 0x6C	; 108
    2aa2:	51 f0       	breq	.+20     	; 0x2ab8 <vfscanf+0xe0>
    2aa4:	10 c0       	rjmp	.+32     	; 0x2ac6 <vfscanf+0xee>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e3 fc       	sbrc	r14, 3
    2aaa:	15 91       	lpm	r17, Z+
    2aac:	e3 fe       	sbrs	r14, 3
    2aae:	11 91       	ld	r17, Z+
    2ab0:	ef 01       	movw	r28, r30
    2ab2:	18 36       	cpi	r17, 0x68	; 104
    2ab4:	41 f4       	brne	.+16     	; 0x2ac6 <vfscanf+0xee>
    2ab6:	08 60       	ori	r16, 0x08	; 8
    2ab8:	04 60       	ori	r16, 0x04	; 4
    2aba:	fe 01       	movw	r30, r28
    2abc:	e3 fc       	sbrc	r14, 3
    2abe:	15 91       	lpm	r17, Z+
    2ac0:	e3 fe       	sbrs	r14, 3
    2ac2:	11 91       	ld	r17, Z+
    2ac4:	ef 01       	movw	r28, r30
    2ac6:	11 23       	and	r17, r17
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <vfscanf+0xf4>
    2aca:	8d c0       	rjmp	.+282    	; 0x2be6 <vfscanf+0x20e>
    2acc:	61 2f       	mov	r22, r17
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	84 e5       	ldi	r24, 0x54	; 84
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <strchr_P>
    2ad8:	89 2b       	or	r24, r25
    2ada:	09 f4       	brne	.+2      	; 0x2ade <vfscanf+0x106>
    2adc:	84 c0       	rjmp	.+264    	; 0x2be6 <vfscanf+0x20e>
    2ade:	00 fd       	sbrc	r16, 0
    2ae0:	07 c0       	rjmp	.+14     	; 0x2af0 <vfscanf+0x118>
    2ae2:	f5 01       	movw	r30, r10
    2ae4:	80 80       	ld	r8, Z
    2ae6:	91 80       	ldd	r9, Z+1	; 0x01
    2ae8:	c5 01       	movw	r24, r10
    2aea:	02 96       	adiw	r24, 0x02	; 2
    2aec:	5c 01       	movw	r10, r24
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <vfscanf+0x11c>
    2af0:	81 2c       	mov	r8, r1
    2af2:	91 2c       	mov	r9, r1
    2af4:	1e 36       	cpi	r17, 0x6E	; 110
    2af6:	51 f4       	brne	.+20     	; 0x2b0c <vfscanf+0x134>
    2af8:	f6 01       	movw	r30, r12
    2afa:	46 81       	ldd	r20, Z+6	; 0x06
    2afc:	57 81       	ldd	r21, Z+7	; 0x07
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	20 2f       	mov	r18, r16
    2b04:	c4 01       	movw	r24, r8
    2b06:	0e 94 50 13 	call	0x26a0	; 0x26a0 <putval>
    2b0a:	73 cf       	rjmp	.-282    	; 0x29f2 <vfscanf+0x1a>
    2b0c:	13 36       	cpi	r17, 0x63	; 99
    2b0e:	a9 f4       	brne	.+42     	; 0x2b3a <vfscanf+0x162>
    2b10:	01 fd       	sbrc	r16, 1
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <vfscanf+0x140>
    2b14:	ff 24       	eor	r15, r15
    2b16:	f3 94       	inc	r15
    2b18:	c6 01       	movw	r24, r12
    2b1a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2b1e:	97 fd       	sbrc	r25, 7
    2b20:	60 c0       	rjmp	.+192    	; 0x2be2 <vfscanf+0x20a>
    2b22:	81 14       	cp	r8, r1
    2b24:	91 04       	cpc	r9, r1
    2b26:	29 f0       	breq	.+10     	; 0x2b32 <vfscanf+0x15a>
    2b28:	f4 01       	movw	r30, r8
    2b2a:	80 83       	st	Z, r24
    2b2c:	c4 01       	movw	r24, r8
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	4c 01       	movw	r8, r24
    2b32:	fa 94       	dec	r15
    2b34:	f1 10       	cpse	r15, r1
    2b36:	f0 cf       	rjmp	.-32     	; 0x2b18 <vfscanf+0x140>
    2b38:	50 c0       	rjmp	.+160    	; 0x2bda <vfscanf+0x202>
    2b3a:	1b 35       	cpi	r17, 0x5B	; 91
    2b3c:	59 f4       	brne	.+22     	; 0x2b54 <vfscanf+0x17c>
    2b3e:	9e 01       	movw	r18, r28
    2b40:	a4 01       	movw	r20, r8
    2b42:	6f 2d       	mov	r22, r15
    2b44:	c6 01       	movw	r24, r12
    2b46:	0e 94 2e 14 	call	0x285c	; 0x285c <conv_brk>
    2b4a:	ec 01       	movw	r28, r24
    2b4c:	89 2b       	or	r24, r25
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <vfscanf+0x17a>
    2b50:	44 c0       	rjmp	.+136    	; 0x2bda <vfscanf+0x202>
    2b52:	3e c0       	rjmp	.+124    	; 0x2bd0 <vfscanf+0x1f8>
    2b54:	c6 01       	movw	r24, r12
    2b56:	0e 94 83 13 	call	0x2706	; 0x2706 <skip_spaces>
    2b5a:	97 fd       	sbrc	r25, 7
    2b5c:	42 c0       	rjmp	.+132    	; 0x2be2 <vfscanf+0x20a>
    2b5e:	1f 36       	cpi	r17, 0x6F	; 111
    2b60:	61 f1       	breq	.+88     	; 0x2bba <vfscanf+0x1e2>
    2b62:	28 f4       	brcc	.+10     	; 0x2b6e <vfscanf+0x196>
    2b64:	14 36       	cpi	r17, 0x64	; 100
    2b66:	39 f1       	breq	.+78     	; 0x2bb6 <vfscanf+0x1de>
    2b68:	19 36       	cpi	r17, 0x69	; 105
    2b6a:	51 f1       	breq	.+84     	; 0x2bc0 <vfscanf+0x1e8>
    2b6c:	28 c0       	rjmp	.+80     	; 0x2bbe <vfscanf+0x1e6>
    2b6e:	13 37       	cpi	r17, 0x73	; 115
    2b70:	71 f0       	breq	.+28     	; 0x2b8e <vfscanf+0x1b6>
    2b72:	15 37       	cpi	r17, 0x75	; 117
    2b74:	01 f1       	breq	.+64     	; 0x2bb6 <vfscanf+0x1de>
    2b76:	23 c0       	rjmp	.+70     	; 0x2bbe <vfscanf+0x1e6>
    2b78:	81 14       	cp	r8, r1
    2b7a:	91 04       	cpc	r9, r1
    2b7c:	29 f0       	breq	.+10     	; 0x2b88 <vfscanf+0x1b0>
    2b7e:	f4 01       	movw	r30, r8
    2b80:	60 82       	st	Z, r6
    2b82:	c4 01       	movw	r24, r8
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	4c 01       	movw	r8, r24
    2b88:	fa 94       	dec	r15
    2b8a:	ff 20       	and	r15, r15
    2b8c:	71 f0       	breq	.+28     	; 0x2baa <vfscanf+0x1d2>
    2b8e:	c6 01       	movw	r24, r12
    2b90:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fgetc>
    2b94:	3c 01       	movw	r6, r24
    2b96:	97 fd       	sbrc	r25, 7
    2b98:	08 c0       	rjmp	.+16     	; 0x2baa <vfscanf+0x1d2>
    2b9a:	0e 94 a4 10 	call	0x2148	; 0x2148 <isspace>
    2b9e:	89 2b       	or	r24, r25
    2ba0:	59 f3       	breq	.-42     	; 0x2b78 <vfscanf+0x1a0>
    2ba2:	b6 01       	movw	r22, r12
    2ba4:	c3 01       	movw	r24, r6
    2ba6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <ungetc>
    2baa:	81 14       	cp	r8, r1
    2bac:	91 04       	cpc	r9, r1
    2bae:	a9 f0       	breq	.+42     	; 0x2bda <vfscanf+0x202>
    2bb0:	f4 01       	movw	r30, r8
    2bb2:	10 82       	st	Z, r1
    2bb4:	12 c0       	rjmp	.+36     	; 0x2bda <vfscanf+0x202>
    2bb6:	00 62       	ori	r16, 0x20	; 32
    2bb8:	03 c0       	rjmp	.+6      	; 0x2bc0 <vfscanf+0x1e8>
    2bba:	00 61       	ori	r16, 0x10	; 16
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <vfscanf+0x1e8>
    2bbe:	00 64       	ori	r16, 0x40	; 64
    2bc0:	20 2f       	mov	r18, r16
    2bc2:	a4 01       	movw	r20, r8
    2bc4:	6f 2d       	mov	r22, r15
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	0e 94 9c 13 	call	0x2738	; 0x2738 <conv_int>
    2bcc:	81 11       	cpse	r24, r1
    2bce:	05 c0       	rjmp	.+10     	; 0x2bda <vfscanf+0x202>
    2bd0:	f6 01       	movw	r30, r12
    2bd2:	83 81       	ldd	r24, Z+3	; 0x03
    2bd4:	80 73       	andi	r24, 0x30	; 48
    2bd6:	29 f4       	brne	.+10     	; 0x2be2 <vfscanf+0x20a>
    2bd8:	06 c0       	rjmp	.+12     	; 0x2be6 <vfscanf+0x20e>
    2bda:	00 fd       	sbrc	r16, 0
    2bdc:	0a cf       	rjmp	.-492    	; 0x29f2 <vfscanf+0x1a>
    2bde:	53 94       	inc	r5
    2be0:	08 cf       	rjmp	.-496    	; 0x29f2 <vfscanf+0x1a>
    2be2:	55 20       	and	r5, r5
    2be4:	19 f0       	breq	.+6      	; 0x2bec <vfscanf+0x214>
    2be6:	85 2d       	mov	r24, r5
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <vfscanf+0x218>
    2bec:	8f ef       	ldi	r24, 0xFF	; 255
    2bee:	9f ef       	ldi	r25, 0xFF	; 255
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	ef e0       	ldi	r30, 0x0F	; 15
    2bf6:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__+0x6>

00002bfa <__ctype_isfalse>:
    2bfa:	99 27       	eor	r25, r25
    2bfc:	88 27       	eor	r24, r24

00002bfe <__ctype_istrue>:
    2bfe:	08 95       	ret

00002c00 <strchr_P>:
    2c00:	fc 01       	movw	r30, r24
    2c02:	05 90       	lpm	r0, Z+
    2c04:	06 16       	cp	r0, r22
    2c06:	21 f0       	breq	.+8      	; 0x2c10 <strchr_P+0x10>
    2c08:	00 20       	and	r0, r0
    2c0a:	d9 f7       	brne	.-10     	; 0x2c02 <strchr_P+0x2>
    2c0c:	c0 01       	movw	r24, r0
    2c0e:	08 95       	ret
    2c10:	31 97       	sbiw	r30, 0x01	; 1
    2c12:	cf 01       	movw	r24, r30
    2c14:	08 95       	ret

00002c16 <strnlen_P>:
    2c16:	fc 01       	movw	r30, r24
    2c18:	05 90       	lpm	r0, Z+
    2c1a:	61 50       	subi	r22, 0x01	; 1
    2c1c:	70 40       	sbci	r23, 0x00	; 0
    2c1e:	01 10       	cpse	r0, r1
    2c20:	d8 f7       	brcc	.-10     	; 0x2c18 <strnlen_P+0x2>
    2c22:	80 95       	com	r24
    2c24:	90 95       	com	r25
    2c26:	8e 0f       	add	r24, r30
    2c28:	9f 1f       	adc	r25, r31
    2c2a:	08 95       	ret

00002c2c <strnlen>:
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	61 50       	subi	r22, 0x01	; 1
    2c30:	70 40       	sbci	r23, 0x00	; 0
    2c32:	01 90       	ld	r0, Z+
    2c34:	01 10       	cpse	r0, r1
    2c36:	d8 f7       	brcc	.-10     	; 0x2c2e <strnlen+0x2>
    2c38:	80 95       	com	r24
    2c3a:	90 95       	com	r25
    2c3c:	8e 0f       	add	r24, r30
    2c3e:	9f 1f       	adc	r25, r31
    2c40:	08 95       	ret

00002c42 <fgetc>:
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	ec 01       	movw	r28, r24
    2c48:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4a:	20 ff       	sbrs	r18, 0
    2c4c:	33 c0       	rjmp	.+102    	; 0x2cb4 <fgetc+0x72>
    2c4e:	26 ff       	sbrs	r18, 6
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <fgetc+0x24>
    2c52:	2f 7b       	andi	r18, 0xBF	; 191
    2c54:	2b 83       	std	Y+3, r18	; 0x03
    2c56:	8e 81       	ldd	r24, Y+6	; 0x06
    2c58:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	9f 83       	std	Y+7, r25	; 0x07
    2c5e:	8e 83       	std	Y+6, r24	; 0x06
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	29 c0       	rjmp	.+82     	; 0x2cb8 <fgetc+0x76>
    2c66:	22 ff       	sbrs	r18, 2
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <fgetc+0x46>
    2c6a:	e8 81       	ld	r30, Y
    2c6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c6e:	80 81       	ld	r24, Z
    2c70:	08 2e       	mov	r0, r24
    2c72:	00 0c       	add	r0, r0
    2c74:	99 0b       	sbc	r25, r25
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	19 f4       	brne	.+6      	; 0x2c80 <fgetc+0x3e>
    2c7a:	20 62       	ori	r18, 0x20	; 32
    2c7c:	2b 83       	std	Y+3, r18	; 0x03
    2c7e:	1a c0       	rjmp	.+52     	; 0x2cb4 <fgetc+0x72>
    2c80:	31 96       	adiw	r30, 0x01	; 1
    2c82:	f9 83       	std	Y+1, r31	; 0x01
    2c84:	e8 83       	st	Y, r30
    2c86:	0e c0       	rjmp	.+28     	; 0x2ca4 <fgetc+0x62>
    2c88:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c8a:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c8c:	09 95       	icall
    2c8e:	97 ff       	sbrs	r25, 7
    2c90:	09 c0       	rjmp	.+18     	; 0x2ca4 <fgetc+0x62>
    2c92:	2b 81       	ldd	r18, Y+3	; 0x03
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	11 f0       	breq	.+4      	; 0x2c9c <fgetc+0x5a>
    2c98:	80 e2       	ldi	r24, 0x20	; 32
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <fgetc+0x5c>
    2c9c:	80 e1       	ldi	r24, 0x10	; 16
    2c9e:	82 2b       	or	r24, r18
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <fgetc+0x72>
    2ca4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ca6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ca8:	2f 5f       	subi	r18, 0xFF	; 255
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	3f 83       	std	Y+7, r19	; 0x07
    2cae:	2e 83       	std	Y+6, r18	; 0x06
    2cb0:	99 27       	eor	r25, r25
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <fgetc+0x76>
    2cb4:	8f ef       	ldi	r24, 0xFF	; 255
    2cb6:	9f ef       	ldi	r25, 0xFF	; 255
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <fputc>:
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	23 81       	ldd	r18, Z+3	; 0x03
    2cca:	21 fd       	sbrc	r18, 1
    2ccc:	03 c0       	rjmp	.+6      	; 0x2cd4 <fputc+0x16>
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
    2cd0:	9f ef       	ldi	r25, 0xFF	; 255
    2cd2:	2c c0       	rjmp	.+88     	; 0x2d2c <fputc+0x6e>
    2cd4:	22 ff       	sbrs	r18, 2
    2cd6:	16 c0       	rjmp	.+44     	; 0x2d04 <fputc+0x46>
    2cd8:	46 81       	ldd	r20, Z+6	; 0x06
    2cda:	57 81       	ldd	r21, Z+7	; 0x07
    2cdc:	24 81       	ldd	r18, Z+4	; 0x04
    2cde:	35 81       	ldd	r19, Z+5	; 0x05
    2ce0:	42 17       	cp	r20, r18
    2ce2:	53 07       	cpc	r21, r19
    2ce4:	44 f4       	brge	.+16     	; 0x2cf6 <fputc+0x38>
    2ce6:	a0 81       	ld	r26, Z
    2ce8:	b1 81       	ldd	r27, Z+1	; 0x01
    2cea:	9d 01       	movw	r18, r26
    2cec:	2f 5f       	subi	r18, 0xFF	; 255
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	31 83       	std	Z+1, r19	; 0x01
    2cf2:	20 83       	st	Z, r18
    2cf4:	8c 93       	st	X, r24
    2cf6:	26 81       	ldd	r18, Z+6	; 0x06
    2cf8:	37 81       	ldd	r19, Z+7	; 0x07
    2cfa:	2f 5f       	subi	r18, 0xFF	; 255
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	37 83       	std	Z+7, r19	; 0x07
    2d00:	26 83       	std	Z+6, r18	; 0x06
    2d02:	14 c0       	rjmp	.+40     	; 0x2d2c <fputc+0x6e>
    2d04:	8b 01       	movw	r16, r22
    2d06:	ec 01       	movw	r28, r24
    2d08:	fb 01       	movw	r30, r22
    2d0a:	00 84       	ldd	r0, Z+8	; 0x08
    2d0c:	f1 85       	ldd	r31, Z+9	; 0x09
    2d0e:	e0 2d       	mov	r30, r0
    2d10:	09 95       	icall
    2d12:	89 2b       	or	r24, r25
    2d14:	e1 f6       	brne	.-72     	; 0x2cce <fputc+0x10>
    2d16:	d8 01       	movw	r26, r16
    2d18:	16 96       	adiw	r26, 0x06	; 6
    2d1a:	8d 91       	ld	r24, X+
    2d1c:	9c 91       	ld	r25, X
    2d1e:	17 97       	sbiw	r26, 0x07	; 7
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	17 96       	adiw	r26, 0x07	; 7
    2d24:	9c 93       	st	X, r25
    2d26:	8e 93       	st	-X, r24
    2d28:	16 97       	sbiw	r26, 0x06	; 6
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	08 95       	ret

00002d36 <ungetc>:
    2d36:	fb 01       	movw	r30, r22
    2d38:	23 81       	ldd	r18, Z+3	; 0x03
    2d3a:	20 ff       	sbrs	r18, 0
    2d3c:	12 c0       	rjmp	.+36     	; 0x2d62 <ungetc+0x2c>
    2d3e:	26 fd       	sbrc	r18, 6
    2d40:	10 c0       	rjmp	.+32     	; 0x2d62 <ungetc+0x2c>
    2d42:	8f 3f       	cpi	r24, 0xFF	; 255
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	93 07       	cpc	r25, r19
    2d48:	61 f0       	breq	.+24     	; 0x2d62 <ungetc+0x2c>
    2d4a:	82 83       	std	Z+2, r24	; 0x02
    2d4c:	2f 7d       	andi	r18, 0xDF	; 223
    2d4e:	20 64       	ori	r18, 0x40	; 64
    2d50:	23 83       	std	Z+3, r18	; 0x03
    2d52:	26 81       	ldd	r18, Z+6	; 0x06
    2d54:	37 81       	ldd	r19, Z+7	; 0x07
    2d56:	21 50       	subi	r18, 0x01	; 1
    2d58:	31 09       	sbc	r19, r1
    2d5a:	37 83       	std	Z+7, r19	; 0x07
    2d5c:	26 83       	std	Z+6, r18	; 0x06
    2d5e:	99 27       	eor	r25, r25
    2d60:	08 95       	ret
    2d62:	8f ef       	ldi	r24, 0xFF	; 255
    2d64:	9f ef       	ldi	r25, 0xFF	; 255
    2d66:	08 95       	ret

00002d68 <__ultoa_invert>:
    2d68:	fa 01       	movw	r30, r20
    2d6a:	aa 27       	eor	r26, r26
    2d6c:	28 30       	cpi	r18, 0x08	; 8
    2d6e:	51 f1       	breq	.+84     	; 0x2dc4 <__ultoa_invert+0x5c>
    2d70:	20 31       	cpi	r18, 0x10	; 16
    2d72:	81 f1       	breq	.+96     	; 0x2dd4 <__ultoa_invert+0x6c>
    2d74:	e8 94       	clt
    2d76:	6f 93       	push	r22
    2d78:	6e 7f       	andi	r22, 0xFE	; 254
    2d7a:	6e 5f       	subi	r22, 0xFE	; 254
    2d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d80:	9f 4f       	sbci	r25, 0xFF	; 255
    2d82:	af 4f       	sbci	r26, 0xFF	; 255
    2d84:	b1 e0       	ldi	r27, 0x01	; 1
    2d86:	3e d0       	rcall	.+124    	; 0x2e04 <__ultoa_invert+0x9c>
    2d88:	b4 e0       	ldi	r27, 0x04	; 4
    2d8a:	3c d0       	rcall	.+120    	; 0x2e04 <__ultoa_invert+0x9c>
    2d8c:	67 0f       	add	r22, r23
    2d8e:	78 1f       	adc	r23, r24
    2d90:	89 1f       	adc	r24, r25
    2d92:	9a 1f       	adc	r25, r26
    2d94:	a1 1d       	adc	r26, r1
    2d96:	68 0f       	add	r22, r24
    2d98:	79 1f       	adc	r23, r25
    2d9a:	8a 1f       	adc	r24, r26
    2d9c:	91 1d       	adc	r25, r1
    2d9e:	a1 1d       	adc	r26, r1
    2da0:	6a 0f       	add	r22, r26
    2da2:	71 1d       	adc	r23, r1
    2da4:	81 1d       	adc	r24, r1
    2da6:	91 1d       	adc	r25, r1
    2da8:	a1 1d       	adc	r26, r1
    2daa:	20 d0       	rcall	.+64     	; 0x2dec <__ultoa_invert+0x84>
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <__ultoa_invert+0x48>
    2dae:	68 94       	set
    2db0:	3f 91       	pop	r19
    2db2:	2a e0       	ldi	r18, 0x0A	; 10
    2db4:	26 9f       	mul	r18, r22
    2db6:	11 24       	eor	r1, r1
    2db8:	30 19       	sub	r19, r0
    2dba:	30 5d       	subi	r19, 0xD0	; 208
    2dbc:	31 93       	st	Z+, r19
    2dbe:	de f6       	brtc	.-74     	; 0x2d76 <__ultoa_invert+0xe>
    2dc0:	cf 01       	movw	r24, r30
    2dc2:	08 95       	ret
    2dc4:	46 2f       	mov	r20, r22
    2dc6:	47 70       	andi	r20, 0x07	; 7
    2dc8:	40 5d       	subi	r20, 0xD0	; 208
    2dca:	41 93       	st	Z+, r20
    2dcc:	b3 e0       	ldi	r27, 0x03	; 3
    2dce:	0f d0       	rcall	.+30     	; 0x2dee <__ultoa_invert+0x86>
    2dd0:	c9 f7       	brne	.-14     	; 0x2dc4 <__ultoa_invert+0x5c>
    2dd2:	f6 cf       	rjmp	.-20     	; 0x2dc0 <__ultoa_invert+0x58>
    2dd4:	46 2f       	mov	r20, r22
    2dd6:	4f 70       	andi	r20, 0x0F	; 15
    2dd8:	40 5d       	subi	r20, 0xD0	; 208
    2dda:	4a 33       	cpi	r20, 0x3A	; 58
    2ddc:	18 f0       	brcs	.+6      	; 0x2de4 <__ultoa_invert+0x7c>
    2dde:	49 5d       	subi	r20, 0xD9	; 217
    2de0:	31 fd       	sbrc	r19, 1
    2de2:	40 52       	subi	r20, 0x20	; 32
    2de4:	41 93       	st	Z+, r20
    2de6:	02 d0       	rcall	.+4      	; 0x2dec <__ultoa_invert+0x84>
    2de8:	a9 f7       	brne	.-22     	; 0x2dd4 <__ultoa_invert+0x6c>
    2dea:	ea cf       	rjmp	.-44     	; 0x2dc0 <__ultoa_invert+0x58>
    2dec:	b4 e0       	ldi	r27, 0x04	; 4
    2dee:	a6 95       	lsr	r26
    2df0:	97 95       	ror	r25
    2df2:	87 95       	ror	r24
    2df4:	77 95       	ror	r23
    2df6:	67 95       	ror	r22
    2df8:	ba 95       	dec	r27
    2dfa:	c9 f7       	brne	.-14     	; 0x2dee <__ultoa_invert+0x86>
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	61 05       	cpc	r22, r1
    2e00:	71 05       	cpc	r23, r1
    2e02:	08 95       	ret
    2e04:	9b 01       	movw	r18, r22
    2e06:	ac 01       	movw	r20, r24
    2e08:	0a 2e       	mov	r0, r26
    2e0a:	06 94       	lsr	r0
    2e0c:	57 95       	ror	r21
    2e0e:	47 95       	ror	r20
    2e10:	37 95       	ror	r19
    2e12:	27 95       	ror	r18
    2e14:	ba 95       	dec	r27
    2e16:	c9 f7       	brne	.-14     	; 0x2e0a <__ultoa_invert+0xa2>
    2e18:	62 0f       	add	r22, r18
    2e1a:	73 1f       	adc	r23, r19
    2e1c:	84 1f       	adc	r24, r20
    2e1e:	95 1f       	adc	r25, r21
    2e20:	a0 1d       	adc	r26, r0
    2e22:	08 95       	ret

00002e24 <__mulsi3>:
    2e24:	db 01       	movw	r26, r22
    2e26:	8f 93       	push	r24
    2e28:	9f 93       	push	r25
    2e2a:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__muluhisi3>
    2e2e:	bf 91       	pop	r27
    2e30:	af 91       	pop	r26
    2e32:	a2 9f       	mul	r26, r18
    2e34:	80 0d       	add	r24, r0
    2e36:	91 1d       	adc	r25, r1
    2e38:	a3 9f       	mul	r26, r19
    2e3a:	90 0d       	add	r25, r0
    2e3c:	b2 9f       	mul	r27, r18
    2e3e:	90 0d       	add	r25, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	08 95       	ret

00002e44 <__muluhisi3>:
    2e44:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <__umulhisi3>
    2e48:	a5 9f       	mul	r26, r21
    2e4a:	90 0d       	add	r25, r0
    2e4c:	b4 9f       	mul	r27, r20
    2e4e:	90 0d       	add	r25, r0
    2e50:	a4 9f       	mul	r26, r20
    2e52:	80 0d       	add	r24, r0
    2e54:	91 1d       	adc	r25, r1
    2e56:	11 24       	eor	r1, r1
    2e58:	08 95       	ret

00002e5a <__prologue_saves__>:
    2e5a:	2f 92       	push	r2
    2e5c:	3f 92       	push	r3
    2e5e:	4f 92       	push	r4
    2e60:	5f 92       	push	r5
    2e62:	6f 92       	push	r6
    2e64:	7f 92       	push	r7
    2e66:	8f 92       	push	r8
    2e68:	9f 92       	push	r9
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	ca 1b       	sub	r28, r26
    2e84:	db 0b       	sbc	r29, r27
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	09 94       	ijmp

00002e92 <__epilogue_restores__>:
    2e92:	2a 88       	ldd	r2, Y+18	; 0x12
    2e94:	39 88       	ldd	r3, Y+17	; 0x11
    2e96:	48 88       	ldd	r4, Y+16	; 0x10
    2e98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ea6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ea8:	df 80       	ldd	r13, Y+7	; 0x07
    2eaa:	ee 80       	ldd	r14, Y+6	; 0x06
    2eac:	fd 80       	ldd	r15, Y+5	; 0x05
    2eae:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb0:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb2:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb6:	ce 0f       	add	r28, r30
    2eb8:	d1 1d       	adc	r29, r1
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	ed 01       	movw	r28, r26
    2ec6:	08 95       	ret

00002ec8 <__umulhisi3>:
    2ec8:	a2 9f       	mul	r26, r18
    2eca:	b0 01       	movw	r22, r0
    2ecc:	b3 9f       	mul	r27, r19
    2ece:	c0 01       	movw	r24, r0
    2ed0:	a3 9f       	mul	r26, r19
    2ed2:	70 0d       	add	r23, r0
    2ed4:	81 1d       	adc	r24, r1
    2ed6:	11 24       	eor	r1, r1
    2ed8:	91 1d       	adc	r25, r1
    2eda:	b2 9f       	mul	r27, r18
    2edc:	70 0d       	add	r23, r0
    2ede:	81 1d       	adc	r24, r1
    2ee0:	11 24       	eor	r1, r1
    2ee2:	91 1d       	adc	r25, r1
    2ee4:	08 95       	ret

00002ee6 <_exit>:
    2ee6:	f8 94       	cli

00002ee8 <__stop_program>:
    2ee8:	ff cf       	rjmp	.-2      	; 0x2ee8 <__stop_program>
