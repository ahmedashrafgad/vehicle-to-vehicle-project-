
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000001f0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099d  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078c  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000400  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016f  00000000  00000000  00001d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 36       	cpi	r26, 0x6C	; 108
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

char receive_data;
void send_data(unsigned char data);
int main(void)
{
	DDRD |= (1<<LED_PIN)|(1<<RF_control_PIN);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 60       	ori	r24, 0x0C	; 12
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<LED_PIN);
  ac:	5b 98       	cbi	0x0b, 3	; 11
	
	uart_init(9600);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	95 e2       	ldi	r25, 0x25	; 37
  b2:	0e 94 92 00 	call	0x124	; 0x124 <uart_init>
	sei();
  b6:	78 94       	sei
//  		_delay_ms(100) ;
// 		uart_SendString("AT+FU3\r\n"); // 1 , 2 , 3 all should be FU1
// 		uart_SendString("AT+C001\r\n");
// 		uart_SendString("AT+B9600\r\n");
// 		_delay_ms(100) ;
		 PORTD |= (1<<RF_control_PIN);
  b8:	5a 9a       	sbi	0x0b, 2	; 11
// 		{
// 			uart_SendString("+INQ:9CE6:E7:160EB2,5A020C,FFC8\r\n");
// 			_delay_ms(2000);
// 		}
		
		uart_SendString("+INQ:9CE6:E7:160EB2,5A020C,FFC8\r\n");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x22>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x2c>
  d2:	00 00       	nop
		_delay_ms(100);
		uart_SendString("+INQ:4CA5:6D:10E4D4,5A020C,FFB7\r\n");
  d4:	82 e2       	ldi	r24, 0x22	; 34
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_SendString>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x46>
  ec:	00 00       	nop
		_delay_ms(100);
		uart_SendString("+INQ:4CA5:6D:1600ed,5A020C,FFC3\r\n");
  ee:	84 e4       	ldi	r24, 0x44	; 68
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_SendString>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	80 e7       	ldi	r24, 0x70	; 112
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x56>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x60>
 106:	00 00       	nop
		_delay_ms(100);
		uart_SendString("OK\r\n");
 108:	86 e6       	ldi	r24, 0x66	; 102
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 c5 00 	call	0x18a	; 0x18a <uart_SendString>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	98 e1       	ldi	r25, 0x18	; 24
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x70>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x7a>
 120:	00 00       	nop
 122:	cb cf       	rjmp	.-106    	; 0xba <main+0x14>

00000124 <uart_init>:
/* receive function  ( return one byte) */
unsigned char uart_Receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0 ;
}
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	9c 01       	movw	r18, r24
 13a:	ad 01       	movw	r20, r26
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	44 1f       	adc	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	44 1f       	adc	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	72 e1       	ldi	r23, 0x12	; 18
 150:	8a e7       	ldi	r24, 0x7A	; 122
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__udivmodsi4>
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	31 09       	sbc	r19, r1
 15c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 160:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 164:	e2 ec       	ldi	r30, 0xC2	; 194
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	86 60       	ori	r24, 0x06	; 6
 16c:	80 83       	st	Z, r24
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 61       	ori	r24, 0x18	; 24
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <uart_Send>:
/* send function ( send one byte ) */
void uart_Send(unsigned char  data)
{
	while(!(UCSR0A & (1 << UDRE0)));
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	95 ff       	sbrs	r25, 5
 182:	fd cf       	rjmp	.-6      	; 0x17e <uart_Send+0x4>
	UDR0 = data	 ;
 184:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 188:	08 95       	ret

0000018a <uart_SendString>:
	
}
/*send function ( String )*/

void uart_SendString(char* data) 
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
		
	    while(*data)
 190:	05 c0       	rjmp	.+10     	; 0x19c <uart_SendString+0x12>
	 { //if there is a char
		uart_Send(*data); //process it as a byte data
 192:	0e 94 bd 00 	call	0x17a	; 0x17a <uart_Send>
		data++;
		if(*data == '\n')
 196:	88 81       	ld	r24, Y
 198:	8a 30       	cpi	r24, 0x0A	; 10
 19a:	19 f0       	breq	.+6      	; 0x1a2 <uart_SendString+0x18>
/*send function ( String )*/

void uart_SendString(char* data) 
{
		
	    while(*data)
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	f8 cf       	rjmp	.-16     	; 0x192 <uart_SendString+0x8>
		if(*data == '\n')
		{
			break;	
		}
	 }
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__udivmodsi4>:
 1a8:	a1 e2       	ldi	r26, 0x21	; 33
 1aa:	1a 2e       	mov	r1, r26
 1ac:	aa 1b       	sub	r26, r26
 1ae:	bb 1b       	sub	r27, r27
 1b0:	fd 01       	movw	r30, r26
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <__udivmodsi4_ep>

000001b4 <__udivmodsi4_loop>:
 1b4:	aa 1f       	adc	r26, r26
 1b6:	bb 1f       	adc	r27, r27
 1b8:	ee 1f       	adc	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	a2 17       	cp	r26, r18
 1be:	b3 07       	cpc	r27, r19
 1c0:	e4 07       	cpc	r30, r20
 1c2:	f5 07       	cpc	r31, r21
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <__udivmodsi4_ep>
 1c6:	a2 1b       	sub	r26, r18
 1c8:	b3 0b       	sbc	r27, r19
 1ca:	e4 0b       	sbc	r30, r20
 1cc:	f5 0b       	sbc	r31, r21

000001ce <__udivmodsi4_ep>:
 1ce:	66 1f       	adc	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	88 1f       	adc	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	1a 94       	dec	r1
 1d8:	69 f7       	brne	.-38     	; 0x1b4 <__udivmodsi4_loop>
 1da:	60 95       	com	r22
 1dc:	70 95       	com	r23
 1de:	80 95       	com	r24
 1e0:	90 95       	com	r25
 1e2:	9b 01       	movw	r18, r22
 1e4:	ac 01       	movw	r20, r24
 1e6:	bd 01       	movw	r22, r26
 1e8:	cf 01       	movw	r24, r30
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
