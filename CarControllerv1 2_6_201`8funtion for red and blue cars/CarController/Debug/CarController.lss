
CarController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000752  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d75  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  000015f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fc  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000025cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000163  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002dc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
   2:	00 00       	nop
   4:	48 c0       	rjmp	.+144    	; 0x96 <__bad_interrupt>
   6:	00 00       	nop
   8:	46 c0       	rjmp	.+140    	; 0x96 <__bad_interrupt>
   a:	00 00       	nop
   c:	44 c0       	rjmp	.+136    	; 0x96 <__bad_interrupt>
   e:	00 00       	nop
  10:	42 c0       	rjmp	.+132    	; 0x96 <__bad_interrupt>
  12:	00 00       	nop
  14:	40 c0       	rjmp	.+128    	; 0x96 <__bad_interrupt>
  16:	00 00       	nop
  18:	3e c0       	rjmp	.+124    	; 0x96 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3c c0       	rjmp	.+120    	; 0x96 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3a c0       	rjmp	.+116    	; 0x96 <__bad_interrupt>
  22:	00 00       	nop
  24:	38 c0       	rjmp	.+112    	; 0x96 <__bad_interrupt>
  26:	00 00       	nop
  28:	36 c0       	rjmp	.+108    	; 0x96 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	34 c0       	rjmp	.+104    	; 0x96 <__bad_interrupt>
  2e:	00 00       	nop
  30:	32 c0       	rjmp	.+100    	; 0x96 <__bad_interrupt>
  32:	00 00       	nop
  34:	5b c0       	rjmp	.+182    	; 0xec <__vector_13>
  36:	00 00       	nop
  38:	2e c0       	rjmp	.+92     	; 0x96 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2c c0       	rjmp	.+88     	; 0x96 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2a c0       	rjmp	.+84     	; 0x96 <__bad_interrupt>
  42:	00 00       	nop
  44:	28 c0       	rjmp	.+80     	; 0x96 <__bad_interrupt>
  46:	00 00       	nop
  48:	26 c0       	rjmp	.+76     	; 0x96 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	24 c0       	rjmp	.+72     	; 0x96 <__bad_interrupt>
  4e:	00 00       	nop
  50:	22 c0       	rjmp	.+68     	; 0x96 <__bad_interrupt>
  52:	00 00       	nop
  54:	20 c0       	rjmp	.+64     	; 0x96 <__bad_interrupt>
  56:	00 00       	nop
  58:	1e c0       	rjmp	.+60     	; 0x96 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1c c0       	rjmp	.+56     	; 0x96 <__bad_interrupt>
  5e:	00 00       	nop
  60:	1a c0       	rjmp	.+52     	; 0x96 <__bad_interrupt>
  62:	00 00       	nop
  64:	18 c0       	rjmp	.+48     	; 0x96 <__bad_interrupt>
  66:	00 00       	nop
  68:	ab 00       	.word	0x00ab	; ????
  6a:	97 00       	.word	0x0097	; ????
  6c:	9c 00       	.word	0x009c	; ????
  6e:	a1 00       	.word	0x00a1	; ????
  70:	a6 00       	.word	0x00a6	; ????
  72:	b0 00       	.word	0x00b0	; ????
  74:	b5 00       	.word	0x00b5	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a3 31       	cpi	r26, 0x13	; 19
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	30 d1       	rcall	.+608    	; 0x2f4 <main>
  94:	22 c3       	rjmp	.+1604   	; 0x6da <_exit>

00000096 <__bad_interrupt>:
  96:	b4 cf       	rjmp	.-152    	; 0x0 <__vectors>

00000098 <CarControlInit>:
	while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for falling edge */
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
	/* 8MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 466.47;
	return distance;
}
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8c 61       	ori	r24, 0x1C	; 28
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	83 7e       	andi	r24, 0xE3	; 227
  a2:	88 b9       	out	0x08, r24	; 8
  a4:	21 9a       	sbi	0x04, 1	; 4
  a6:	29 98       	cbi	0x05, 1	; 5
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	88 b9       	out	0x08, r24	; 8
  ae:	08 95       	ret

000000b0 <speedControl>:
  b0:	20 e4       	ldi	r18, 0x40	; 64
  b2:	2a b9       	out	0x0a, r18	; 10
  b4:	23 e8       	ldi	r18, 0x83	; 131
  b6:	24 bd       	out	0x24, r18	; 36
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	48 ec       	ldi	r20, 0xC8	; 200
  c4:	52 e4       	ldi	r21, 0x42	; 66
  c6:	71 d1       	rcall	.+738    	; 0x3aa <__divsf3>
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	4f e7       	ldi	r20, 0x7F	; 127
  ce:	53 e4       	ldi	r21, 0x43	; 67
  d0:	55 d2       	rcall	.+1194   	; 0x57c <__mulsf3>
  d2:	d3 d1       	rcall	.+934    	; 0x47a <__fixunssfsi>
  d4:	67 bd       	out	0x27, r22	; 39
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	85 bd       	out	0x25, r24	; 37
  da:	08 95       	ret

000000dc <ultrasonicIinit>:
  dc:	3d 9a       	sbi	0x07, 5	; 7
  de:	28 9a       	sbi	0x05, 0	; 5
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ea:	08 95       	ret

000000ec <__vector_13>:
// ISR(TIMER0_OVF_vect)
// {
// 	OCR0A = (dutyCycle/100.0)*255.0;
// }
ISR(TIMER1_OVF_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	cli();
  fa:	f8 94       	cli
	TimerOverflow++;	/* Increment Timer Overflow count */
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	reti();
 10e:	18 95       	reti
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <moveCar>:
void moveCar(movement direction)
{   
	 switch(direction)
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	87 30       	cpi	r24, 0x07	; 7
 122:	91 05       	cpc	r25, r1
 124:	30 f5       	brcc	.+76     	; 0x172 <moveCar+0x54>
 126:	fc 01       	movw	r30, r24
 128:	ec 5c       	subi	r30, 0xCC	; 204
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	d0 c2       	rjmp	.+1440   	; 0x6ce <__tablejump2__>
   {
	case forward:
		setBit(PORTB,IN1);
 12e:	29 9a       	sbi	0x05, 1	; 5
		clearBit(PORTC,IN2);
 130:	44 98       	cbi	0x08, 4	; 8
		setBit(PORTC,IN3);
 132:	43 9a       	sbi	0x08, 3	; 8
		clearBit(PORTC,IN4);
 134:	42 98       	cbi	0x08, 2	; 8
	    break;
 136:	08 95       	ret
	case backword:
	     clearBit(PORTB,IN1);
 138:	29 98       	cbi	0x05, 1	; 5
	     setBit(PORTC,IN2);
 13a:	44 9a       	sbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 13c:	43 98       	cbi	0x08, 3	; 8
	     setBit(PORTC,IN4);
 13e:	42 9a       	sbi	0x08, 2	; 8
		 break;
 140:	08 95       	ret
	case forward_left:
	     setBit(PORTB,IN1);
 142:	29 9a       	sbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 144:	44 98       	cbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 146:	43 98       	cbi	0x08, 3	; 8
	     clearBit(PORTC,IN4);
 148:	42 98       	cbi	0x08, 2	; 8
		 break;
 14a:	08 95       	ret
	case forward_right:
	     clearBit(PORTB,IN1);
 14c:	29 98       	cbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 14e:	44 98       	cbi	0x08, 4	; 8
	     setBit(PORTC,IN3);
 150:	43 9a       	sbi	0x08, 3	; 8
	     clearBit(PORTC,IN4);
 152:	42 98       	cbi	0x08, 2	; 8
		 break;
 154:	08 95       	ret
	case stop:
	     clearBit(PORTB,IN1);
 156:	29 98       	cbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 158:	44 98       	cbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 15a:	43 98       	cbi	0x08, 3	; 8
	     clearBit(PORTC,IN4);
 15c:	42 98       	cbi	0x08, 2	; 8
		 break;
 15e:	08 95       	ret
	case back_left:
         clearBit(PORTB,IN1);
 160:	29 98       	cbi	0x05, 1	; 5
         setBit(PORTC,IN2);
 162:	44 9a       	sbi	0x08, 4	; 8
         clearBit(PORTC,IN3);
 164:	43 98       	cbi	0x08, 3	; 8
         clearBit(PORTC,IN4);
 166:	42 98       	cbi	0x08, 2	; 8
		 break;
 168:	08 95       	ret
	case back_right:
	     clearBit(PORTB,IN1);
 16a:	29 98       	cbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 16c:	44 98       	cbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 16e:	43 98       	cbi	0x08, 3	; 8
	     setBit(PORTC,IN4);
 170:	42 9a       	sbi	0x08, 2	; 8
 172:	08 95       	ret

00000174 <speed_car>:
		 break;
}
}
char speed_car(void)
{ 
	if(data == '0')
 174:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 178:	80 33       	cpi	r24, 0x30	; 48
 17a:	21 f4       	brne	.+8      	; 0x184 <speed_car+0x10>
	{
		data = 'S';
 17c:	83 e5       	ldi	r24, 0x53	; 83
 17e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <data>
 182:	4f c0       	rjmp	.+158    	; 0x222 <speed_car+0xae>
	}
	else if(data == '1')
 184:	81 33       	cpi	r24, 0x31	; 49
 186:	31 f4       	brne	.+12     	; 0x194 <speed_car+0x20>
	{
		speedControl(10);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	91 e4       	ldi	r25, 0x41	; 65
 190:	8f df       	rcall	.-226    	; 0xb0 <speedControl>
 192:	47 c0       	rjmp	.+142    	; 0x222 <speed_car+0xae>
	}
	else if(data == '2')
 194:	82 33       	cpi	r24, 0x32	; 50
 196:	31 f4       	brne	.+12     	; 0x1a4 <speed_car+0x30>
	{
		speedControl(12);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	91 e4       	ldi	r25, 0x41	; 65
 1a0:	87 df       	rcall	.-242    	; 0xb0 <speedControl>
 1a2:	3f c0       	rjmp	.+126    	; 0x222 <speed_car+0xae>
	}
	else if(data == '3')
 1a4:	83 33       	cpi	r24, 0x33	; 51
 1a6:	31 f4       	brne	.+12     	; 0x1b4 <speed_car+0x40>
	{
		speedControl(14);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e6       	ldi	r24, 0x60	; 96
 1ae:	91 e4       	ldi	r25, 0x41	; 65
 1b0:	7f df       	rcall	.-258    	; 0xb0 <speedControl>
 1b2:	37 c0       	rjmp	.+110    	; 0x222 <speed_car+0xae>
	}
	else if(data == '4')
 1b4:	84 33       	cpi	r24, 0x34	; 52
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <speed_car+0x50>
	{
		speedControl(16);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	91 e4       	ldi	r25, 0x41	; 65
 1c0:	77 df       	rcall	.-274    	; 0xb0 <speedControl>
 1c2:	2f c0       	rjmp	.+94     	; 0x222 <speed_car+0xae>
	}
	else if(data == '5')
 1c4:	85 33       	cpi	r24, 0x35	; 53
	{
		speedControl(18);
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <speed_car+0x60>
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	80 e9       	ldi	r24, 0x90	; 144
 1ce:	91 e4       	ldi	r25, 0x41	; 65
 1d0:	6f df       	rcall	.-290    	; 0xb0 <speedControl>
	}
	else if(data == '6')
 1d2:	27 c0       	rjmp	.+78     	; 0x222 <speed_car+0xae>
	{
		speedControl(20);
 1d4:	86 33       	cpi	r24, 0x36	; 54
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <speed_car+0x70>
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 ea       	ldi	r24, 0xA0	; 160
 1de:	91 e4       	ldi	r25, 0x41	; 65
	}
	else if (data == '7')
 1e0:	67 df       	rcall	.-306    	; 0xb0 <speedControl>
	{
		speedControl(30);
 1e2:	1f c0       	rjmp	.+62     	; 0x222 <speed_car+0xae>
 1e4:	87 33       	cpi	r24, 0x37	; 55
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <speed_car+0x80>
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	80 ef       	ldi	r24, 0xF0	; 240
 1ee:	91 e4       	ldi	r25, 0x41	; 65
	}
	else if(data == 'W')
 1f0:	5f df       	rcall	.-322    	; 0xb0 <speedControl>
 1f2:	17 c0       	rjmp	.+46     	; 0x222 <speed_car+0xae>
	{
		setBit(PORTD,Forward_Led);
 1f4:	87 35       	cpi	r24, 0x57	; 87
 1f6:	11 f4       	brne	.+4      	; 0x1fc <speed_car+0x88>
	}
	else if(data == 'w')
 1f8:	5b 9a       	sbi	0x0b, 3	; 11
 1fa:	13 c0       	rjmp	.+38     	; 0x222 <speed_car+0xae>
	{
		clearBit(PORTD,Forward_Led);
 1fc:	87 37       	cpi	r24, 0x77	; 119
 1fe:	11 f4       	brne	.+4      	; 0x204 <speed_car+0x90>
	}
	else if(data == 'U')
 200:	5b 98       	cbi	0x0b, 3	; 11
 202:	0f c0       	rjmp	.+30     	; 0x222 <speed_car+0xae>
	{
		setBit(PORTD,Backward_Led);
 204:	85 35       	cpi	r24, 0x55	; 85
 206:	11 f4       	brne	.+4      	; 0x20c <speed_car+0x98>
	}
	else if(data == 'u')
 208:	5c 9a       	sbi	0x0b, 4	; 11
 20a:	0b c0       	rjmp	.+22     	; 0x222 <speed_car+0xae>
	{
		clearBit(PORTD,Backward_Led);
 20c:	85 37       	cpi	r24, 0x75	; 117
 20e:	11 f4       	brne	.+4      	; 0x214 <speed_car+0xa0>
	}
	else if(data == 'V')
 210:	5c 98       	cbi	0x0b, 4	; 11
 212:	07 c0       	rjmp	.+14     	; 0x222 <speed_car+0xae>
	{
		setBit(PORTD,Buzzer);
 214:	86 35       	cpi	r24, 0x56	; 86
 216:	11 f4       	brne	.+4      	; 0x21c <speed_car+0xa8>
	}
	else if(data == 'v')
 218:	5d 9a       	sbi	0x0b, 5	; 11
 21a:	03 c0       	rjmp	.+6      	; 0x222 <speed_car+0xae>
	{
		clearBit(PORTD,Buzzer);
 21c:	86 37       	cpi	r24, 0x76	; 118
	}
	return data;
	
}
 21e:	09 f4       	brne	.+2      	; 0x222 <speed_car+0xae>
 220:	5d 98       	cbi	0x0b, 5	; 11
 222:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 226:	08 95       	ret

00000228 <mov_3_Direc>:
void mov_3_Direc(void)
{
	if(data == 'B')
 228:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 22c:	82 34       	cpi	r24, 0x42	; 66
 22e:	19 f4       	brne	.+6      	; 0x236 <mov_3_Direc+0xe>
	{
		moveCar(backword);
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	75 cf       	rjmp	.-278    	; 0x11e <moveCar>
 234:	08 95       	ret
	}
	else if(data == 'G'||data == 'L')
 236:	87 34       	cpi	r24, 0x47	; 71
 238:	11 f0       	breq	.+4      	; 0x23e <mov_3_Direc+0x16>
 23a:	8c 34       	cpi	r24, 0x4C	; 76
	{
		moveCar(forward_left);
 23c:	19 f4       	brne	.+6      	; 0x244 <mov_3_Direc+0x1c>
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	6e cf       	rjmp	.-292    	; 0x11e <moveCar>
	}
	else if(data == 'I'|| data == 'R')
 242:	08 95       	ret
 244:	89 34       	cpi	r24, 0x49	; 73
 246:	11 f0       	breq	.+4      	; 0x24c <mov_3_Direc+0x24>
	{
		moveCar(forward_right);
 248:	82 35       	cpi	r24, 0x52	; 82
 24a:	19 f4       	brne	.+6      	; 0x252 <mov_3_Direc+0x2a>
 24c:	84 e0       	ldi	r24, 0x04	; 4
	}
	else if(data == 'S')
 24e:	67 cf       	rjmp	.-306    	; 0x11e <moveCar>
	{
		moveCar(stop);
 250:	08 95       	ret
 252:	83 35       	cpi	r24, 0x53	; 83
 254:	19 f4       	brne	.+6      	; 0x25c <mov_3_Direc+0x34>
	}
	else if(data == 'H')
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	62 cf       	rjmp	.-316    	; 0x11e <moveCar>
	{
		moveCar(back_left);
 25a:	08 95       	ret
 25c:	88 34       	cpi	r24, 0x48	; 72
 25e:	19 f4       	brne	.+6      	; 0x266 <mov_3_Direc+0x3e>
	}
	else if(data == 'J')
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	5d cf       	rjmp	.-326    	; 0x11e <moveCar>
	{
		moveCar(back_right);
 264:	08 95       	ret
 266:	8a 34       	cpi	r24, 0x4A	; 74
 268:	11 f4       	brne	.+4      	; 0x26e <mov_3_Direc+0x46>
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	58 cf       	rjmp	.-336    	; 0x11e <moveCar>
 26e:	08 95       	ret

00000270 <mov_all_Direc>:
	}

	
}
void mov_all_Direc(void){
	PORTD &= ~((1<<PIND2));
 270:	5a 98       	cbi	0x0b, 2	; 11
	if(data == 'F')
 272:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 276:	86 34       	cpi	r24, 0x46	; 70
 278:	11 f4       	brne	.+4      	; 0x27e <mov_all_Direc+0xe>
	{
		
		moveCar(forward);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	50 df       	rcall	.-352    	; 0x11e <moveCar>
	}
	if(data == 'B')
 27e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 282:	82 34       	cpi	r24, 0x42	; 66
	{
		moveCar(backword);
 284:	19 f4       	brne	.+6      	; 0x28c <mov_all_Direc+0x1c>
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	4a cf       	rjmp	.-364    	; 0x11e <moveCar>
		
	}
	else if(data == 'G'||data == 'L')
 28a:	08 95       	ret
 28c:	87 34       	cpi	r24, 0x47	; 71
 28e:	11 f0       	breq	.+4      	; 0x294 <mov_all_Direc+0x24>
	{
		
		
		moveCar(forward_left);
 290:	8c 34       	cpi	r24, 0x4C	; 76
 292:	19 f4       	brne	.+6      	; 0x29a <mov_all_Direc+0x2a>
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	43 cf       	rjmp	.-378    	; 0x11e <moveCar>
		
	}
	else if(data == 'I'|| data == 'R')
 298:	08 95       	ret
 29a:	89 34       	cpi	r24, 0x49	; 73
	{
		
		
		moveCar(forward_right);
 29c:	11 f0       	breq	.+4      	; 0x2a2 <mov_all_Direc+0x32>
 29e:	82 35       	cpi	r24, 0x52	; 82
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <mov_all_Direc+0x38>
		
	}
	else if(data == 'S')
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	3c cf       	rjmp	.-392    	; 0x11e <moveCar>
	{
		
		moveCar(stop);
 2a6:	08 95       	ret
 2a8:	83 35       	cpi	r24, 0x53	; 83
 2aa:	19 f4       	brne	.+6      	; 0x2b2 <mov_all_Direc+0x42>
	}
	else if(data == 'H')
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	37 cf       	rjmp	.-402    	; 0x11e <moveCar>
	{
		
		moveCar(back_left);
 2b0:	08 95       	ret
 2b2:	88 34       	cpi	r24, 0x48	; 72
 2b4:	19 f4       	brne	.+6      	; 0x2bc <mov_all_Direc+0x4c>
	}
	else if(data == 'J')
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	32 cf       	rjmp	.-412    	; 0x11e <moveCar>
	{
		
		moveCar(back_right);
 2ba:	08 95       	ret
 2bc:	8a 34       	cpi	r24, 0x4A	; 74
 2be:	11 f4       	brne	.+4      	; 0x2c4 <mov_all_Direc+0x54>
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	2d cf       	rjmp	.-422    	; 0x11e <moveCar>
 2c4:	08 95       	ret

000002c6 <setDirection>:
		
	}
	
}

void setDirection(void){ 
 2c6:	56 df       	rcall	.-340    	; 0x174 <speed_car>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e7       	ldi	r20, 0x70	; 112
 2ce:	51 e4       	ldi	r21, 0x41	; 65
 2d0:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Range>
 2d4:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <Range+0x1>
 2d8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Range+0x2>
 2dc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <Range+0x3>
 2e0:	49 d1       	rcall	.+658    	; 0x574 <__gesf2>
 2e2:	88 23       	and	r24, r24
 2e4:	14 f0       	brlt	.+4      	; 0x2ea <setDirection+0x24>
 2e6:	c4 df       	rcall	.-120    	; 0x270 <mov_all_Direc>
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <setDirection+0x2a>
 2ea:	5a 9a       	sbi	0x0b, 2	; 11
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	17 df       	rcall	.-466    	; 0x11e <moveCar>
 2f0:	9b cf       	rjmp	.-202    	; 0x228 <mov_3_Direc>
 2f2:	08 95       	ret

000002f4 <main>:
double dutyCycle = 0;
double Range;


int main(void)
{   DDRD |= (1<<PIND2)|(1<<PIND3)|(1<<Forward_Led)|(1<<Backward_Led);
 2f4:	8a b1       	in	r24, 0x0a	; 10
 2f6:	8c 61       	ori	r24, 0x1C	; 28
 2f8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PIND2)|(1<<PIND3)|(1<<Forward_Led)|(1<<Backward_Led));
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	83 7e       	andi	r24, 0xE3	; 227
	
	
	//char string[10];
	ultrasonicIinit();
	CarControlInit();
 2fe:	8b b9       	out	0x0b, r24	; 11
	uart_init(9600);
 300:	ed de       	rcall	.-550    	; 0xdc <ultrasonicIinit>
 302:	ca de       	rcall	.-620    	; 0x98 <CarControlInit>
 304:	80 e8       	ldi	r24, 0x80	; 128
	speedControl(dutyCycle);
 306:	95 e2       	ldi	r25, 0x25	; 37
 308:	1e d0       	rcall	.+60     	; 0x346 <uart_init>
 30a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dutyCycle>
 30e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <dutyCycle+0x1>
 312:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyCycle+0x2>
 316:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dutyCycle+0x3>
	//sei();
	
	while(1)
	{
			 data = uart_Receive();
			 Range = 30;
 31a:	ca de       	rcall	.-620    	; 0xb0 <speedControl>
 31c:	0f 2e       	mov	r0, r31
 31e:	c1 2c       	mov	r12, r1
 320:	d1 2c       	mov	r13, r1
 322:	f0 ef       	ldi	r31, 0xF0	; 240
 324:	ef 2e       	mov	r14, r31
	speedControl(dutyCycle);
	//sei();
	
	while(1)
	{
			 data = uart_Receive();
 326:	f1 e4       	ldi	r31, 0x41	; 65
 328:	ff 2e       	mov	r15, r31
 32a:	f0 2d       	mov	r31, r0
 32c:	36 d0       	rcall	.+108    	; 0x39a <uart_Receive>
			 Range = 30;
 32e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <data>
 332:	c0 92 0f 01 	sts	0x010F, r12	; 0x80010f <Range>
 336:	d0 92 10 01 	sts	0x0110, r13	; 0x800110 <Range+0x1>
 33a:	e0 92 11 01 	sts	0x0111, r14	; 0x800111 <Range+0x2>
			 setDirection();
 33e:	f0 92 12 01 	sts	0x0112, r15	; 0x800112 <Range+0x3>
 342:	c1 df       	rcall	.-126    	; 0x2c6 <setDirection>
 344:	f3 cf       	rjmp	.-26     	; 0x32c <main+0x38>

00000346 <uart_init>:
/* initiation UART module*/
void uart_init(unsigned short int baudrate)
{
	// calculate baudrate 
	unsigned short baudRateValue ;
	baudRateValue = (F_CPU/(baudrate*16UL))-1 ;
 346:	a0 e0       	ldi	r26, 0x00	; 0
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	9c 01       	movw	r18, r24
 35c:	ad 01       	movw	r20, r26
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	44 1f       	adc	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	44 1f       	adc	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	72 e1       	ldi	r23, 0x12	; 18
 372:	8a e7       	ldi	r24, 0x7A	; 122
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	89 d1       	rcall	.+786    	; 0x68a <__udivmodsi4>
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	31 09       	sbc	r19, r1
	// baudrate register low , high , set value
	UBRR0L = baudRateValue ; 
 37c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (baudRateValue >> 8);
 380:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	// 8- bit data 
	UCSR0C |=(1 << UCSZ00)|(1<<UCSZ01);//|(1<<UMSEL00);
 384:	e2 ec       	ldi	r30, 0xC2	; 194
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	86 60       	ori	r24, 0x06	; 6
 38c:	80 83       	st	Z, r24
	 
	// enable RX , TX
	UCSR0B |=(1 << RXEN0) | (1<<TXEN0)| (1<<RXCIE0) ;
 38e:	e1 ec       	ldi	r30, 0xC1	; 193
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	88 69       	ori	r24, 0x98	; 152
 396:	80 83       	st	Z, r24
 398:	08 95       	ret

0000039a <uart_Receive>:
	
}
/* receive function  ( return one byte) */
unsigned char uart_Receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
 39a:	e0 ec       	ldi	r30, 0xC0	; 192
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	88 23       	and	r24, r24
 3a2:	ec f7       	brge	.-6      	; 0x39e <uart_Receive+0x4>
	return UDR0 ;
 3a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 3a8:	08 95       	ret

000003aa <__divsf3>:
 3aa:	0c d0       	rcall	.+24     	; 0x3c4 <__divsf3x>
 3ac:	a9 c0       	rjmp	.+338    	; 0x500 <__fp_round>
 3ae:	a1 d0       	rcall	.+322    	; 0x4f2 <__fp_pscB>
 3b0:	40 f0       	brcs	.+16     	; 0x3c2 <__divsf3+0x18>
 3b2:	98 d0       	rcall	.+304    	; 0x4e4 <__fp_pscA>
 3b4:	30 f0       	brcs	.+12     	; 0x3c2 <__divsf3+0x18>
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <__divsf3+0x16>
 3b8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ba:	19 f0       	breq	.+6      	; 0x3c2 <__divsf3+0x18>
 3bc:	8a c0       	rjmp	.+276    	; 0x4d2 <__fp_inf>
 3be:	51 11       	cpse	r21, r1
 3c0:	d3 c0       	rjmp	.+422    	; 0x568 <__fp_szero>
 3c2:	8d c0       	rjmp	.+282    	; 0x4de <__fp_nan>

000003c4 <__divsf3x>:
 3c4:	ae d0       	rcall	.+348    	; 0x522 <__fp_split3>
 3c6:	98 f3       	brcs	.-26     	; 0x3ae <__divsf3+0x4>

000003c8 <__divsf3_pse>:
 3c8:	99 23       	and	r25, r25
 3ca:	c9 f3       	breq	.-14     	; 0x3be <__divsf3+0x14>
 3cc:	55 23       	and	r21, r21
 3ce:	b1 f3       	breq	.-20     	; 0x3bc <__divsf3+0x12>
 3d0:	95 1b       	sub	r25, r21
 3d2:	55 0b       	sbc	r21, r21
 3d4:	bb 27       	eor	r27, r27
 3d6:	aa 27       	eor	r26, r26
 3d8:	62 17       	cp	r22, r18
 3da:	73 07       	cpc	r23, r19
 3dc:	84 07       	cpc	r24, r20
 3de:	38 f0       	brcs	.+14     	; 0x3ee <__divsf3_pse+0x26>
 3e0:	9f 5f       	subi	r25, 0xFF	; 255
 3e2:	5f 4f       	sbci	r21, 0xFF	; 255
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	44 1f       	adc	r20, r20
 3ea:	aa 1f       	adc	r26, r26
 3ec:	a9 f3       	breq	.-22     	; 0x3d8 <__divsf3_pse+0x10>
 3ee:	33 d0       	rcall	.+102    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3f0:	0e 2e       	mov	r0, r30
 3f2:	3a f0       	brmi	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	e0 e8       	ldi	r30, 0x80	; 128
 3f6:	30 d0       	rcall	.+96     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 3f8:	91 50       	subi	r25, 0x01	; 1
 3fa:	50 40       	sbci	r21, 0x00	; 0
 3fc:	e6 95       	lsr	r30
 3fe:	00 1c       	adc	r0, r0
 400:	ca f7       	brpl	.-14     	; 0x3f4 <__divsf3_pse+0x2c>
 402:	29 d0       	rcall	.+82     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 404:	fe 2f       	mov	r31, r30
 406:	27 d0       	rcall	.+78     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	bb 1f       	adc	r27, r27
 410:	26 17       	cp	r18, r22
 412:	37 07       	cpc	r19, r23
 414:	48 07       	cpc	r20, r24
 416:	ab 07       	cpc	r26, r27
 418:	b0 e8       	ldi	r27, 0x80	; 128
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	bb 0b       	sbc	r27, r27
 41e:	80 2d       	mov	r24, r0
 420:	bf 01       	movw	r22, r30
 422:	ff 27       	eor	r31, r31
 424:	93 58       	subi	r25, 0x83	; 131
 426:	5f 4f       	sbci	r21, 0xFF	; 255
 428:	2a f0       	brmi	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42a:	9e 3f       	cpi	r25, 0xFE	; 254
 42c:	51 05       	cpc	r21, r1
 42e:	68 f0       	brcs	.+26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 430:	50 c0       	rjmp	.+160    	; 0x4d2 <__fp_inf>
 432:	9a c0       	rjmp	.+308    	; 0x568 <__fp_szero>
 434:	5f 3f       	cpi	r21, 0xFF	; 255
 436:	ec f3       	brlt	.-6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 438:	98 3e       	cpi	r25, 0xE8	; 232
 43a:	dc f3       	brlt	.-10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43c:	86 95       	lsr	r24
 43e:	77 95       	ror	r23
 440:	67 95       	ror	r22
 442:	b7 95       	ror	r27
 444:	f7 95       	ror	r31
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	c9 f7       	brne	.-14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44a:	88 0f       	add	r24, r24
 44c:	91 1d       	adc	r25, r1
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	97 f9       	bld	r25, 7
 454:	08 95       	ret
 456:	e1 e0       	ldi	r30, 0x01	; 1
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	bb 1f       	adc	r27, r27
 460:	62 17       	cp	r22, r18
 462:	73 07       	cpc	r23, r19
 464:	84 07       	cpc	r24, r20
 466:	ba 07       	cpc	r27, r26
 468:	20 f0       	brcs	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46a:	62 1b       	sub	r22, r18
 46c:	73 0b       	sbc	r23, r19
 46e:	84 0b       	sbc	r24, r20
 470:	ba 0b       	sbc	r27, r26
 472:	ee 1f       	adc	r30, r30
 474:	88 f7       	brcc	.-30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 476:	e0 95       	com	r30
 478:	08 95       	ret

0000047a <__fixunssfsi>:
 47a:	5b d0       	rcall	.+182    	; 0x532 <__fp_splitA>
 47c:	88 f0       	brcs	.+34     	; 0x4a0 <__fixunssfsi+0x26>
 47e:	9f 57       	subi	r25, 0x7F	; 127
 480:	90 f0       	brcs	.+36     	; 0x4a6 <__fixunssfsi+0x2c>
 482:	b9 2f       	mov	r27, r25
 484:	99 27       	eor	r25, r25
 486:	b7 51       	subi	r27, 0x17	; 23
 488:	a0 f0       	brcs	.+40     	; 0x4b2 <__fixunssfsi+0x38>
 48a:	d1 f0       	breq	.+52     	; 0x4c0 <__fixunssfsi+0x46>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	1a f0       	brmi	.+6      	; 0x49c <__fixunssfsi+0x22>
 496:	ba 95       	dec	r27
 498:	c9 f7       	brne	.-14     	; 0x48c <__fixunssfsi+0x12>
 49a:	12 c0       	rjmp	.+36     	; 0x4c0 <__fixunssfsi+0x46>
 49c:	b1 30       	cpi	r27, 0x01	; 1
 49e:	81 f0       	breq	.+32     	; 0x4c0 <__fixunssfsi+0x46>
 4a0:	62 d0       	rcall	.+196    	; 0x566 <__fp_zero>
 4a2:	b1 e0       	ldi	r27, 0x01	; 1
 4a4:	08 95       	ret
 4a6:	5f c0       	rjmp	.+190    	; 0x566 <__fp_zero>
 4a8:	67 2f       	mov	r22, r23
 4aa:	78 2f       	mov	r23, r24
 4ac:	88 27       	eor	r24, r24
 4ae:	b8 5f       	subi	r27, 0xF8	; 248
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <__fixunssfsi+0x46>
 4b2:	b9 3f       	cpi	r27, 0xF9	; 249
 4b4:	cc f3       	brlt	.-14     	; 0x4a8 <__fixunssfsi+0x2e>
 4b6:	86 95       	lsr	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b3 95       	inc	r27
 4be:	d9 f7       	brne	.-10     	; 0x4b6 <__fixunssfsi+0x3c>
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__fixunssfsi+0x56>
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__fp_inf>:
 4d2:	97 f9       	bld	r25, 7
 4d4:	9f 67       	ori	r25, 0x7F	; 127
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	08 95       	ret

000004de <__fp_nan>:
 4de:	9f ef       	ldi	r25, 0xFF	; 255
 4e0:	80 ec       	ldi	r24, 0xC0	; 192
 4e2:	08 95       	ret

000004e4 <__fp_pscA>:
 4e4:	00 24       	eor	r0, r0
 4e6:	0a 94       	dec	r0
 4e8:	16 16       	cp	r1, r22
 4ea:	17 06       	cpc	r1, r23
 4ec:	18 06       	cpc	r1, r24
 4ee:	09 06       	cpc	r0, r25
 4f0:	08 95       	ret

000004f2 <__fp_pscB>:
 4f2:	00 24       	eor	r0, r0
 4f4:	0a 94       	dec	r0
 4f6:	12 16       	cp	r1, r18
 4f8:	13 06       	cpc	r1, r19
 4fa:	14 06       	cpc	r1, r20
 4fc:	05 06       	cpc	r0, r21
 4fe:	08 95       	ret

00000500 <__fp_round>:
 500:	09 2e       	mov	r0, r25
 502:	03 94       	inc	r0
 504:	00 0c       	add	r0, r0
 506:	11 f4       	brne	.+4      	; 0x50c <__fp_round+0xc>
 508:	88 23       	and	r24, r24
 50a:	52 f0       	brmi	.+20     	; 0x520 <__fp_round+0x20>
 50c:	bb 0f       	add	r27, r27
 50e:	40 f4       	brcc	.+16     	; 0x520 <__fp_round+0x20>
 510:	bf 2b       	or	r27, r31
 512:	11 f4       	brne	.+4      	; 0x518 <__fp_round+0x18>
 514:	60 ff       	sbrs	r22, 0
 516:	04 c0       	rjmp	.+8      	; 0x520 <__fp_round+0x20>
 518:	6f 5f       	subi	r22, 0xFF	; 255
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__fp_split3>:
 522:	57 fd       	sbrc	r21, 7
 524:	90 58       	subi	r25, 0x80	; 128
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	59 f0       	breq	.+22     	; 0x542 <__fp_splitA+0x10>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	71 f0       	breq	.+28     	; 0x54c <__fp_splitA+0x1a>
 530:	47 95       	ror	r20

00000532 <__fp_splitA>:
 532:	88 0f       	add	r24, r24
 534:	97 fb       	bst	r25, 7
 536:	99 1f       	adc	r25, r25
 538:	61 f0       	breq	.+24     	; 0x552 <__fp_splitA+0x20>
 53a:	9f 3f       	cpi	r25, 0xFF	; 255
 53c:	79 f0       	breq	.+30     	; 0x55c <__fp_splitA+0x2a>
 53e:	87 95       	ror	r24
 540:	08 95       	ret
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	55 1f       	adc	r21, r21
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <__fp_split3+0xe>
 54c:	46 95       	lsr	r20
 54e:	f1 df       	rcall	.-30     	; 0x532 <__fp_splitA>
 550:	08 c0       	rjmp	.+16     	; 0x562 <__fp_splitA+0x30>
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	18 06       	cpc	r1, r24
 558:	99 1f       	adc	r25, r25
 55a:	f1 cf       	rjmp	.-30     	; 0x53e <__fp_splitA+0xc>
 55c:	86 95       	lsr	r24
 55e:	71 05       	cpc	r23, r1
 560:	61 05       	cpc	r22, r1
 562:	08 94       	sec
 564:	08 95       	ret

00000566 <__fp_zero>:
 566:	e8 94       	clt

00000568 <__fp_szero>:
 568:	bb 27       	eor	r27, r27
 56a:	66 27       	eor	r22, r22
 56c:	77 27       	eor	r23, r23
 56e:	cb 01       	movw	r24, r22
 570:	97 f9       	bld	r25, 7
 572:	08 95       	ret

00000574 <__gesf2>:
 574:	66 d0       	rcall	.+204    	; 0x642 <__fp_cmp>
 576:	08 f4       	brcc	.+2      	; 0x57a <__gesf2+0x6>
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	08 95       	ret

0000057c <__mulsf3>:
 57c:	0b d0       	rcall	.+22     	; 0x594 <__mulsf3x>
 57e:	c0 cf       	rjmp	.-128    	; 0x500 <__fp_round>
 580:	b1 df       	rcall	.-158    	; 0x4e4 <__fp_pscA>
 582:	28 f0       	brcs	.+10     	; 0x58e <__mulsf3+0x12>
 584:	b6 df       	rcall	.-148    	; 0x4f2 <__fp_pscB>
 586:	18 f0       	brcs	.+6      	; 0x58e <__mulsf3+0x12>
 588:	95 23       	and	r25, r21
 58a:	09 f0       	breq	.+2      	; 0x58e <__mulsf3+0x12>
 58c:	a2 cf       	rjmp	.-188    	; 0x4d2 <__fp_inf>
 58e:	a7 cf       	rjmp	.-178    	; 0x4de <__fp_nan>
 590:	11 24       	eor	r1, r1
 592:	ea cf       	rjmp	.-44     	; 0x568 <__fp_szero>

00000594 <__mulsf3x>:
 594:	c6 df       	rcall	.-116    	; 0x522 <__fp_split3>
 596:	a0 f3       	brcs	.-24     	; 0x580 <__mulsf3+0x4>

00000598 <__mulsf3_pse>:
 598:	95 9f       	mul	r25, r21
 59a:	d1 f3       	breq	.-12     	; 0x590 <__mulsf3+0x14>
 59c:	95 0f       	add	r25, r21
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	55 1f       	adc	r21, r21
 5a2:	62 9f       	mul	r22, r18
 5a4:	f0 01       	movw	r30, r0
 5a6:	72 9f       	mul	r23, r18
 5a8:	bb 27       	eor	r27, r27
 5aa:	f0 0d       	add	r31, r0
 5ac:	b1 1d       	adc	r27, r1
 5ae:	63 9f       	mul	r22, r19
 5b0:	aa 27       	eor	r26, r26
 5b2:	f0 0d       	add	r31, r0
 5b4:	b1 1d       	adc	r27, r1
 5b6:	aa 1f       	adc	r26, r26
 5b8:	64 9f       	mul	r22, r20
 5ba:	66 27       	eor	r22, r22
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	66 1f       	adc	r22, r22
 5c2:	82 9f       	mul	r24, r18
 5c4:	22 27       	eor	r18, r18
 5c6:	b0 0d       	add	r27, r0
 5c8:	a1 1d       	adc	r26, r1
 5ca:	62 1f       	adc	r22, r18
 5cc:	73 9f       	mul	r23, r19
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	62 1f       	adc	r22, r18
 5d4:	83 9f       	mul	r24, r19
 5d6:	a0 0d       	add	r26, r0
 5d8:	61 1d       	adc	r22, r1
 5da:	22 1f       	adc	r18, r18
 5dc:	74 9f       	mul	r23, r20
 5de:	33 27       	eor	r19, r19
 5e0:	a0 0d       	add	r26, r0
 5e2:	61 1d       	adc	r22, r1
 5e4:	23 1f       	adc	r18, r19
 5e6:	84 9f       	mul	r24, r20
 5e8:	60 0d       	add	r22, r0
 5ea:	21 1d       	adc	r18, r1
 5ec:	82 2f       	mov	r24, r18
 5ee:	76 2f       	mov	r23, r22
 5f0:	6a 2f       	mov	r22, r26
 5f2:	11 24       	eor	r1, r1
 5f4:	9f 57       	subi	r25, 0x7F	; 127
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	8a f0       	brmi	.+34     	; 0x61c <__mulsf3_pse+0x84>
 5fa:	e1 f0       	breq	.+56     	; 0x634 <__mulsf3_pse+0x9c>
 5fc:	88 23       	and	r24, r24
 5fe:	4a f0       	brmi	.+18     	; 0x612 <__mulsf3_pse+0x7a>
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	bb 1f       	adc	r27, r27
 606:	66 1f       	adc	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	91 50       	subi	r25, 0x01	; 1
 60e:	50 40       	sbci	r21, 0x00	; 0
 610:	a9 f7       	brne	.-22     	; 0x5fc <__mulsf3_pse+0x64>
 612:	9e 3f       	cpi	r25, 0xFE	; 254
 614:	51 05       	cpc	r21, r1
 616:	70 f0       	brcs	.+28     	; 0x634 <__mulsf3_pse+0x9c>
 618:	5c cf       	rjmp	.-328    	; 0x4d2 <__fp_inf>
 61a:	a6 cf       	rjmp	.-180    	; 0x568 <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	ec f3       	brlt	.-6      	; 0x61a <__mulsf3_pse+0x82>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	dc f3       	brlt	.-10     	; 0x61a <__mulsf3_pse+0x82>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	e7 95       	ror	r30
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	c1 f7       	brne	.-16     	; 0x624 <__mulsf3_pse+0x8c>
 634:	fe 2b       	or	r31, r30
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__fp_cmp>:
 642:	99 0f       	add	r25, r25
 644:	00 08       	sbc	r0, r0
 646:	55 0f       	add	r21, r21
 648:	aa 0b       	sbc	r26, r26
 64a:	e0 e8       	ldi	r30, 0x80	; 128
 64c:	fe ef       	ldi	r31, 0xFE	; 254
 64e:	16 16       	cp	r1, r22
 650:	17 06       	cpc	r1, r23
 652:	e8 07       	cpc	r30, r24
 654:	f9 07       	cpc	r31, r25
 656:	c0 f0       	brcs	.+48     	; 0x688 <__fp_cmp+0x46>
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	e4 07       	cpc	r30, r20
 65e:	f5 07       	cpc	r31, r21
 660:	98 f0       	brcs	.+38     	; 0x688 <__fp_cmp+0x46>
 662:	62 1b       	sub	r22, r18
 664:	73 0b       	sbc	r23, r19
 666:	84 0b       	sbc	r24, r20
 668:	95 0b       	sbc	r25, r21
 66a:	39 f4       	brne	.+14     	; 0x67a <__fp_cmp+0x38>
 66c:	0a 26       	eor	r0, r26
 66e:	61 f0       	breq	.+24     	; 0x688 <__fp_cmp+0x46>
 670:	23 2b       	or	r18, r19
 672:	24 2b       	or	r18, r20
 674:	25 2b       	or	r18, r21
 676:	21 f4       	brne	.+8      	; 0x680 <__fp_cmp+0x3e>
 678:	08 95       	ret
 67a:	0a 26       	eor	r0, r26
 67c:	09 f4       	brne	.+2      	; 0x680 <__fp_cmp+0x3e>
 67e:	a1 40       	sbci	r26, 0x01	; 1
 680:	a6 95       	lsr	r26
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	81 1d       	adc	r24, r1
 686:	81 1d       	adc	r24, r1
 688:	08 95       	ret

0000068a <__udivmodsi4>:
 68a:	a1 e2       	ldi	r26, 0x21	; 33
 68c:	1a 2e       	mov	r1, r26
 68e:	aa 1b       	sub	r26, r26
 690:	bb 1b       	sub	r27, r27
 692:	fd 01       	movw	r30, r26
 694:	0d c0       	rjmp	.+26     	; 0x6b0 <__udivmodsi4_ep>

00000696 <__udivmodsi4_loop>:
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	ee 1f       	adc	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	a2 17       	cp	r26, r18
 6a0:	b3 07       	cpc	r27, r19
 6a2:	e4 07       	cpc	r30, r20
 6a4:	f5 07       	cpc	r31, r21
 6a6:	20 f0       	brcs	.+8      	; 0x6b0 <__udivmodsi4_ep>
 6a8:	a2 1b       	sub	r26, r18
 6aa:	b3 0b       	sbc	r27, r19
 6ac:	e4 0b       	sbc	r30, r20
 6ae:	f5 0b       	sbc	r31, r21

000006b0 <__udivmodsi4_ep>:
 6b0:	66 1f       	adc	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	1a 94       	dec	r1
 6ba:	69 f7       	brne	.-38     	; 0x696 <__udivmodsi4_loop>
 6bc:	60 95       	com	r22
 6be:	70 95       	com	r23
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	9b 01       	movw	r18, r22
 6c6:	ac 01       	movw	r20, r24
 6c8:	bd 01       	movw	r22, r26
 6ca:	cf 01       	movw	r24, r30
 6cc:	08 95       	ret

000006ce <__tablejump2__>:
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	05 90       	lpm	r0, Z+
 6d4:	f4 91       	lpm	r31, Z
 6d6:	e0 2d       	mov	r30, r0
 6d8:	09 94       	ijmp

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
