
328P_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c5  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  000017db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	char DATA;
	DDRD = (1<<PIND);
  80:	29 b1       	in	r18, 0x09	; 9
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0xc>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	2a 95       	dec	r18
  8e:	e2 f7       	brpl	.-8      	; 0x88 <main+0x8>
  90:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  92:	1b b8       	out	0x0b, r1	; 11
	
    /* Replace with your application code */
	spiInitSlave ();
  94:	0e 94 58 00 	call	0xb0	; 0xb0 <spiInitSlave>
		
		DATA = spiReceive();
		PORTD ^= (1<<SPIE);	
		if(DATA == 'S')
		{
			PORTD ^= (1<<PIND0);
  98:	c1 e0       	ldi	r28, 0x01	; 1
    /* Replace with your application code */
	spiInitSlave ();
    while (1) 
    {
		
		DATA = spiReceive();
  9a:	0e 94 64 00 	call	0xc8	; 0xc8 <spiReceive>
		PORTD ^= (1<<SPIE);	
  9e:	9b b1       	in	r25, 0x0b	; 11
  a0:	90 58       	subi	r25, 0x80	; 128
  a2:	9b b9       	out	0x0b, r25	; 11
		if(DATA == 'S')
  a4:	83 35       	cpi	r24, 0x53	; 83
  a6:	c9 f7       	brne	.-14     	; 0x9a <main+0x1a>
		{
			PORTD ^= (1<<PIND0);
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	8c 27       	eor	r24, r28
  ac:	8b b9       	out	0x0b, r24	; 11
  ae:	f5 cf       	rjmp	.-22     	; 0x9a <main+0x1a>

000000b0 <spiInitSlave>:
	SPCR |= (1<<SPE);                // Enable SPI
}
void spiInitSlave(void)
{

	DDRB &= ~(1<<PINB1)|(1<<PINB2)|(1<<PINB0);  // SCK, MOSI and SS as inputs
  b0:	21 98       	cbi	0x04, 1	; 4
	DDRB |= (1<<PINB3);                  // MISO as output
  b2:	23 9a       	sbi	0x04, 3	; 4

	SPCR &= ~(1<<MSTR);                // Set as slave
  b4:	8c b5       	in	r24, 0x2c	; 44
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  ba:	8c b5       	in	r24, 0x2c	; 44
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPE);
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8c bd       	out	0x2c, r24	; 44
  c6:	08 95       	ret

000000c8 <spiReceive>:
}

char spiReceive(void)
{//Call in while(1)
	char dataIn;
	while(!(SPSR & (1<<SPIF)));    // wait until all data is received
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <spiReceive>
	dataIn = SPDR;
  ce:	8e b5       	in	r24, 0x2e	; 46
	return dataIn;
}
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
