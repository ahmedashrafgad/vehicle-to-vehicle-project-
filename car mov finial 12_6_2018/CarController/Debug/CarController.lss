
CarController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000872  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da7  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070c  00000000  00000000  0000201f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ac  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
   2:	00 00       	nop
   4:	48 c0       	rjmp	.+144    	; 0x96 <__bad_interrupt>
   6:	00 00       	nop
   8:	46 c0       	rjmp	.+140    	; 0x96 <__bad_interrupt>
   a:	00 00       	nop
   c:	44 c0       	rjmp	.+136    	; 0x96 <__bad_interrupt>
   e:	00 00       	nop
  10:	42 c0       	rjmp	.+132    	; 0x96 <__bad_interrupt>
  12:	00 00       	nop
  14:	40 c0       	rjmp	.+128    	; 0x96 <__bad_interrupt>
  16:	00 00       	nop
  18:	3e c0       	rjmp	.+124    	; 0x96 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3c c0       	rjmp	.+120    	; 0x96 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3a c0       	rjmp	.+116    	; 0x96 <__bad_interrupt>
  22:	00 00       	nop
  24:	38 c0       	rjmp	.+112    	; 0x96 <__bad_interrupt>
  26:	00 00       	nop
  28:	36 c0       	rjmp	.+108    	; 0x96 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	34 c0       	rjmp	.+104    	; 0x96 <__bad_interrupt>
  2e:	00 00       	nop
  30:	32 c0       	rjmp	.+100    	; 0x96 <__bad_interrupt>
  32:	00 00       	nop
  34:	9b c0       	rjmp	.+310    	; 0x16c <__vector_13>
  36:	00 00       	nop
  38:	2e c0       	rjmp	.+92     	; 0x96 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2c c0       	rjmp	.+88     	; 0x96 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2a c0       	rjmp	.+84     	; 0x96 <__bad_interrupt>
  42:	00 00       	nop
  44:	28 c0       	rjmp	.+80     	; 0x96 <__bad_interrupt>
  46:	00 00       	nop
  48:	26 c0       	rjmp	.+76     	; 0x96 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	24 c0       	rjmp	.+72     	; 0x96 <__bad_interrupt>
  4e:	00 00       	nop
  50:	22 c0       	rjmp	.+68     	; 0x96 <__bad_interrupt>
  52:	00 00       	nop
  54:	20 c0       	rjmp	.+64     	; 0x96 <__bad_interrupt>
  56:	00 00       	nop
  58:	1e c0       	rjmp	.+60     	; 0x96 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1c c0       	rjmp	.+56     	; 0x96 <__bad_interrupt>
  5e:	00 00       	nop
  60:	1a c0       	rjmp	.+52     	; 0x96 <__bad_interrupt>
  62:	00 00       	nop
  64:	18 c0       	rjmp	.+48     	; 0x96 <__bad_interrupt>
  66:	00 00       	nop
  68:	eb 00       	.word	0x00eb	; ????
  6a:	d7 00       	.word	0x00d7	; ????
  6c:	dc 00       	.word	0x00dc	; ????
  6e:	e1 00       	.word	0x00e1	; ????
  70:	e6 00       	.word	0x00e6	; ????
  72:	f0 00       	.word	0x00f0	; ????
  74:	f5 00       	.word	0x00f5	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a3 31       	cpi	r26, 0x13	; 19
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	85 d1       	rcall	.+778    	; 0x39e <main>
  94:	b2 c3       	rjmp	.+1892   	; 0x7fa <_exit>

00000096 <__bad_interrupt>:
  96:	b4 cf       	rjmp	.-152    	; 0x0 <__vectors>

00000098 <CarControlInit>:
unsigned char data ;


void CarControlInit(void)
{
	DDRC  |= (1 << PINC2) | (1 << PINC3)| (1 << PINC4); /* for two motors output */
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8c 61       	ori	r24, 0x1C	; 28
  9c:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1 << PINC2) | (1 << PINC3)| (1 << PINC4));  /* set all portC motor pins */
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	83 7e       	andi	r24, 0xE3	; 227
  a2:	88 b9       	out	0x08, r24	; 8
	DDRB |= (1<<IN1);
  a4:	21 9a       	sbi	0x04, 1	; 4
	PORTB &=~ (1<<IN1);
  a6:	29 98       	cbi	0x05, 1	; 5
	PORTC |= (1<<ENA)|(1<<ENB);
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	88 b9       	out	0x08, r24	; 8
  ae:	08 95       	ret

000000b0 <speedControl>:
}
void speedControl(double duty_Cycle)
{
	DDRD = (1<<PIND6);
  b0:	20 e4       	ldi	r18, 0x40	; 64
  b2:	2a b9       	out	0x0a, r18	; 10
	TCCR0A = (1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
  b4:	23 e8       	ldi	r18, 0x83	; 131
  b6:	24 bd       	out	0x24, r18	; 36
	TIMSK0 = (1<<TOIE0);
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = (duty_Cycle/100.0)*255.0;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	48 ec       	ldi	r20, 0xC8	; 200
  c4:	52 e4       	ldi	r21, 0x42	; 66
  c6:	c4 d1       	rcall	.+904    	; 0x450 <__divsf3>
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	4f e7       	ldi	r20, 0x7F	; 127
  ce:	53 e4       	ldi	r21, 0x43	; 67
  d0:	09 d3       	rcall	.+1554   	; 0x6e4 <__mulsf3>
  d2:	26 d2       	rcall	.+1100   	; 0x520 <__fixunssfsi>
  d4:	67 bd       	out	0x27, r22	; 39
	
	//sei();
	TCCR0B = (1<<CS00)|(1<<CS02);
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	85 bd       	out	0x25, r24	; 37
  da:	08 95       	ret

000000dc <ultrasonicIinit>:
}
void ultrasonicIinit(void)
{
	
	
	DDRC |=(1<<Trigger_pin);		/* Make trigger pin as output */
  dc:	3d 9a       	sbi	0x07, 5	; 7
	PORTB |= (1<<Echo_pin);		/* Turn on Pull-up */
  de:	28 9a       	sbi	0x05, 0	; 5
	
	
	//	sei();			/* Enable global interrupt */
	TIMSK1 = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
  e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ea:	08 95       	ret

000000ec <getDistance>:
	
	
}
double getDistance(void)
{
	PORTC |= (1 << Trigger_pin);
  ec:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <getDistance+0x4>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <getDistance+0xa>
	_delay_us(10);
	PORTC &= (~(1 << Trigger_pin));
  f6:	45 98       	cbi	0x08, 5	; 8
	
	TCNT1 = 0;	/* Clear Timer counter */
  f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	86 bb       	out	0x16, r24	; 22
	TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	86 bb       	out	0x16, r24	; 22

	/*Calculate width of Echo by Input Capture (ICP) */
	
	while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for rising edge */
 10e:	b5 9b       	sbis	0x16, 5	; 22
 110:	fe cf       	rjmp	.-4      	; 0x10e <getDistance+0x22>
	TCNT1 = 0;	/* Clear Timer counter */
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 120:	90 e2       	ldi	r25, 0x20	; 32
 122:	96 bb       	out	0x16, r25	; 22
	TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
 124:	86 bb       	out	0x16, r24	; 22
	TimerOverflow = 0;/* Clear Timer overflow count */
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for falling edge */
 12e:	b5 9b       	sbis	0x16, 5	; 22
 130:	fe cf       	rjmp	.-4      	; 0x12e <getDistance+0x42>
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
 132:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 136:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <count>
 142:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <count+0x1>
 146:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count+0x2>
 14a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <count+0x3>
	/* 8MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 466.47;
 14e:	16 d2       	rcall	.+1068   	; 0x57c <__floatsisf>
 150:	29 e2       	ldi	r18, 0x29	; 41
 152:	3c e3       	ldi	r19, 0x3C	; 60
 154:	49 ee       	ldi	r20, 0xE9	; 233
 156:	53 e4       	ldi	r21, 0x43	; 67
 158:	7b d1       	rcall	.+758    	; 0x450 <__divsf3>
 15a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <distance>
 15e:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <distance+0x1>
 162:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <distance+0x2>
 166:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <distance+0x3>
 16a:	08 95       	ret

0000016c <__vector_13>:
// ISR(TIMER0_OVF_vect)
// {
// 	OCR0A = (dutyCycle/100.0)*255.0;
// }
ISR(TIMER1_OVF_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
	cli();
 17a:	f8 94       	cli
	TimerOverflow++;	/* Increment Timer Overflow count */
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	reti();
 18e:	18 95       	reti
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <moveCar>:
void moveCar(movement direction)
{   
	 switch(direction)
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	87 30       	cpi	r24, 0x07	; 7
 1a2:	91 05       	cpc	r25, r1
 1a4:	30 f5       	brcc	.+76     	; 0x1f2 <moveCar+0x54>
 1a6:	fc 01       	movw	r30, r24
 1a8:	ec 5c       	subi	r30, 0xCC	; 204
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	20 c3       	rjmp	.+1600   	; 0x7ee <__tablejump2__>
   {
	case forward:
		setBit(PORTB,IN1);
 1ae:	29 9a       	sbi	0x05, 1	; 5
		clearBit(PORTC,IN2);
 1b0:	44 98       	cbi	0x08, 4	; 8
		setBit(PORTC,IN3);
 1b2:	43 9a       	sbi	0x08, 3	; 8
		clearBit(PORTC,IN4);
 1b4:	42 98       	cbi	0x08, 2	; 8
	    break;
 1b6:	08 95       	ret
	case backword:
	     clearBit(PORTB,IN1);
 1b8:	29 98       	cbi	0x05, 1	; 5
	     setBit(PORTC,IN2);
 1ba:	44 9a       	sbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 1bc:	43 98       	cbi	0x08, 3	; 8
	     setBit(PORTC,IN4);
 1be:	42 9a       	sbi	0x08, 2	; 8
		 break;
 1c0:	08 95       	ret
	case forward_left:
	     setBit(PORTB,IN1);
 1c2:	29 9a       	sbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 1c4:	44 98       	cbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 1c6:	43 98       	cbi	0x08, 3	; 8
	     clearBit(PORTC,IN4);
 1c8:	42 98       	cbi	0x08, 2	; 8
		 break;
 1ca:	08 95       	ret
	case forward_right:
	     clearBit(PORTB,IN1);
 1cc:	29 98       	cbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 1ce:	44 98       	cbi	0x08, 4	; 8
	     setBit(PORTC,IN3);
 1d0:	43 9a       	sbi	0x08, 3	; 8
	     clearBit(PORTC,IN4);
 1d2:	42 98       	cbi	0x08, 2	; 8
		 break;
 1d4:	08 95       	ret
	case stop:
	     clearBit(PORTB,IN1);
 1d6:	29 98       	cbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 1d8:	44 98       	cbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 1da:	43 98       	cbi	0x08, 3	; 8
	     clearBit(PORTC,IN4);
 1dc:	42 98       	cbi	0x08, 2	; 8
		 break;
 1de:	08 95       	ret
	case back_left:
         clearBit(PORTB,IN1);
 1e0:	29 98       	cbi	0x05, 1	; 5
         setBit(PORTC,IN2);
 1e2:	44 9a       	sbi	0x08, 4	; 8
         clearBit(PORTC,IN3);
 1e4:	43 98       	cbi	0x08, 3	; 8
         clearBit(PORTC,IN4);
 1e6:	42 98       	cbi	0x08, 2	; 8
		 break;
 1e8:	08 95       	ret
	case back_right:
	     clearBit(PORTB,IN1);
 1ea:	29 98       	cbi	0x05, 1	; 5
	     clearBit(PORTC,IN2);
 1ec:	44 98       	cbi	0x08, 4	; 8
	     clearBit(PORTC,IN3);
 1ee:	43 98       	cbi	0x08, 3	; 8
	     setBit(PORTC,IN4);
 1f0:	42 9a       	sbi	0x08, 2	; 8
 1f2:	08 95       	ret

000001f4 <speed_car>:
		 break;
}
}
char speed_car(void)
{ 
	if(data == '0')
 1f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 1f8:	80 33       	cpi	r24, 0x30	; 48
 1fa:	21 f4       	brne	.+8      	; 0x204 <speed_car+0x10>
	{
		data = 'S';
 1fc:	83 e5       	ldi	r24, 0x53	; 83
 1fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <data>
 202:	4f c0       	rjmp	.+158    	; 0x2a2 <speed_car+0xae>
	}
	else if(data == '1')
 204:	81 33       	cpi	r24, 0x31	; 49
 206:	31 f4       	brne	.+12     	; 0x214 <speed_car+0x20>
	{
		speedControl(10);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	91 e4       	ldi	r25, 0x41	; 65
 210:	4f df       	rcall	.-354    	; 0xb0 <speedControl>
 212:	47 c0       	rjmp	.+142    	; 0x2a2 <speed_car+0xae>
	}
	else if(data == '2')
 214:	82 33       	cpi	r24, 0x32	; 50
 216:	31 f4       	brne	.+12     	; 0x224 <speed_car+0x30>
	{
		speedControl(12);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	91 e4       	ldi	r25, 0x41	; 65
 220:	47 df       	rcall	.-370    	; 0xb0 <speedControl>
 222:	3f c0       	rjmp	.+126    	; 0x2a2 <speed_car+0xae>
	}
	else if(data == '3')
 224:	83 33       	cpi	r24, 0x33	; 51
 226:	31 f4       	brne	.+12     	; 0x234 <speed_car+0x40>
	{
		speedControl(14);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	80 e6       	ldi	r24, 0x60	; 96
 22e:	91 e4       	ldi	r25, 0x41	; 65
 230:	3f df       	rcall	.-386    	; 0xb0 <speedControl>
 232:	37 c0       	rjmp	.+110    	; 0x2a2 <speed_car+0xae>
	}
	else if(data == '4')
 234:	84 33       	cpi	r24, 0x34	; 52
 236:	31 f4       	brne	.+12     	; 0x244 <speed_car+0x50>
	{
		speedControl(16);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	91 e4       	ldi	r25, 0x41	; 65
 240:	37 df       	rcall	.-402    	; 0xb0 <speedControl>
 242:	2f c0       	rjmp	.+94     	; 0x2a2 <speed_car+0xae>
	}
	else if(data == '5')
 244:	85 33       	cpi	r24, 0x35	; 53
	{
		speedControl(18);
 246:	31 f4       	brne	.+12     	; 0x254 <speed_car+0x60>
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	80 e9       	ldi	r24, 0x90	; 144
 24e:	91 e4       	ldi	r25, 0x41	; 65
 250:	2f df       	rcall	.-418    	; 0xb0 <speedControl>
	}
	else if(data == '6')
 252:	27 c0       	rjmp	.+78     	; 0x2a2 <speed_car+0xae>
	{
		speedControl(20);
 254:	86 33       	cpi	r24, 0x36	; 54
 256:	31 f4       	brne	.+12     	; 0x264 <speed_car+0x70>
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 ea       	ldi	r24, 0xA0	; 160
 25e:	91 e4       	ldi	r25, 0x41	; 65
	}
	else if (data == '7')
 260:	27 df       	rcall	.-434    	; 0xb0 <speedControl>
	{
		speedControl(30);
 262:	1f c0       	rjmp	.+62     	; 0x2a2 <speed_car+0xae>
 264:	87 33       	cpi	r24, 0x37	; 55
 266:	31 f4       	brne	.+12     	; 0x274 <speed_car+0x80>
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 ef       	ldi	r24, 0xF0	; 240
 26e:	91 e4       	ldi	r25, 0x41	; 65
	}
	else if(data == 'W')
 270:	1f df       	rcall	.-450    	; 0xb0 <speedControl>
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <speed_car+0xae>
	{
		setBit(PORTD,Forward_Led);
 274:	87 35       	cpi	r24, 0x57	; 87
 276:	11 f4       	brne	.+4      	; 0x27c <speed_car+0x88>
	}
	else if(data == 'w')
 278:	5b 9a       	sbi	0x0b, 3	; 11
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <speed_car+0xae>
	{
		clearBit(PORTD,Forward_Led);
 27c:	87 37       	cpi	r24, 0x77	; 119
 27e:	11 f4       	brne	.+4      	; 0x284 <speed_car+0x90>
	}
	else if(data == 'U')
 280:	5b 98       	cbi	0x0b, 3	; 11
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <speed_car+0xae>
	{
		setBit(PORTD,Backward_Led);
 284:	85 35       	cpi	r24, 0x55	; 85
 286:	11 f4       	brne	.+4      	; 0x28c <speed_car+0x98>
	}
	else if(data == 'u')
 288:	5c 9a       	sbi	0x0b, 4	; 11
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <speed_car+0xae>
	{
		clearBit(PORTD,Backward_Led);
 28c:	85 37       	cpi	r24, 0x75	; 117
 28e:	11 f4       	brne	.+4      	; 0x294 <speed_car+0xa0>
	}
	else if(data == 'V')
 290:	5c 98       	cbi	0x0b, 4	; 11
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <speed_car+0xae>
	{
		setBit(PORTD,Buzzer);
 294:	86 35       	cpi	r24, 0x56	; 86
 296:	11 f4       	brne	.+4      	; 0x29c <speed_car+0xa8>
	}
	else if(data == 'v')
 298:	5d 9a       	sbi	0x0b, 5	; 11
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <speed_car+0xae>
	{
		clearBit(PORTD,Buzzer);
 29c:	86 37       	cpi	r24, 0x76	; 118
	}
	return data;
	
}
 29e:	09 f4       	brne	.+2      	; 0x2a2 <speed_car+0xae>
 2a0:	5d 98       	cbi	0x0b, 5	; 11
 2a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 2a6:	08 95       	ret

000002a8 <mov_3_Direc>:
void mov_3_Direc(void)
{
	if(data == 'B')
 2a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 2ac:	82 34       	cpi	r24, 0x42	; 66
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <mov_3_Direc+0xe>
	{
		moveCar(backword);
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	75 cf       	rjmp	.-278    	; 0x19e <moveCar>
 2b4:	08 95       	ret
	}
	else if(data == 'G'||data == 'L')
 2b6:	87 34       	cpi	r24, 0x47	; 71
 2b8:	11 f0       	breq	.+4      	; 0x2be <mov_3_Direc+0x16>
 2ba:	8c 34       	cpi	r24, 0x4C	; 76
	{
		moveCar(forward_left);
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <mov_3_Direc+0x1c>
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	6e cf       	rjmp	.-292    	; 0x19e <moveCar>
	}
	else if(data == 'I'|| data == 'R')
 2c2:	08 95       	ret
 2c4:	89 34       	cpi	r24, 0x49	; 73
 2c6:	11 f0       	breq	.+4      	; 0x2cc <mov_3_Direc+0x24>
	{
		moveCar(forward_right);
 2c8:	82 35       	cpi	r24, 0x52	; 82
 2ca:	19 f4       	brne	.+6      	; 0x2d2 <mov_3_Direc+0x2a>
 2cc:	84 e0       	ldi	r24, 0x04	; 4
	}
	else if(data == 'S')
 2ce:	67 cf       	rjmp	.-306    	; 0x19e <moveCar>
	{
		moveCar(stop);
 2d0:	08 95       	ret
 2d2:	83 35       	cpi	r24, 0x53	; 83
 2d4:	19 f4       	brne	.+6      	; 0x2dc <mov_3_Direc+0x34>
	}
	else if(data == 'H')
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	62 cf       	rjmp	.-316    	; 0x19e <moveCar>
	{
		moveCar(back_left);
 2da:	08 95       	ret
 2dc:	88 34       	cpi	r24, 0x48	; 72
 2de:	19 f4       	brne	.+6      	; 0x2e6 <mov_3_Direc+0x3e>
	}
	else if(data == 'J')
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	5d cf       	rjmp	.-326    	; 0x19e <moveCar>
	{
		moveCar(back_right);
 2e4:	08 95       	ret
 2e6:	8a 34       	cpi	r24, 0x4A	; 74
 2e8:	11 f4       	brne	.+4      	; 0x2ee <mov_3_Direc+0x46>
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	58 cf       	rjmp	.-336    	; 0x19e <moveCar>
 2ee:	08 95       	ret

000002f0 <mov_all_Direc>:

	
}
void mov_all_Direc(void){
	//PORTD &= ~((1<<PIND2));
	if(data == 'F')
 2f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 2f4:	86 34       	cpi	r24, 0x46	; 70
 2f6:	11 f4       	brne	.+4      	; 0x2fc <mov_all_Direc+0xc>
	{
		
		moveCar(forward);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	51 df       	rcall	.-350    	; 0x19e <moveCar>
	}
	if(data == 'B')
 2fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data>
 300:	82 34       	cpi	r24, 0x42	; 66
	{
		moveCar(backword);
 302:	19 f4       	brne	.+6      	; 0x30a <mov_all_Direc+0x1a>
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	4b cf       	rjmp	.-362    	; 0x19e <moveCar>
		
	}
	else if(data == 'G'||data == 'L')
 308:	08 95       	ret
 30a:	87 34       	cpi	r24, 0x47	; 71
 30c:	11 f0       	breq	.+4      	; 0x312 <mov_all_Direc+0x22>
	{
		
		
		moveCar(forward_left);
 30e:	8c 34       	cpi	r24, 0x4C	; 76
 310:	19 f4       	brne	.+6      	; 0x318 <mov_all_Direc+0x28>
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	44 cf       	rjmp	.-376    	; 0x19e <moveCar>
		
	}
	else if(data == 'I'|| data == 'R')
 316:	08 95       	ret
 318:	89 34       	cpi	r24, 0x49	; 73
	{
		
		
		moveCar(forward_right);
 31a:	11 f0       	breq	.+4      	; 0x320 <mov_all_Direc+0x30>
 31c:	82 35       	cpi	r24, 0x52	; 82
 31e:	19 f4       	brne	.+6      	; 0x326 <mov_all_Direc+0x36>
		
	}
	else if(data == 'S')
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	3d cf       	rjmp	.-390    	; 0x19e <moveCar>
	{
		
		moveCar(stop);
 324:	08 95       	ret
 326:	83 35       	cpi	r24, 0x53	; 83
 328:	19 f4       	brne	.+6      	; 0x330 <mov_all_Direc+0x40>
	}
	else if(data == 'H')
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	38 cf       	rjmp	.-400    	; 0x19e <moveCar>
	{
		
		moveCar(back_left);
 32e:	08 95       	ret
 330:	88 34       	cpi	r24, 0x48	; 72
 332:	19 f4       	brne	.+6      	; 0x33a <mov_all_Direc+0x4a>
	}
	else if(data == 'J')
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	33 cf       	rjmp	.-410    	; 0x19e <moveCar>
	{
		
		moveCar(back_right);
 338:	08 95       	ret
 33a:	8a 34       	cpi	r24, 0x4A	; 74
 33c:	11 f4       	brne	.+4      	; 0x342 <mov_all_Direc+0x52>
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	2e cf       	rjmp	.-420    	; 0x19e <moveCar>
 342:	08 95       	ret

00000344 <setDirection>:
		
	}
	
}

void setDirection(void){ 
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
		
	if(Range <= 15)
 34c:	c0 90 0f 01 	lds	r12, 0x010F	; 0x80010f <Range>
 350:	d0 90 10 01 	lds	r13, 0x0110	; 0x800110 <Range+0x1>
 354:	e0 90 11 01 	lds	r14, 0x0111	; 0x800111 <Range+0x2>
 358:	f0 90 12 01 	lds	r15, 0x0112	; 0x800112 <Range+0x3>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e7       	ldi	r20, 0x70	; 112
 362:	51 e4       	ldi	r21, 0x41	; 65
 364:	c7 01       	movw	r24, r14
 366:	b6 01       	movw	r22, r12
 368:	6f d0       	rcall	.+222    	; 0x448 <__cmpsf2>
 36a:	18 16       	cp	r1, r24
 36c:	2c f0       	brlt	.+10     	; 0x378 <setDirection+0x34>
	{
		PORTD &= ~((1<<PIND2));
		moveCar(stop);
 36e:	5a 98       	cbi	0x0b, 2	; 11
	    mov_3_Direc();	
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	15 df       	rcall	.-470    	; 0x19e <moveCar>
 374:	99 df       	rcall	.-206    	; 0x2a8 <mov_3_Direc>
	}
	
	else if (Range >= 15)
 376:	0e c0       	rjmp	.+28     	; 0x394 <setDirection+0x50>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e7       	ldi	r20, 0x70	; 112
 37e:	51 e4       	ldi	r21, 0x41	; 65
 380:	c7 01       	movw	r24, r14
 382:	b6 01       	movw	r22, r12
	
	{
		mov_all_Direc();
 384:	ab d1       	rcall	.+854    	; 0x6dc <__gesf2>
 386:	88 23       	and	r24, r24
	}
	else
	{
		PORTD |= (1<<PIND2);
 388:	14 f0       	brlt	.+4      	; 0x38e <setDirection+0x4a>
		
		moveCar(stop);
 38a:	b2 df       	rcall	.-156    	; 0x2f0 <mov_all_Direc>
 38c:	03 c0       	rjmp	.+6      	; 0x394 <setDirection+0x50>
 38e:	5a 9a       	sbi	0x0b, 2	; 11
		
	}
	
	
}
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	05 df       	rcall	.-502    	; 0x19e <moveCar>
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	08 95       	ret

0000039e <main>:
double dutyCycle = 0;
double Range;


int main(void)
{   DDRD |= (1<<PIND2)|(1<<PIND3)|(1<<Forward_Led)|(1<<Backward_Led);
 39e:	8a b1       	in	r24, 0x0a	; 10
 3a0:	8c 61       	ori	r24, 0x1C	; 28
 3a2:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PIND2)|(1<<PIND3)|(1<<Forward_Led)|(1<<Backward_Led));
 3a4:	8b b1       	in	r24, 0x0b	; 11
 3a6:	83 7e       	andi	r24, 0xE3	; 227
	
	
	//char string[10];
	ultrasonicIinit();
	CarControlInit();
 3a8:	8b b9       	out	0x0b, r24	; 11
	uart_init(9600);
 3aa:	98 de       	rcall	.-720    	; 0xdc <ultrasonicIinit>
 3ac:	75 de       	rcall	.-790    	; 0x98 <CarControlInit>
 3ae:	80 e8       	ldi	r24, 0x80	; 128
	speedControl(dutyCycle);
 3b0:	95 e2       	ldi	r25, 0x25	; 37
 3b2:	18 d0       	rcall	.+48     	; 0x3e4 <uart_init>
 3b4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <dutyCycle>
 3b8:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <dutyCycle+0x1>
	//sei();
	
	while(1)
	{
			 data = uart_Receive();
 3bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyCycle+0x2>
 3c0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dutyCycle+0x3>
			 //Range = 30;
			  speed_car();
 3c4:	75 de       	rcall	.-790    	; 0xb0 <speedControl>
			 Range = getDistance();
 3c6:	38 d0       	rcall	.+112    	; 0x438 <uart_Receive>
 3c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <data>
 3cc:	13 df       	rcall	.-474    	; 0x1f4 <speed_car>
 3ce:	8e de       	rcall	.-740    	; 0xec <getDistance>
 3d0:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <Range>
 3d4:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <Range+0x1>
			 
			 setDirection();
 3d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Range+0x2>
 3dc:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <Range+0x3>
 3e0:	b1 df       	rcall	.-158    	; 0x344 <setDirection>
 3e2:	f1 cf       	rjmp	.-30     	; 0x3c6 <main+0x28>

000003e4 <uart_init>:
/* initiation UART module*/
void uart_init(unsigned short int baudrate)
{
	// calculate baudrate 
	unsigned short baudRateValue ;
	baudRateValue = (F_CPU/(baudrate*16UL))-1 ;
 3e4:	a0 e0       	ldi	r26, 0x00	; 0
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	aa 1f       	adc	r26, r26
 3f6:	bb 1f       	adc	r27, r27
 3f8:	9c 01       	movw	r18, r24
 3fa:	ad 01       	movw	r20, r26
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	44 1f       	adc	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	44 1f       	adc	r20, r20
 40a:	55 1f       	adc	r21, r21
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	72 e1       	ldi	r23, 0x12	; 18
 410:	8a e7       	ldi	r24, 0x7A	; 122
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	ca d1       	rcall	.+916    	; 0x7aa <__udivmodsi4>
 416:	21 50       	subi	r18, 0x01	; 1
 418:	31 09       	sbc	r19, r1
	// baudrate register low , high , set value
	UBRR0L = baudRateValue ; 
 41a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (baudRateValue >> 8);
 41e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	// 8- bit data 
	UCSR0C |=(1 << UCSZ00)|(1<<UCSZ01);//|(1<<UMSEL00);
 422:	e2 ec       	ldi	r30, 0xC2	; 194
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	86 60       	ori	r24, 0x06	; 6
 42a:	80 83       	st	Z, r24
	 
	// enable RX , TX
	UCSR0B |=(1 << RXEN0) | (1<<TXEN0)| (1<<RXCIE0) ;
 42c:	e1 ec       	ldi	r30, 0xC1	; 193
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	88 69       	ori	r24, 0x98	; 152
 434:	80 83       	st	Z, r24
 436:	08 95       	ret

00000438 <uart_Receive>:
	
}
/* receive function  ( return one byte) */
unsigned char uart_Receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
 438:	e0 ec       	ldi	r30, 0xC0	; 192
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	88 23       	and	r24, r24
 440:	ec f7       	brge	.-6      	; 0x43c <uart_Receive+0x4>
	return UDR0 ;
 442:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 446:	08 95       	ret

00000448 <__cmpsf2>:
 448:	d4 d0       	rcall	.+424    	; 0x5f2 <__fp_cmp>
 44a:	08 f4       	brcc	.+2      	; 0x44e <__cmpsf2+0x6>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	08 95       	ret

00000450 <__divsf3>:
 450:	0c d0       	rcall	.+24     	; 0x46a <__divsf3x>
 452:	0a c1       	rjmp	.+532    	; 0x668 <__fp_round>
 454:	02 d1       	rcall	.+516    	; 0x65a <__fp_pscB>
 456:	40 f0       	brcs	.+16     	; 0x468 <__divsf3+0x18>
 458:	f9 d0       	rcall	.+498    	; 0x64c <__fp_pscA>
 45a:	30 f0       	brcs	.+12     	; 0x468 <__divsf3+0x18>
 45c:	21 f4       	brne	.+8      	; 0x466 <__divsf3+0x16>
 45e:	5f 3f       	cpi	r21, 0xFF	; 255
 460:	19 f0       	breq	.+6      	; 0x468 <__divsf3+0x18>
 462:	eb c0       	rjmp	.+470    	; 0x63a <__fp_inf>
 464:	51 11       	cpse	r21, r1
 466:	34 c1       	rjmp	.+616    	; 0x6d0 <__fp_szero>
 468:	ee c0       	rjmp	.+476    	; 0x646 <__fp_nan>

0000046a <__divsf3x>:
 46a:	0f d1       	rcall	.+542    	; 0x68a <__fp_split3>
 46c:	98 f3       	brcs	.-26     	; 0x454 <__divsf3+0x4>

0000046e <__divsf3_pse>:
 46e:	99 23       	and	r25, r25
 470:	c9 f3       	breq	.-14     	; 0x464 <__divsf3+0x14>
 472:	55 23       	and	r21, r21
 474:	b1 f3       	breq	.-20     	; 0x462 <__divsf3+0x12>
 476:	95 1b       	sub	r25, r21
 478:	55 0b       	sbc	r21, r21
 47a:	bb 27       	eor	r27, r27
 47c:	aa 27       	eor	r26, r26
 47e:	62 17       	cp	r22, r18
 480:	73 07       	cpc	r23, r19
 482:	84 07       	cpc	r24, r20
 484:	38 f0       	brcs	.+14     	; 0x494 <__divsf3_pse+0x26>
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	44 1f       	adc	r20, r20
 490:	aa 1f       	adc	r26, r26
 492:	a9 f3       	breq	.-22     	; 0x47e <__divsf3_pse+0x10>
 494:	33 d0       	rcall	.+102    	; 0x4fc <__divsf3_pse+0x8e>
 496:	0e 2e       	mov	r0, r30
 498:	3a f0       	brmi	.+14     	; 0x4a8 <__divsf3_pse+0x3a>
 49a:	e0 e8       	ldi	r30, 0x80	; 128
 49c:	30 d0       	rcall	.+96     	; 0x4fe <__divsf3_pse+0x90>
 49e:	91 50       	subi	r25, 0x01	; 1
 4a0:	50 40       	sbci	r21, 0x00	; 0
 4a2:	e6 95       	lsr	r30
 4a4:	00 1c       	adc	r0, r0
 4a6:	ca f7       	brpl	.-14     	; 0x49a <__divsf3_pse+0x2c>
 4a8:	29 d0       	rcall	.+82     	; 0x4fc <__divsf3_pse+0x8e>
 4aa:	fe 2f       	mov	r31, r30
 4ac:	27 d0       	rcall	.+78     	; 0x4fc <__divsf3_pse+0x8e>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	bb 1f       	adc	r27, r27
 4b6:	26 17       	cp	r18, r22
 4b8:	37 07       	cpc	r19, r23
 4ba:	48 07       	cpc	r20, r24
 4bc:	ab 07       	cpc	r26, r27
 4be:	b0 e8       	ldi	r27, 0x80	; 128
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__divsf3_pse+0x56>
 4c2:	bb 0b       	sbc	r27, r27
 4c4:	80 2d       	mov	r24, r0
 4c6:	bf 01       	movw	r22, r30
 4c8:	ff 27       	eor	r31, r31
 4ca:	93 58       	subi	r25, 0x83	; 131
 4cc:	5f 4f       	sbci	r21, 0xFF	; 255
 4ce:	2a f0       	brmi	.+10     	; 0x4da <__divsf3_pse+0x6c>
 4d0:	9e 3f       	cpi	r25, 0xFE	; 254
 4d2:	51 05       	cpc	r21, r1
 4d4:	68 f0       	brcs	.+26     	; 0x4f0 <__divsf3_pse+0x82>
 4d6:	b1 c0       	rjmp	.+354    	; 0x63a <__fp_inf>
 4d8:	fb c0       	rjmp	.+502    	; 0x6d0 <__fp_szero>
 4da:	5f 3f       	cpi	r21, 0xFF	; 255
 4dc:	ec f3       	brlt	.-6      	; 0x4d8 <__divsf3_pse+0x6a>
 4de:	98 3e       	cpi	r25, 0xE8	; 232
 4e0:	dc f3       	brlt	.-10     	; 0x4d8 <__divsf3_pse+0x6a>
 4e2:	86 95       	lsr	r24
 4e4:	77 95       	ror	r23
 4e6:	67 95       	ror	r22
 4e8:	b7 95       	ror	r27
 4ea:	f7 95       	ror	r31
 4ec:	9f 5f       	subi	r25, 0xFF	; 255
 4ee:	c9 f7       	brne	.-14     	; 0x4e2 <__divsf3_pse+0x74>
 4f0:	88 0f       	add	r24, r24
 4f2:	91 1d       	adc	r25, r1
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	97 f9       	bld	r25, 7
 4fa:	08 95       	ret
 4fc:	e1 e0       	ldi	r30, 0x01	; 1
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	bb 1f       	adc	r27, r27
 506:	62 17       	cp	r22, r18
 508:	73 07       	cpc	r23, r19
 50a:	84 07       	cpc	r24, r20
 50c:	ba 07       	cpc	r27, r26
 50e:	20 f0       	brcs	.+8      	; 0x518 <__divsf3_pse+0xaa>
 510:	62 1b       	sub	r22, r18
 512:	73 0b       	sbc	r23, r19
 514:	84 0b       	sbc	r24, r20
 516:	ba 0b       	sbc	r27, r26
 518:	ee 1f       	adc	r30, r30
 51a:	88 f7       	brcc	.-30     	; 0x4fe <__divsf3_pse+0x90>
 51c:	e0 95       	com	r30
 51e:	08 95       	ret

00000520 <__fixunssfsi>:
 520:	bc d0       	rcall	.+376    	; 0x69a <__fp_splitA>
 522:	88 f0       	brcs	.+34     	; 0x546 <__fixunssfsi+0x26>
 524:	9f 57       	subi	r25, 0x7F	; 127
 526:	90 f0       	brcs	.+36     	; 0x54c <__fixunssfsi+0x2c>
 528:	b9 2f       	mov	r27, r25
 52a:	99 27       	eor	r25, r25
 52c:	b7 51       	subi	r27, 0x17	; 23
 52e:	a0 f0       	brcs	.+40     	; 0x558 <__fixunssfsi+0x38>
 530:	d1 f0       	breq	.+52     	; 0x566 <__fixunssfsi+0x46>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	1a f0       	brmi	.+6      	; 0x542 <__fixunssfsi+0x22>
 53c:	ba 95       	dec	r27
 53e:	c9 f7       	brne	.-14     	; 0x532 <__fixunssfsi+0x12>
 540:	12 c0       	rjmp	.+36     	; 0x566 <__fixunssfsi+0x46>
 542:	b1 30       	cpi	r27, 0x01	; 1
 544:	81 f0       	breq	.+32     	; 0x566 <__fixunssfsi+0x46>
 546:	c3 d0       	rcall	.+390    	; 0x6ce <__fp_zero>
 548:	b1 e0       	ldi	r27, 0x01	; 1
 54a:	08 95       	ret
 54c:	c0 c0       	rjmp	.+384    	; 0x6ce <__fp_zero>
 54e:	67 2f       	mov	r22, r23
 550:	78 2f       	mov	r23, r24
 552:	88 27       	eor	r24, r24
 554:	b8 5f       	subi	r27, 0xF8	; 248
 556:	39 f0       	breq	.+14     	; 0x566 <__fixunssfsi+0x46>
 558:	b9 3f       	cpi	r27, 0xF9	; 249
 55a:	cc f3       	brlt	.-14     	; 0x54e <__fixunssfsi+0x2e>
 55c:	86 95       	lsr	r24
 55e:	77 95       	ror	r23
 560:	67 95       	ror	r22
 562:	b3 95       	inc	r27
 564:	d9 f7       	brne	.-10     	; 0x55c <__fixunssfsi+0x3c>
 566:	3e f4       	brtc	.+14     	; 0x576 <__fixunssfsi+0x56>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__floatunsisf>:
 578:	e8 94       	clt
 57a:	09 c0       	rjmp	.+18     	; 0x58e <__floatsisf+0x12>

0000057c <__floatsisf>:
 57c:	97 fb       	bst	r25, 7
 57e:	3e f4       	brtc	.+14     	; 0x58e <__floatsisf+0x12>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	99 23       	and	r25, r25
 590:	a9 f0       	breq	.+42     	; 0x5bc <__floatsisf+0x40>
 592:	f9 2f       	mov	r31, r25
 594:	96 e9       	ldi	r25, 0x96	; 150
 596:	bb 27       	eor	r27, r27
 598:	93 95       	inc	r25
 59a:	f6 95       	lsr	r31
 59c:	87 95       	ror	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b7 95       	ror	r27
 5a4:	f1 11       	cpse	r31, r1
 5a6:	f8 cf       	rjmp	.-16     	; 0x598 <__floatsisf+0x1c>
 5a8:	fa f4       	brpl	.+62     	; 0x5e8 <__floatsisf+0x6c>
 5aa:	bb 0f       	add	r27, r27
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__floatsisf+0x36>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	1b c0       	rjmp	.+54     	; 0x5e8 <__floatsisf+0x6c>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	16 c0       	rjmp	.+44     	; 0x5e8 <__floatsisf+0x6c>
 5bc:	88 23       	and	r24, r24
 5be:	11 f0       	breq	.+4      	; 0x5c4 <__floatsisf+0x48>
 5c0:	96 e9       	ldi	r25, 0x96	; 150
 5c2:	11 c0       	rjmp	.+34     	; 0x5e6 <__floatsisf+0x6a>
 5c4:	77 23       	and	r23, r23
 5c6:	21 f0       	breq	.+8      	; 0x5d0 <__floatsisf+0x54>
 5c8:	9e e8       	ldi	r25, 0x8E	; 142
 5ca:	87 2f       	mov	r24, r23
 5cc:	76 2f       	mov	r23, r22
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <__floatsisf+0x5e>
 5d0:	66 23       	and	r22, r22
 5d2:	71 f0       	breq	.+28     	; 0x5f0 <__floatsisf+0x74>
 5d4:	96 e8       	ldi	r25, 0x86	; 134
 5d6:	86 2f       	mov	r24, r22
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	2a f0       	brmi	.+10     	; 0x5e8 <__floatsisf+0x6c>
 5de:	9a 95       	dec	r25
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	88 1f       	adc	r24, r24
 5e6:	da f7       	brpl	.-10     	; 0x5de <__floatsisf+0x62>
 5e8:	88 0f       	add	r24, r24
 5ea:	96 95       	lsr	r25
 5ec:	87 95       	ror	r24
 5ee:	97 f9       	bld	r25, 7
 5f0:	08 95       	ret

000005f2 <__fp_cmp>:
 5f2:	99 0f       	add	r25, r25
 5f4:	00 08       	sbc	r0, r0
 5f6:	55 0f       	add	r21, r21
 5f8:	aa 0b       	sbc	r26, r26
 5fa:	e0 e8       	ldi	r30, 0x80	; 128
 5fc:	fe ef       	ldi	r31, 0xFE	; 254
 5fe:	16 16       	cp	r1, r22
 600:	17 06       	cpc	r1, r23
 602:	e8 07       	cpc	r30, r24
 604:	f9 07       	cpc	r31, r25
 606:	c0 f0       	brcs	.+48     	; 0x638 <__fp_cmp+0x46>
 608:	12 16       	cp	r1, r18
 60a:	13 06       	cpc	r1, r19
 60c:	e4 07       	cpc	r30, r20
 60e:	f5 07       	cpc	r31, r21
 610:	98 f0       	brcs	.+38     	; 0x638 <__fp_cmp+0x46>
 612:	62 1b       	sub	r22, r18
 614:	73 0b       	sbc	r23, r19
 616:	84 0b       	sbc	r24, r20
 618:	95 0b       	sbc	r25, r21
 61a:	39 f4       	brne	.+14     	; 0x62a <__fp_cmp+0x38>
 61c:	0a 26       	eor	r0, r26
 61e:	61 f0       	breq	.+24     	; 0x638 <__fp_cmp+0x46>
 620:	23 2b       	or	r18, r19
 622:	24 2b       	or	r18, r20
 624:	25 2b       	or	r18, r21
 626:	21 f4       	brne	.+8      	; 0x630 <__fp_cmp+0x3e>
 628:	08 95       	ret
 62a:	0a 26       	eor	r0, r26
 62c:	09 f4       	brne	.+2      	; 0x630 <__fp_cmp+0x3e>
 62e:	a1 40       	sbci	r26, 0x01	; 1
 630:	a6 95       	lsr	r26
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	81 1d       	adc	r24, r1
 636:	81 1d       	adc	r24, r1
 638:	08 95       	ret

0000063a <__fp_inf>:
 63a:	97 f9       	bld	r25, 7
 63c:	9f 67       	ori	r25, 0x7F	; 127
 63e:	80 e8       	ldi	r24, 0x80	; 128
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	08 95       	ret

00000646 <__fp_nan>:
 646:	9f ef       	ldi	r25, 0xFF	; 255
 648:	80 ec       	ldi	r24, 0xC0	; 192
 64a:	08 95       	ret

0000064c <__fp_pscA>:
 64c:	00 24       	eor	r0, r0
 64e:	0a 94       	dec	r0
 650:	16 16       	cp	r1, r22
 652:	17 06       	cpc	r1, r23
 654:	18 06       	cpc	r1, r24
 656:	09 06       	cpc	r0, r25
 658:	08 95       	ret

0000065a <__fp_pscB>:
 65a:	00 24       	eor	r0, r0
 65c:	0a 94       	dec	r0
 65e:	12 16       	cp	r1, r18
 660:	13 06       	cpc	r1, r19
 662:	14 06       	cpc	r1, r20
 664:	05 06       	cpc	r0, r21
 666:	08 95       	ret

00000668 <__fp_round>:
 668:	09 2e       	mov	r0, r25
 66a:	03 94       	inc	r0
 66c:	00 0c       	add	r0, r0
 66e:	11 f4       	brne	.+4      	; 0x674 <__fp_round+0xc>
 670:	88 23       	and	r24, r24
 672:	52 f0       	brmi	.+20     	; 0x688 <__fp_round+0x20>
 674:	bb 0f       	add	r27, r27
 676:	40 f4       	brcc	.+16     	; 0x688 <__fp_round+0x20>
 678:	bf 2b       	or	r27, r31
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0x18>
 67c:	60 ff       	sbrs	r22, 0
 67e:	04 c0       	rjmp	.+8      	; 0x688 <__fp_round+0x20>
 680:	6f 5f       	subi	r22, 0xFF	; 255
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	8f 4f       	sbci	r24, 0xFF	; 255
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	08 95       	ret

0000068a <__fp_split3>:
 68a:	57 fd       	sbrc	r21, 7
 68c:	90 58       	subi	r25, 0x80	; 128
 68e:	44 0f       	add	r20, r20
 690:	55 1f       	adc	r21, r21
 692:	59 f0       	breq	.+22     	; 0x6aa <__fp_splitA+0x10>
 694:	5f 3f       	cpi	r21, 0xFF	; 255
 696:	71 f0       	breq	.+28     	; 0x6b4 <__fp_splitA+0x1a>
 698:	47 95       	ror	r20

0000069a <__fp_splitA>:
 69a:	88 0f       	add	r24, r24
 69c:	97 fb       	bst	r25, 7
 69e:	99 1f       	adc	r25, r25
 6a0:	61 f0       	breq	.+24     	; 0x6ba <__fp_splitA+0x20>
 6a2:	9f 3f       	cpi	r25, 0xFF	; 255
 6a4:	79 f0       	breq	.+30     	; 0x6c4 <__fp_splitA+0x2a>
 6a6:	87 95       	ror	r24
 6a8:	08 95       	ret
 6aa:	12 16       	cp	r1, r18
 6ac:	13 06       	cpc	r1, r19
 6ae:	14 06       	cpc	r1, r20
 6b0:	55 1f       	adc	r21, r21
 6b2:	f2 cf       	rjmp	.-28     	; 0x698 <__fp_split3+0xe>
 6b4:	46 95       	lsr	r20
 6b6:	f1 df       	rcall	.-30     	; 0x69a <__fp_splitA>
 6b8:	08 c0       	rjmp	.+16     	; 0x6ca <__fp_splitA+0x30>
 6ba:	16 16       	cp	r1, r22
 6bc:	17 06       	cpc	r1, r23
 6be:	18 06       	cpc	r1, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	f1 cf       	rjmp	.-30     	; 0x6a6 <__fp_splitA+0xc>
 6c4:	86 95       	lsr	r24
 6c6:	71 05       	cpc	r23, r1
 6c8:	61 05       	cpc	r22, r1
 6ca:	08 94       	sec
 6cc:	08 95       	ret

000006ce <__fp_zero>:
 6ce:	e8 94       	clt

000006d0 <__fp_szero>:
 6d0:	bb 27       	eor	r27, r27
 6d2:	66 27       	eor	r22, r22
 6d4:	77 27       	eor	r23, r23
 6d6:	cb 01       	movw	r24, r22
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

000006dc <__gesf2>:
 6dc:	8a df       	rcall	.-236    	; 0x5f2 <__fp_cmp>
 6de:	08 f4       	brcc	.+2      	; 0x6e2 <__gesf2+0x6>
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__mulsf3>:
 6e4:	0b d0       	rcall	.+22     	; 0x6fc <__mulsf3x>
 6e6:	c0 cf       	rjmp	.-128    	; 0x668 <__fp_round>
 6e8:	b1 df       	rcall	.-158    	; 0x64c <__fp_pscA>
 6ea:	28 f0       	brcs	.+10     	; 0x6f6 <__mulsf3+0x12>
 6ec:	b6 df       	rcall	.-148    	; 0x65a <__fp_pscB>
 6ee:	18 f0       	brcs	.+6      	; 0x6f6 <__mulsf3+0x12>
 6f0:	95 23       	and	r25, r21
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__mulsf3+0x12>
 6f4:	a2 cf       	rjmp	.-188    	; 0x63a <__fp_inf>
 6f6:	a7 cf       	rjmp	.-178    	; 0x646 <__fp_nan>
 6f8:	11 24       	eor	r1, r1
 6fa:	ea cf       	rjmp	.-44     	; 0x6d0 <__fp_szero>

000006fc <__mulsf3x>:
 6fc:	c6 df       	rcall	.-116    	; 0x68a <__fp_split3>
 6fe:	a0 f3       	brcs	.-24     	; 0x6e8 <__mulsf3+0x4>

00000700 <__mulsf3_pse>:
 700:	95 9f       	mul	r25, r21
 702:	d1 f3       	breq	.-12     	; 0x6f8 <__mulsf3+0x14>
 704:	95 0f       	add	r25, r21
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	55 1f       	adc	r21, r21
 70a:	62 9f       	mul	r22, r18
 70c:	f0 01       	movw	r30, r0
 70e:	72 9f       	mul	r23, r18
 710:	bb 27       	eor	r27, r27
 712:	f0 0d       	add	r31, r0
 714:	b1 1d       	adc	r27, r1
 716:	63 9f       	mul	r22, r19
 718:	aa 27       	eor	r26, r26
 71a:	f0 0d       	add	r31, r0
 71c:	b1 1d       	adc	r27, r1
 71e:	aa 1f       	adc	r26, r26
 720:	64 9f       	mul	r22, r20
 722:	66 27       	eor	r22, r22
 724:	b0 0d       	add	r27, r0
 726:	a1 1d       	adc	r26, r1
 728:	66 1f       	adc	r22, r22
 72a:	82 9f       	mul	r24, r18
 72c:	22 27       	eor	r18, r18
 72e:	b0 0d       	add	r27, r0
 730:	a1 1d       	adc	r26, r1
 732:	62 1f       	adc	r22, r18
 734:	73 9f       	mul	r23, r19
 736:	b0 0d       	add	r27, r0
 738:	a1 1d       	adc	r26, r1
 73a:	62 1f       	adc	r22, r18
 73c:	83 9f       	mul	r24, r19
 73e:	a0 0d       	add	r26, r0
 740:	61 1d       	adc	r22, r1
 742:	22 1f       	adc	r18, r18
 744:	74 9f       	mul	r23, r20
 746:	33 27       	eor	r19, r19
 748:	a0 0d       	add	r26, r0
 74a:	61 1d       	adc	r22, r1
 74c:	23 1f       	adc	r18, r19
 74e:	84 9f       	mul	r24, r20
 750:	60 0d       	add	r22, r0
 752:	21 1d       	adc	r18, r1
 754:	82 2f       	mov	r24, r18
 756:	76 2f       	mov	r23, r22
 758:	6a 2f       	mov	r22, r26
 75a:	11 24       	eor	r1, r1
 75c:	9f 57       	subi	r25, 0x7F	; 127
 75e:	50 40       	sbci	r21, 0x00	; 0
 760:	8a f0       	brmi	.+34     	; 0x784 <__mulsf3_pse+0x84>
 762:	e1 f0       	breq	.+56     	; 0x79c <__mulsf3_pse+0x9c>
 764:	88 23       	and	r24, r24
 766:	4a f0       	brmi	.+18     	; 0x77a <__mulsf3_pse+0x7a>
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	bb 1f       	adc	r27, r27
 76e:	66 1f       	adc	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	91 50       	subi	r25, 0x01	; 1
 776:	50 40       	sbci	r21, 0x00	; 0
 778:	a9 f7       	brne	.-22     	; 0x764 <__mulsf3_pse+0x64>
 77a:	9e 3f       	cpi	r25, 0xFE	; 254
 77c:	51 05       	cpc	r21, r1
 77e:	70 f0       	brcs	.+28     	; 0x79c <__mulsf3_pse+0x9c>
 780:	5c cf       	rjmp	.-328    	; 0x63a <__fp_inf>
 782:	a6 cf       	rjmp	.-180    	; 0x6d0 <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	ec f3       	brlt	.-6      	; 0x782 <__mulsf3_pse+0x82>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	dc f3       	brlt	.-10     	; 0x782 <__mulsf3_pse+0x82>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	e7 95       	ror	r30
 798:	9f 5f       	subi	r25, 0xFF	; 255
 79a:	c1 f7       	brne	.-16     	; 0x78c <__mulsf3_pse+0x8c>
 79c:	fe 2b       	or	r31, r30
 79e:	88 0f       	add	r24, r24
 7a0:	91 1d       	adc	r25, r1
 7a2:	96 95       	lsr	r25
 7a4:	87 95       	ror	r24
 7a6:	97 f9       	bld	r25, 7
 7a8:	08 95       	ret

000007aa <__udivmodsi4>:
 7aa:	a1 e2       	ldi	r26, 0x21	; 33
 7ac:	1a 2e       	mov	r1, r26
 7ae:	aa 1b       	sub	r26, r26
 7b0:	bb 1b       	sub	r27, r27
 7b2:	fd 01       	movw	r30, r26
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <__udivmodsi4_ep>

000007b6 <__udivmodsi4_loop>:
 7b6:	aa 1f       	adc	r26, r26
 7b8:	bb 1f       	adc	r27, r27
 7ba:	ee 1f       	adc	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	a2 17       	cp	r26, r18
 7c0:	b3 07       	cpc	r27, r19
 7c2:	e4 07       	cpc	r30, r20
 7c4:	f5 07       	cpc	r31, r21
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__udivmodsi4_ep>
 7c8:	a2 1b       	sub	r26, r18
 7ca:	b3 0b       	sbc	r27, r19
 7cc:	e4 0b       	sbc	r30, r20
 7ce:	f5 0b       	sbc	r31, r21

000007d0 <__udivmodsi4_ep>:
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	1a 94       	dec	r1
 7da:	69 f7       	brne	.-38     	; 0x7b6 <__udivmodsi4_loop>
 7dc:	60 95       	com	r22
 7de:	70 95       	com	r23
 7e0:	80 95       	com	r24
 7e2:	90 95       	com	r25
 7e4:	9b 01       	movw	r18, r22
 7e6:	ac 01       	movw	r20, r24
 7e8:	bd 01       	movw	r22, r26
 7ea:	cf 01       	movw	r24, r30
 7ec:	08 95       	ret

000007ee <__tablejump2__>:
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	05 90       	lpm	r0, Z+
 7f4:	f4 91       	lpm	r31, Z
 7f6:	e0 2d       	mov	r30, r0
 7f8:	09 94       	ijmp

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
