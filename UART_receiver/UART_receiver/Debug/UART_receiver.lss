
UART_receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000998  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000203  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
char receive_data;
void send_data(unsigned char data);
unsigned char receiveData(void);
int main(void)
{
    DDRD |= (1<<LED_PIN)|(1<<RF_control_PIN);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 60       	ori	r24, 0x0C	; 12
  aa:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1<<LED_PIN);
  ac:	5b 98       	cbi	0x0b, 3	; 11
   // PORTD |= (1<<RF_control_PIN);
    uart_init(9600);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	95 e2       	ldi	r25, 0x25	; 37
  b2:	0e 94 ab 00 	call	0x156	; 0x156 <uart_init>
	sei();
  b6:	78 94       	sei
	
//	 PORTD &= ~(1<<RF_control_PIN);
// 	 _delay_ms(100) ;
// 	 uart_SendString((unsigned char*)"AT+FU1\r\n"); // 1 , 2 , 3 all should be FU1
	 PORTD |= (1<<RF_control_PIN);
  b8:	5a 9a       	sbi	0x0b, 2	; 11
	// char x;
    while (1) 
    {
		//receive_data = uart_Receive;
			if(receive_data == 'T')
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  be:	84 35       	cpi	r24, 0x54	; 84
  c0:	a9 f4       	brne	.+42     	; 0xec <main+0x46>
			{
				PORTD |= (1<<LED_PIN);
  c2:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	84 e3       	ldi	r24, 0x34	; 52
  c8:	9c e0       	ldi	r25, 0x0C	; 12
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2e>
  d4:	00 00       	nop
				_delay_ms(500);
				PORTD &= ~(1<<LED_PIN);
  d6:	5b 98       	cbi	0x0b, 3	; 11
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	84 e3       	ldi	r24, 0x34	; 52
  dc:	9c e0       	ldi	r25, 0x0C	; 12
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x38>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x42>
  e8:	00 00       	nop
  ea:	17 c0       	rjmp	.+46     	; 0x11a <main+0x74>
				_delay_ms(500);
			}
			else if(receive_data == NULL)
  ec:	81 11       	cpse	r24, r1
  ee:	0b c0       	rjmp	.+22     	; 0x106 <main+0x60>
			{
					PORTD &= ~(1<<LED_PIN);
  f0:	5b 98       	cbi	0x0b, 3	; 11
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x5c>
 102:	00 00       	nop
 104:	0a c0       	rjmp	.+20     	; 0x11a <main+0x74>
					_delay_ms(1000);
			}
				else
				{
					PORTD |= (1<<LED_PIN);
 106:	5b 9a       	sbi	0x0b, 3	; 11
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 e6       	ldi	r24, 0x69	; 105
 10c:	98 e1       	ldi	r25, 0x18	; 24
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x68>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x72>
 118:	00 00       	nop
					_delay_ms(1000);
				}
		
		uart_SendString("R");
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 de 00 	call	0x1bc	; 0x1bc <uart_SendString>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	89 e6       	ldi	r24, 0x69	; 105
 126:	98 e1       	ldi	r25, 0x18	; 24
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x82>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x8c>
 132:	00 00       	nop
 134:	c2 cf       	rjmp	.-124    	; 0xba <main+0x14>

00000136 <__vector_18>:
		
    }
}

ISR(USART_RX_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	receive_data = UDR0;
 142:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <uart_init>:
/* receive function  ( return one byte) */
unsigned char uart_Receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0 ;
}
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	aa 1f       	adc	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	9c 01       	movw	r18, r24
 16c:	ad 01       	movw	r20, r26
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	44 1f       	adc	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	44 1f       	adc	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	72 e1       	ldi	r23, 0x12	; 18
 182:	8a e7       	ldi	r24, 0x7A	; 122
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 ed 00 	call	0x1da	; 0x1da <__udivmodsi4>
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	31 09       	sbc	r19, r1
 18e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 192:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 196:	e2 ec       	ldi	r30, 0xC2	; 194
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 60       	ori	r24, 0x06	; 6
 19e:	80 83       	st	Z, r24
 1a0:	e1 ec       	ldi	r30, 0xC1	; 193
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 61       	ori	r24, 0x18	; 24
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <uart_Send>:
/* send function ( send one byte ) */
void uart_Send(unsigned char  data)
{
	while(!(UCSR0A & (1 << UDRE0)));
 1ac:	e0 ec       	ldi	r30, 0xC0	; 192
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 81       	ld	r25, Z
 1b2:	95 ff       	sbrs	r25, 5
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <uart_Send+0x4>
	UDR0 = data	 ;
 1b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ba:	08 95       	ret

000001bc <uart_SendString>:
	
}
/*send function ( String )*/

void uart_SendString(char* data) 
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
    while(*data)
 1c2:	88 81       	ld	r24, Y
 1c4:	88 23       	and	r24, r24
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <uart_SendString+0x18>
 1c8:	21 96       	adiw	r28, 0x01	; 1
	{ //if there is a char
    uart_Send(*data); //process it as a byte data
 1ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <uart_Send>
}
/*send function ( String )*/

void uart_SendString(char* data) 
{
    while(*data)
 1ce:	89 91       	ld	r24, Y+
 1d0:	81 11       	cpse	r24, r1
 1d2:	fb cf       	rjmp	.-10     	; 0x1ca <uart_SendString+0xe>
	{ //if there is a char
    uart_Send(*data); //process it as a byte data
	data++;
	}
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <__udivmodsi4>:
 1da:	a1 e2       	ldi	r26, 0x21	; 33
 1dc:	1a 2e       	mov	r1, r26
 1de:	aa 1b       	sub	r26, r26
 1e0:	bb 1b       	sub	r27, r27
 1e2:	fd 01       	movw	r30, r26
 1e4:	0d c0       	rjmp	.+26     	; 0x200 <__udivmodsi4_ep>

000001e6 <__udivmodsi4_loop>:
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	ee 1f       	adc	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	a2 17       	cp	r26, r18
 1f0:	b3 07       	cpc	r27, r19
 1f2:	e4 07       	cpc	r30, r20
 1f4:	f5 07       	cpc	r31, r21
 1f6:	20 f0       	brcs	.+8      	; 0x200 <__udivmodsi4_ep>
 1f8:	a2 1b       	sub	r26, r18
 1fa:	b3 0b       	sbc	r27, r19
 1fc:	e4 0b       	sbc	r30, r20
 1fe:	f5 0b       	sbc	r31, r21

00000200 <__udivmodsi4_ep>:
 200:	66 1f       	adc	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	88 1f       	adc	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	1a 94       	dec	r1
 20a:	69 f7       	brne	.-38     	; 0x1e6 <__udivmodsi4_loop>
 20c:	60 95       	com	r22
 20e:	70 95       	com	r23
 210:	80 95       	com	r24
 212:	90 95       	com	r25
 214:	9b 01       	movw	r18, r22
 216:	ac 01       	movw	r20, r24
 218:	bd 01       	movw	r22, r26
 21a:	cf 01       	movw	r24, r30
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
